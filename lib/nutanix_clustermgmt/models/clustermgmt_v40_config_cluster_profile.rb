=begin
#Nutanix Cluster Management APIs

#Manage Hosts, Clusters and other Infrastructure.

The version of the OpenAPI document: 4.0.2

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module NutanixClustermgmt
  class ClustermgmtV40ConfigClusterProfile
    # A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    attr_accessor :tenant_id

    # A globally unique identifier of an instance that is suitable for external consumption. 
    attr_accessor :ext_id

    # A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    attr_accessor :links

    # Name of the cluster profile
    attr_accessor :name

    # Detailed description of a cluster profile
    attr_accessor :description

    # Creation time of cluster profile
    attr_accessor :create_time

    # Last updated time of a cluster profile
    attr_accessor :last_update_time

    # Details of the user who created this cluster profile
    attr_accessor :created_by

    # Details of the user who has recently updated this cluster profile
    attr_accessor :last_updated_by

    # Count of clusters associated to a cluster profile
    attr_accessor :cluster_count

    # The count indicates the number of clusters associated with a cluster profile that have experienced drift. Drifted clusters are those in which the configuration differs from the defined profile. For example, the NTP server has different values on a cluster as compared to the profile it is attached.
    attr_accessor :drifted_cluster_count

    # Managed cluster information
    attr_accessor :clusters

    # Indicates if a configuration of attached clusters can be skipped from monitoring.
    attr_accessor :allowed_overrides

    # List of name servers on a cluster. This is part of payload for both cluster create & update operations. For create operation, only ipv4 address / fqdn values are supported currently.
    attr_accessor :name_server_ip_list

    # List of NTP servers on a cluster. This is part of payload for both cluster create & update operations. For create operation, only ipv4 address / fqdn values are supported currently.
    attr_accessor :ntp_server_ip_list

    attr_accessor :smtp_server

    # NFS subnet whitelist addresses. This is part of payload for cluster update operation only.
    attr_accessor :nfs_subnet_whitelist

    attr_accessor :snmp_config

    # RSYSLOG Server.
    attr_accessor :rsyslog_server_list

    attr_accessor :pulse_status

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tenant_id' => :'tenantId',
        :'ext_id' => :'extId',
        :'links' => :'links',
        :'name' => :'name',
        :'description' => :'description',
        :'create_time' => :'createTime',
        :'last_update_time' => :'lastUpdateTime',
        :'created_by' => :'createdBy',
        :'last_updated_by' => :'lastUpdatedBy',
        :'cluster_count' => :'clusterCount',
        :'drifted_cluster_count' => :'driftedClusterCount',
        :'clusters' => :'clusters',
        :'allowed_overrides' => :'allowedOverrides',
        :'name_server_ip_list' => :'nameServerIpList',
        :'ntp_server_ip_list' => :'ntpServerIpList',
        :'smtp_server' => :'smtpServer',
        :'nfs_subnet_whitelist' => :'nfsSubnetWhitelist',
        :'snmp_config' => :'snmpConfig',
        :'rsyslog_server_list' => :'rsyslogServerList',
        :'pulse_status' => :'pulseStatus'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tenant_id' => :'String',
        :'ext_id' => :'String',
        :'links' => :'Array<CommonV10ResponseApiLink>',
        :'name' => :'String',
        :'description' => :'String',
        :'create_time' => :'Time',
        :'last_update_time' => :'Time',
        :'created_by' => :'String',
        :'last_updated_by' => :'String',
        :'cluster_count' => :'Integer',
        :'drifted_cluster_count' => :'Integer',
        :'clusters' => :'Array<ClustermgmtV40ConfigManagedCluster>',
        :'allowed_overrides' => :'Array<ClustermgmtV40ConfigConfigType>',
        :'name_server_ip_list' => :'Array<CommonV10ConfigIPAddress>',
        :'ntp_server_ip_list' => :'Array<CommonV10ConfigIPAddressOrFQDN>',
        :'smtp_server' => :'ClustermgmtV40ConfigSmtpServerRef',
        :'nfs_subnet_whitelist' => :'Array<String>',
        :'snmp_config' => :'ClustermgmtV40ConfigSnmpConfig',
        :'rsyslog_server_list' => :'Array<ClustermgmtV40ConfigRsyslogServer>',
        :'pulse_status' => :'ClustermgmtV40ConfigPulseStatus'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ext_id',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'CommonV10ResponseExternalizableAbstractModel'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixClustermgmt::ClustermgmtV40ConfigClusterProfile` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixClustermgmt::ClustermgmtV40ConfigClusterProfile`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tenant_id')
        self.tenant_id = attributes[:'tenant_id']
      end

      if attributes.key?(:'ext_id')
        self.ext_id = attributes[:'ext_id']
      end

      if attributes.key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'create_time')
        self.create_time = attributes[:'create_time']
      end

      if attributes.key?(:'last_update_time')
        self.last_update_time = attributes[:'last_update_time']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'last_updated_by')
        self.last_updated_by = attributes[:'last_updated_by']
      end

      if attributes.key?(:'cluster_count')
        self.cluster_count = attributes[:'cluster_count']
      end

      if attributes.key?(:'drifted_cluster_count')
        self.drifted_cluster_count = attributes[:'drifted_cluster_count']
      end

      if attributes.key?(:'clusters')
        if (value = attributes[:'clusters']).is_a?(Array)
          self.clusters = value
        end
      end

      if attributes.key?(:'allowed_overrides')
        if (value = attributes[:'allowed_overrides']).is_a?(Array)
          self.allowed_overrides = value
        end
      end

      if attributes.key?(:'name_server_ip_list')
        if (value = attributes[:'name_server_ip_list']).is_a?(Array)
          self.name_server_ip_list = value
        end
      end

      if attributes.key?(:'ntp_server_ip_list')
        if (value = attributes[:'ntp_server_ip_list']).is_a?(Array)
          self.ntp_server_ip_list = value
        end
      end

      if attributes.key?(:'smtp_server')
        self.smtp_server = attributes[:'smtp_server']
      end

      if attributes.key?(:'nfs_subnet_whitelist')
        if (value = attributes[:'nfs_subnet_whitelist']).is_a?(Array)
          self.nfs_subnet_whitelist = value
        end
      end

      if attributes.key?(:'snmp_config')
        self.snmp_config = attributes[:'snmp_config']
      end

      if attributes.key?(:'rsyslog_server_list')
        if (value = attributes[:'rsyslog_server_list']).is_a?(Array)
          self.rsyslog_server_list = value
        end
      end

      if attributes.key?(:'pulse_status')
        self.pulse_status = attributes[:'pulse_status']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@tenant_id.nil? && @tenant_id !~ pattern
        invalid_properties.push("invalid value for \"tenant_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@ext_id.nil? && @ext_id !~ pattern
        invalid_properties.push("invalid value for \"ext_id\", must conform to the pattern #{pattern}.")
      end

      if !@links.nil? && @links.length > 20
        invalid_properties.push('invalid value for "links", number of items must be less than or equal to 20.')
      end

      if !@links.nil? && @links.length < 0
        invalid_properties.push('invalid value for "links", number of items must be greater than or equal to 0.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 64
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 64.')
      end

      pattern = Regexp.new(/^[A-Za-z0-9._-]+$/)
      if @name !~ pattern
        invalid_properties.push("invalid value for \"name\", must conform to the pattern #{pattern}.")
      end

      if !@description.nil? && @description.to_s.length > 1000
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 1000.')
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@created_by.nil? && @created_by !~ pattern
        invalid_properties.push("invalid value for \"created_by\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@last_updated_by.nil? && @last_updated_by !~ pattern
        invalid_properties.push("invalid value for \"last_updated_by\", must conform to the pattern #{pattern}.")
      end

      if !@clusters.nil? && @clusters.length > 400
        invalid_properties.push('invalid value for "clusters", number of items must be less than or equal to 400.')
      end

      if !@clusters.nil? && @clusters.length < 1
        invalid_properties.push('invalid value for "clusters", number of items must be greater than or equal to 1.')
      end

      if !@allowed_overrides.nil? && @allowed_overrides.length > 50
        invalid_properties.push('invalid value for "allowed_overrides", number of items must be less than or equal to 50.')
      end

      if !@allowed_overrides.nil? && @allowed_overrides.length < 0
        invalid_properties.push('invalid value for "allowed_overrides", number of items must be greater than or equal to 0.')
      end

      if !@name_server_ip_list.nil? && @name_server_ip_list.length > 1024
        invalid_properties.push('invalid value for "name_server_ip_list", number of items must be less than or equal to 1024.')
      end

      if !@name_server_ip_list.nil? && @name_server_ip_list.length < 0
        invalid_properties.push('invalid value for "name_server_ip_list", number of items must be greater than or equal to 0.')
      end

      if !@ntp_server_ip_list.nil? && @ntp_server_ip_list.length > 1024
        invalid_properties.push('invalid value for "ntp_server_ip_list", number of items must be less than or equal to 1024.')
      end

      if !@ntp_server_ip_list.nil? && @ntp_server_ip_list.length < 0
        invalid_properties.push('invalid value for "ntp_server_ip_list", number of items must be greater than or equal to 0.')
      end

      if !@nfs_subnet_whitelist.nil? && @nfs_subnet_whitelist.length > 1024
        invalid_properties.push('invalid value for "nfs_subnet_whitelist", number of items must be less than or equal to 1024.')
      end

      if !@nfs_subnet_whitelist.nil? && @nfs_subnet_whitelist.length < 0
        invalid_properties.push('invalid value for "nfs_subnet_whitelist", number of items must be greater than or equal to 0.')
      end

      if !@rsyslog_server_list.nil? && @rsyslog_server_list.length > 100
        invalid_properties.push('invalid value for "rsyslog_server_list", number of items must be less than or equal to 100.')
      end

      if !@rsyslog_server_list.nil? && @rsyslog_server_list.length < 0
        invalid_properties.push('invalid value for "rsyslog_server_list", number of items must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@tenant_id.nil? && @tenant_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@ext_id.nil? && @ext_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@links.nil? && @links.length > 20
      return false if !@links.nil? && @links.length < 0
      return false if @name.nil?
      return false if @name.to_s.length > 64
      return false if @name !~ Regexp.new(/^[A-Za-z0-9._-]+$/)
      return false if !@description.nil? && @description.to_s.length > 1000
      return false if !@created_by.nil? && @created_by !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@last_updated_by.nil? && @last_updated_by !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@clusters.nil? && @clusters.length > 400
      return false if !@clusters.nil? && @clusters.length < 1
      return false if !@allowed_overrides.nil? && @allowed_overrides.length > 50
      return false if !@allowed_overrides.nil? && @allowed_overrides.length < 0
      return false if !@name_server_ip_list.nil? && @name_server_ip_list.length > 1024
      return false if !@name_server_ip_list.nil? && @name_server_ip_list.length < 0
      return false if !@ntp_server_ip_list.nil? && @ntp_server_ip_list.length > 1024
      return false if !@ntp_server_ip_list.nil? && @ntp_server_ip_list.length < 0
      return false if !@nfs_subnet_whitelist.nil? && @nfs_subnet_whitelist.length > 1024
      return false if !@nfs_subnet_whitelist.nil? && @nfs_subnet_whitelist.length < 0
      return false if !@rsyslog_server_list.nil? && @rsyslog_server_list.length > 100
      return false if !@rsyslog_server_list.nil? && @rsyslog_server_list.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] tenant_id Value to be assigned
    def tenant_id=(tenant_id)
      if tenant_id.nil?
        fail ArgumentError, 'tenant_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if tenant_id !~ pattern
        fail ArgumentError, "invalid value for \"tenant_id\", must conform to the pattern #{pattern}."
      end

      @tenant_id = tenant_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ext_id Value to be assigned
    def ext_id=(ext_id)
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !ext_id.nil? && ext_id !~ pattern
        fail ArgumentError, "invalid value for \"ext_id\", must conform to the pattern #{pattern}."
      end

      @ext_id = ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] links Value to be assigned
    def links=(links)
      if links.nil?
        fail ArgumentError, 'links cannot be nil'
      end

      if links.length > 20
        fail ArgumentError, 'invalid value for "links", number of items must be less than or equal to 20.'
      end

      if links.length < 0
        fail ArgumentError, 'invalid value for "links", number of items must be greater than or equal to 0.'
      end

      @links = links
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 64
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 64.'
      end

      pattern = Regexp.new(/^[A-Za-z0-9._-]+$/)
      if name !~ pattern
        fail ArgumentError, "invalid value for \"name\", must conform to the pattern #{pattern}."
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.nil?
        fail ArgumentError, 'description cannot be nil'
      end

      if description.to_s.length > 1000
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 1000.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] created_by Value to be assigned
    def created_by=(created_by)
      if created_by.nil?
        fail ArgumentError, 'created_by cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if created_by !~ pattern
        fail ArgumentError, "invalid value for \"created_by\", must conform to the pattern #{pattern}."
      end

      @created_by = created_by
    end

    # Custom attribute writer method with validation
    # @param [Object] last_updated_by Value to be assigned
    def last_updated_by=(last_updated_by)
      if last_updated_by.nil?
        fail ArgumentError, 'last_updated_by cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if last_updated_by !~ pattern
        fail ArgumentError, "invalid value for \"last_updated_by\", must conform to the pattern #{pattern}."
      end

      @last_updated_by = last_updated_by
    end

    # Custom attribute writer method with validation
    # @param [Object] clusters Value to be assigned
    def clusters=(clusters)
      if clusters.nil?
        fail ArgumentError, 'clusters cannot be nil'
      end

      if clusters.length > 400
        fail ArgumentError, 'invalid value for "clusters", number of items must be less than or equal to 400.'
      end

      if clusters.length < 1
        fail ArgumentError, 'invalid value for "clusters", number of items must be greater than or equal to 1.'
      end

      @clusters = clusters
    end

    # Custom attribute writer method with validation
    # @param [Object] allowed_overrides Value to be assigned
    def allowed_overrides=(allowed_overrides)
      if allowed_overrides.nil?
        fail ArgumentError, 'allowed_overrides cannot be nil'
      end

      if allowed_overrides.length > 50
        fail ArgumentError, 'invalid value for "allowed_overrides", number of items must be less than or equal to 50.'
      end

      if allowed_overrides.length < 0
        fail ArgumentError, 'invalid value for "allowed_overrides", number of items must be greater than or equal to 0.'
      end

      @allowed_overrides = allowed_overrides
    end

    # Custom attribute writer method with validation
    # @param [Object] name_server_ip_list Value to be assigned
    def name_server_ip_list=(name_server_ip_list)
      if name_server_ip_list.nil?
        fail ArgumentError, 'name_server_ip_list cannot be nil'
      end

      if name_server_ip_list.length > 1024
        fail ArgumentError, 'invalid value for "name_server_ip_list", number of items must be less than or equal to 1024.'
      end

      if name_server_ip_list.length < 0
        fail ArgumentError, 'invalid value for "name_server_ip_list", number of items must be greater than or equal to 0.'
      end

      @name_server_ip_list = name_server_ip_list
    end

    # Custom attribute writer method with validation
    # @param [Object] ntp_server_ip_list Value to be assigned
    def ntp_server_ip_list=(ntp_server_ip_list)
      if ntp_server_ip_list.nil?
        fail ArgumentError, 'ntp_server_ip_list cannot be nil'
      end

      if ntp_server_ip_list.length > 1024
        fail ArgumentError, 'invalid value for "ntp_server_ip_list", number of items must be less than or equal to 1024.'
      end

      if ntp_server_ip_list.length < 0
        fail ArgumentError, 'invalid value for "ntp_server_ip_list", number of items must be greater than or equal to 0.'
      end

      @ntp_server_ip_list = ntp_server_ip_list
    end

    # Custom attribute writer method with validation
    # @param [Object] nfs_subnet_whitelist Value to be assigned
    def nfs_subnet_whitelist=(nfs_subnet_whitelist)
      if nfs_subnet_whitelist.nil?
        fail ArgumentError, 'nfs_subnet_whitelist cannot be nil'
      end

      if nfs_subnet_whitelist.length > 1024
        fail ArgumentError, 'invalid value for "nfs_subnet_whitelist", number of items must be less than or equal to 1024.'
      end

      if nfs_subnet_whitelist.length < 0
        fail ArgumentError, 'invalid value for "nfs_subnet_whitelist", number of items must be greater than or equal to 0.'
      end

      @nfs_subnet_whitelist = nfs_subnet_whitelist
    end

    # Custom attribute writer method with validation
    # @param [Object] rsyslog_server_list Value to be assigned
    def rsyslog_server_list=(rsyslog_server_list)
      if rsyslog_server_list.nil?
        fail ArgumentError, 'rsyslog_server_list cannot be nil'
      end

      if rsyslog_server_list.length > 100
        fail ArgumentError, 'invalid value for "rsyslog_server_list", number of items must be less than or equal to 100.'
      end

      if rsyslog_server_list.length < 0
        fail ArgumentError, 'invalid value for "rsyslog_server_list", number of items must be greater than or equal to 0.'
      end

      @rsyslog_server_list = rsyslog_server_list
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tenant_id == o.tenant_id &&
          ext_id == o.ext_id &&
          links == o.links &&
          name == o.name &&
          description == o.description &&
          create_time == o.create_time &&
          last_update_time == o.last_update_time &&
          created_by == o.created_by &&
          last_updated_by == o.last_updated_by &&
          cluster_count == o.cluster_count &&
          drifted_cluster_count == o.drifted_cluster_count &&
          clusters == o.clusters &&
          allowed_overrides == o.allowed_overrides &&
          name_server_ip_list == o.name_server_ip_list &&
          ntp_server_ip_list == o.ntp_server_ip_list &&
          smtp_server == o.smtp_server &&
          nfs_subnet_whitelist == o.nfs_subnet_whitelist &&
          snmp_config == o.snmp_config &&
          rsyslog_server_list == o.rsyslog_server_list &&
          pulse_status == o.pulse_status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tenant_id, ext_id, links, name, description, create_time, last_update_time, created_by, last_updated_by, cluster_count, drifted_cluster_count, clusters, allowed_overrides, name_server_ip_list, ntp_server_ip_list, smtp_server, nfs_subnet_whitelist, snmp_config, rsyslog_server_list, pulse_status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixClustermgmt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
