=begin
#Nutanix Cluster Management APIs

#Manage Hosts, Clusters and other Infrastructure.

The version of the OpenAPI document: 4.0.2

Generated by: https://openapi-generator.tech
Generator version: 7.16.0

=end

require 'date'
require 'time'

module NutanixClustermgmt
  # A model that represents Disk advance configuration properties.
  class ClustermgmtV40ConfigDiskAdvanceConfig
    # Indicates whether the Disk has self-encryption enabled.
    attr_accessor :is_self_encrypting_drive

    # Indicates if the NVMe Disk is self-managed and does not require a host/CVM reboot.
    attr_accessor :is_self_managed_nvme

    # Indicates whether the Disk is password protected.
    attr_accessor :is_password_protected

    # Indicates if the Disk is a boot Disk.
    attr_accessor :is_boot_disk

    # Indicates if the Disk is for boot only and no Disk operations will be performed on it.
    attr_accessor :has_boot_partitions_only

    # Indicates if NVMe device is managed by storage performance development kit(SPDK).
    attr_accessor :is_spdk_managed

    # Indicates whether the Disk is online or offline.
    attr_accessor :is_online

    # Indicates if the Disk is marked for removal.
    attr_accessor :is_marked_for_removal

    # Indicates if data migration is completed for the Disk.
    attr_accessor :is_data_migrated

    # Indicates if the Disk is unhealthy.
    attr_accessor :is_unhealthy

    # Indicates if the Disk is suspected to be unhealthy.
    attr_accessor :is_suspected_unhealthy

    # Indicates if the Disk is mounted.
    attr_accessor :is_mounted

    # Indicates if the Disk is under diagnosis.
    attr_accessor :is_under_diagnosis

    # Indicates the Disk diagnostic information along with the device-related statistics are present.
    attr_accessor :is_diagnostic_info_available

    # Indicates whether or not the Disk error is seen in the kernel logs.
    attr_accessor :is_error_found_in_log

    # Indicates if diagnostics are running on the Disk.
    attr_accessor :is_planned_outage

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'is_self_encrypting_drive' => :'isSelfEncryptingDrive',
        :'is_self_managed_nvme' => :'isSelfManagedNvme',
        :'is_password_protected' => :'isPasswordProtected',
        :'is_boot_disk' => :'isBootDisk',
        :'has_boot_partitions_only' => :'hasBootPartitionsOnly',
        :'is_spdk_managed' => :'isSpdkManaged',
        :'is_online' => :'isOnline',
        :'is_marked_for_removal' => :'isMarkedForRemoval',
        :'is_data_migrated' => :'isDataMigrated',
        :'is_unhealthy' => :'isUnhealthy',
        :'is_suspected_unhealthy' => :'isSuspectedUnhealthy',
        :'is_mounted' => :'isMounted',
        :'is_under_diagnosis' => :'isUnderDiagnosis',
        :'is_diagnostic_info_available' => :'isDiagnosticInfoAvailable',
        :'is_error_found_in_log' => :'isErrorFoundInLog',
        :'is_planned_outage' => :'isPlannedOutage'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'is_self_encrypting_drive' => :'Boolean',
        :'is_self_managed_nvme' => :'Boolean',
        :'is_password_protected' => :'Boolean',
        :'is_boot_disk' => :'Boolean',
        :'has_boot_partitions_only' => :'Boolean',
        :'is_spdk_managed' => :'Boolean',
        :'is_online' => :'Boolean',
        :'is_marked_for_removal' => :'Boolean',
        :'is_data_migrated' => :'Boolean',
        :'is_unhealthy' => :'Boolean',
        :'is_suspected_unhealthy' => :'Boolean',
        :'is_mounted' => :'Boolean',
        :'is_under_diagnosis' => :'Boolean',
        :'is_diagnostic_info_available' => :'Boolean',
        :'is_error_found_in_log' => :'Boolean',
        :'is_planned_outage' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixClustermgmt::ClustermgmtV40ConfigDiskAdvanceConfig` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixClustermgmt::ClustermgmtV40ConfigDiskAdvanceConfig`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'is_self_encrypting_drive')
        self.is_self_encrypting_drive = attributes[:'is_self_encrypting_drive']
      end

      if attributes.key?(:'is_self_managed_nvme')
        self.is_self_managed_nvme = attributes[:'is_self_managed_nvme']
      end

      if attributes.key?(:'is_password_protected')
        self.is_password_protected = attributes[:'is_password_protected']
      end

      if attributes.key?(:'is_boot_disk')
        self.is_boot_disk = attributes[:'is_boot_disk']
      end

      if attributes.key?(:'has_boot_partitions_only')
        self.has_boot_partitions_only = attributes[:'has_boot_partitions_only']
      end

      if attributes.key?(:'is_spdk_managed')
        self.is_spdk_managed = attributes[:'is_spdk_managed']
      end

      if attributes.key?(:'is_online')
        self.is_online = attributes[:'is_online']
      end

      if attributes.key?(:'is_marked_for_removal')
        self.is_marked_for_removal = attributes[:'is_marked_for_removal']
      end

      if attributes.key?(:'is_data_migrated')
        self.is_data_migrated = attributes[:'is_data_migrated']
      end

      if attributes.key?(:'is_unhealthy')
        self.is_unhealthy = attributes[:'is_unhealthy']
      end

      if attributes.key?(:'is_suspected_unhealthy')
        self.is_suspected_unhealthy = attributes[:'is_suspected_unhealthy']
      end

      if attributes.key?(:'is_mounted')
        self.is_mounted = attributes[:'is_mounted']
      end

      if attributes.key?(:'is_under_diagnosis')
        self.is_under_diagnosis = attributes[:'is_under_diagnosis']
      end

      if attributes.key?(:'is_diagnostic_info_available')
        self.is_diagnostic_info_available = attributes[:'is_diagnostic_info_available']
      end

      if attributes.key?(:'is_error_found_in_log')
        self.is_error_found_in_log = attributes[:'is_error_found_in_log']
      end

      if attributes.key?(:'is_planned_outage')
        self.is_planned_outage = attributes[:'is_planned_outage']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          is_self_encrypting_drive == o.is_self_encrypting_drive &&
          is_self_managed_nvme == o.is_self_managed_nvme &&
          is_password_protected == o.is_password_protected &&
          is_boot_disk == o.is_boot_disk &&
          has_boot_partitions_only == o.has_boot_partitions_only &&
          is_spdk_managed == o.is_spdk_managed &&
          is_online == o.is_online &&
          is_marked_for_removal == o.is_marked_for_removal &&
          is_data_migrated == o.is_data_migrated &&
          is_unhealthy == o.is_unhealthy &&
          is_suspected_unhealthy == o.is_suspected_unhealthy &&
          is_mounted == o.is_mounted &&
          is_under_diagnosis == o.is_under_diagnosis &&
          is_diagnostic_info_available == o.is_diagnostic_info_available &&
          is_error_found_in_log == o.is_error_found_in_log &&
          is_planned_outage == o.is_planned_outage
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [is_self_encrypting_drive, is_self_managed_nvme, is_password_protected, is_boot_disk, has_boot_partitions_only, is_spdk_managed, is_online, is_marked_for_removal, is_data_migrated, is_unhealthy, is_suspected_unhealthy, is_mounted, is_under_diagnosis, is_diagnostic_info_available, is_error_found_in_log, is_planned_outage].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixClustermgmt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
