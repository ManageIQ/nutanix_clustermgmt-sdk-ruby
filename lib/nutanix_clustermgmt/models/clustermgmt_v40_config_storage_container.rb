=begin
#Nutanix Cluster Management APIs

#Manage Hosts, Clusters and other Infrastructure.

The version of the OpenAPI document: 4.0.2

Generated by: https://openapi-generator.tech
Generator version: 7.16.0

=end

require 'date'
require 'time'

module NutanixClustermgmt
  class ClustermgmtV40ConfigStorageContainer
    # A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    attr_accessor :tenant_id

    # A globally unique identifier of an instance that is suitable for external consumption. 
    attr_accessor :ext_id

    # A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    attr_accessor :links

    # The external identifier of the Storage Container.
    attr_accessor :container_ext_id

    # The external identifier of the owner.
    attr_accessor :owner_ext_id

    # Name of the Storage Container. Note that the name of Storage Container should be unique in every cluster.
    attr_accessor :name

    # The external identifier of the cluster owning the Storage Container.
    attr_accessor :cluster_ext_id

    # The external identifier  of the Storage Pool owning the Storage Container instance.
    attr_accessor :storage_pool_ext_id

    # Indicates whether the Storage Container is marked for removal. This field is set when the Storage Container is about to be destroyed.
    attr_accessor :is_marked_for_removal

    # Indicates whether the Storage Container is marked for removal. This field is set when the Storage Container is about to be destroyed.
    attr_accessor :marked_for_removal

    # Maximum physical capacity of the Storage Container in bytes.
    attr_accessor :max_capacity_bytes

    # Total reserved size (in bytes) of the Storage Container (set by Admin). This also includes the replication factor of the Storage Container. The actual reserved capacity of the Storage Container will be the maximum of explicitReservedCapacity and implicitReservedCapacity.
    attr_accessor :logical_explicit_reserved_capacity_bytes

    # This is the sum of the  of reservations provisioned on all vDisks in the Storage Container. The actual reserved capacity of the Storage Container will be the maximum of explicitReservedCapacity and implicitReservedCapacity.
    attr_accessor :logical_implicit_reserved_capacity_bytes

    # Maximum capacity of the Storage Container as defined by the user.
    attr_accessor :logical_advertised_capacity_bytes

    # Replication factor of the Storage Container.
    attr_accessor :replication_factor

    # List of NFS addresses that need to be whitelisted.
    attr_accessor :nfs_whitelist_address

    # Indicates whether the NFS whitelist is inherited from the global configuration.
    attr_accessor :is_nfs_whitelist_inherited

    attr_accessor :erasure_code

    # Indicates whether data written to this Storage Container should be inline erasure-coded or not. This field is only considered if ErasureCoding is enabled.
    attr_accessor :is_inline_ec_enabled

    # Indicates whether to prefer a higher Erasure Code fault domain.
    attr_accessor :has_higher_ec_fault_domain_preference

    # Delay in performing Erasure Code for the current Storage Container instance.
    attr_accessor :erasure_code_delay_secs

    attr_accessor :cache_deduplication

    attr_accessor :on_disk_dedup

    # Indicates whether the compression is enabled for the Storage Container.
    attr_accessor :is_compression_enabled

    # The compression delay in seconds.
    attr_accessor :compression_delay_secs

    # Indicates whether the Storage Container is internal and is managed by Nutanix.
    attr_accessor :is_internal

    # Indicates whether the Storage Container instance has software encryption enabled.
    attr_accessor :is_software_encryption_enabled

    # Indicates whether the Storage Container is encrypted or not.
    attr_accessor :is_encrypted

    # Affinity host external identifier for RF-1 Storage Container.
    attr_accessor :affinity_host_ext_id

    # The corresponding name of the cluster owning the Storage Container instance.
    attr_accessor :cluster_name

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tenant_id' => :'tenantId',
        :'ext_id' => :'extId',
        :'links' => :'links',
        :'container_ext_id' => :'containerExtId',
        :'owner_ext_id' => :'ownerExtId',
        :'name' => :'name',
        :'cluster_ext_id' => :'clusterExtId',
        :'storage_pool_ext_id' => :'storagePoolExtId',
        :'is_marked_for_removal' => :'isMarkedForRemoval',
        :'marked_for_removal' => :'markedForRemoval',
        :'max_capacity_bytes' => :'maxCapacityBytes',
        :'logical_explicit_reserved_capacity_bytes' => :'logicalExplicitReservedCapacityBytes',
        :'logical_implicit_reserved_capacity_bytes' => :'logicalImplicitReservedCapacityBytes',
        :'logical_advertised_capacity_bytes' => :'logicalAdvertisedCapacityBytes',
        :'replication_factor' => :'replicationFactor',
        :'nfs_whitelist_address' => :'nfsWhitelistAddress',
        :'is_nfs_whitelist_inherited' => :'isNfsWhitelistInherited',
        :'erasure_code' => :'erasureCode',
        :'is_inline_ec_enabled' => :'isInlineEcEnabled',
        :'has_higher_ec_fault_domain_preference' => :'hasHigherEcFaultDomainPreference',
        :'erasure_code_delay_secs' => :'erasureCodeDelaySecs',
        :'cache_deduplication' => :'cacheDeduplication',
        :'on_disk_dedup' => :'onDiskDedup',
        :'is_compression_enabled' => :'isCompressionEnabled',
        :'compression_delay_secs' => :'compressionDelaySecs',
        :'is_internal' => :'isInternal',
        :'is_software_encryption_enabled' => :'isSoftwareEncryptionEnabled',
        :'is_encrypted' => :'isEncrypted',
        :'affinity_host_ext_id' => :'affinityHostExtId',
        :'cluster_name' => :'clusterName'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tenant_id' => :'String',
        :'ext_id' => :'String',
        :'links' => :'Array<CommonV10ResponseApiLink>',
        :'container_ext_id' => :'String',
        :'owner_ext_id' => :'String',
        :'name' => :'String',
        :'cluster_ext_id' => :'String',
        :'storage_pool_ext_id' => :'String',
        :'is_marked_for_removal' => :'Boolean',
        :'marked_for_removal' => :'Boolean',
        :'max_capacity_bytes' => :'Integer',
        :'logical_explicit_reserved_capacity_bytes' => :'Integer',
        :'logical_implicit_reserved_capacity_bytes' => :'Integer',
        :'logical_advertised_capacity_bytes' => :'Integer',
        :'replication_factor' => :'Integer',
        :'nfs_whitelist_address' => :'Array<CommonV10ConfigIPAddressOrFQDN>',
        :'is_nfs_whitelist_inherited' => :'Boolean',
        :'erasure_code' => :'ClustermgmtV40ConfigErasureCodeStatus',
        :'is_inline_ec_enabled' => :'Boolean',
        :'has_higher_ec_fault_domain_preference' => :'Boolean',
        :'erasure_code_delay_secs' => :'Integer',
        :'cache_deduplication' => :'ClustermgmtV40ConfigCacheDeduplication',
        :'on_disk_dedup' => :'ClustermgmtV40ConfigOnDiskDedup',
        :'is_compression_enabled' => :'Boolean',
        :'compression_delay_secs' => :'Integer',
        :'is_internal' => :'Boolean',
        :'is_software_encryption_enabled' => :'Boolean',
        :'is_encrypted' => :'Boolean',
        :'affinity_host_ext_id' => :'String',
        :'cluster_name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ext_id',
        :'is_software_encryption_enabled',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'CommonV10ResponseExternalizableAbstractModel'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixClustermgmt::ClustermgmtV40ConfigStorageContainer` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixClustermgmt::ClustermgmtV40ConfigStorageContainer`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tenant_id')
        self.tenant_id = attributes[:'tenant_id']
      end

      if attributes.key?(:'ext_id')
        self.ext_id = attributes[:'ext_id']
      end

      if attributes.key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.key?(:'container_ext_id')
        self.container_ext_id = attributes[:'container_ext_id']
      end

      if attributes.key?(:'owner_ext_id')
        self.owner_ext_id = attributes[:'owner_ext_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'cluster_ext_id')
        self.cluster_ext_id = attributes[:'cluster_ext_id']
      end

      if attributes.key?(:'storage_pool_ext_id')
        self.storage_pool_ext_id = attributes[:'storage_pool_ext_id']
      end

      if attributes.key?(:'is_marked_for_removal')
        self.is_marked_for_removal = attributes[:'is_marked_for_removal']
      end

      if attributes.key?(:'marked_for_removal')
        self.marked_for_removal = attributes[:'marked_for_removal']
      end

      if attributes.key?(:'max_capacity_bytes')
        self.max_capacity_bytes = attributes[:'max_capacity_bytes']
      end

      if attributes.key?(:'logical_explicit_reserved_capacity_bytes')
        self.logical_explicit_reserved_capacity_bytes = attributes[:'logical_explicit_reserved_capacity_bytes']
      end

      if attributes.key?(:'logical_implicit_reserved_capacity_bytes')
        self.logical_implicit_reserved_capacity_bytes = attributes[:'logical_implicit_reserved_capacity_bytes']
      end

      if attributes.key?(:'logical_advertised_capacity_bytes')
        self.logical_advertised_capacity_bytes = attributes[:'logical_advertised_capacity_bytes']
      end

      if attributes.key?(:'replication_factor')
        self.replication_factor = attributes[:'replication_factor']
      end

      if attributes.key?(:'nfs_whitelist_address')
        if (value = attributes[:'nfs_whitelist_address']).is_a?(Array)
          self.nfs_whitelist_address = value
        end
      end

      if attributes.key?(:'is_nfs_whitelist_inherited')
        self.is_nfs_whitelist_inherited = attributes[:'is_nfs_whitelist_inherited']
      end

      if attributes.key?(:'erasure_code')
        self.erasure_code = attributes[:'erasure_code']
      end

      if attributes.key?(:'is_inline_ec_enabled')
        self.is_inline_ec_enabled = attributes[:'is_inline_ec_enabled']
      end

      if attributes.key?(:'has_higher_ec_fault_domain_preference')
        self.has_higher_ec_fault_domain_preference = attributes[:'has_higher_ec_fault_domain_preference']
      end

      if attributes.key?(:'erasure_code_delay_secs')
        self.erasure_code_delay_secs = attributes[:'erasure_code_delay_secs']
      end

      if attributes.key?(:'cache_deduplication')
        self.cache_deduplication = attributes[:'cache_deduplication']
      end

      if attributes.key?(:'on_disk_dedup')
        self.on_disk_dedup = attributes[:'on_disk_dedup']
      end

      if attributes.key?(:'is_compression_enabled')
        self.is_compression_enabled = attributes[:'is_compression_enabled']
      end

      if attributes.key?(:'compression_delay_secs')
        self.compression_delay_secs = attributes[:'compression_delay_secs']
      end

      if attributes.key?(:'is_internal')
        self.is_internal = attributes[:'is_internal']
      end

      if attributes.key?(:'is_software_encryption_enabled')
        self.is_software_encryption_enabled = attributes[:'is_software_encryption_enabled']
      end

      if attributes.key?(:'is_encrypted')
        self.is_encrypted = attributes[:'is_encrypted']
      end

      if attributes.key?(:'affinity_host_ext_id')
        self.affinity_host_ext_id = attributes[:'affinity_host_ext_id']
      end

      if attributes.key?(:'cluster_name')
        self.cluster_name = attributes[:'cluster_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@tenant_id.nil? && @tenant_id !~ pattern
        invalid_properties.push("invalid value for \"tenant_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@ext_id.nil? && @ext_id !~ pattern
        invalid_properties.push("invalid value for \"ext_id\", must conform to the pattern #{pattern}.")
      end

      if !@links.nil? && @links.length > 20
        invalid_properties.push('invalid value for "links", number of items must be less than or equal to 20.')
      end

      if !@links.nil? && @links.length < 0
        invalid_properties.push('invalid value for "links", number of items must be greater than or equal to 0.')
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@container_ext_id.nil? && @container_ext_id !~ pattern
        invalid_properties.push("invalid value for \"container_ext_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@owner_ext_id.nil? && @owner_ext_id !~ pattern
        invalid_properties.push("invalid value for \"owner_ext_id\", must conform to the pattern #{pattern}.")
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 75
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 75.')
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@cluster_ext_id.nil? && @cluster_ext_id !~ pattern
        invalid_properties.push("invalid value for \"cluster_ext_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@storage_pool_ext_id.nil? && @storage_pool_ext_id !~ pattern
        invalid_properties.push("invalid value for \"storage_pool_ext_id\", must conform to the pattern #{pattern}.")
      end

      if !@nfs_whitelist_address.nil? && @nfs_whitelist_address.length > 100
        invalid_properties.push('invalid value for "nfs_whitelist_address", number of items must be less than or equal to 100.')
      end

      if !@nfs_whitelist_address.nil? && @nfs_whitelist_address.length < 0
        invalid_properties.push('invalid value for "nfs_whitelist_address", number of items must be greater than or equal to 0.')
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@affinity_host_ext_id.nil? && @affinity_host_ext_id !~ pattern
        invalid_properties.push("invalid value for \"affinity_host_ext_id\", must conform to the pattern #{pattern}.")
      end

      if !@cluster_name.nil? && @cluster_name.to_s.length > 256
        invalid_properties.push('invalid value for "cluster_name", the character length must be smaller than or equal to 256.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@tenant_id.nil? && @tenant_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@ext_id.nil? && @ext_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@links.nil? && @links.length > 20
      return false if !@links.nil? && @links.length < 0
      return false if !@container_ext_id.nil? && @container_ext_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@owner_ext_id.nil? && @owner_ext_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if @name.nil?
      return false if @name.to_s.length > 75
      return false if !@cluster_ext_id.nil? && @cluster_ext_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@storage_pool_ext_id.nil? && @storage_pool_ext_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@nfs_whitelist_address.nil? && @nfs_whitelist_address.length > 100
      return false if !@nfs_whitelist_address.nil? && @nfs_whitelist_address.length < 0
      return false if !@affinity_host_ext_id.nil? && @affinity_host_ext_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@cluster_name.nil? && @cluster_name.to_s.length > 256
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] tenant_id Value to be assigned
    def tenant_id=(tenant_id)
      if tenant_id.nil?
        fail ArgumentError, 'tenant_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if tenant_id !~ pattern
        fail ArgumentError, "invalid value for \"tenant_id\", must conform to the pattern #{pattern}."
      end

      @tenant_id = tenant_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ext_id Value to be assigned
    def ext_id=(ext_id)
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !ext_id.nil? && ext_id !~ pattern
        fail ArgumentError, "invalid value for \"ext_id\", must conform to the pattern #{pattern}."
      end

      @ext_id = ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] links Value to be assigned
    def links=(links)
      if links.nil?
        fail ArgumentError, 'links cannot be nil'
      end

      if links.length > 20
        fail ArgumentError, 'invalid value for "links", number of items must be less than or equal to 20.'
      end

      if links.length < 0
        fail ArgumentError, 'invalid value for "links", number of items must be greater than or equal to 0.'
      end

      @links = links
    end

    # Custom attribute writer method with validation
    # @param [Object] container_ext_id Value to be assigned
    def container_ext_id=(container_ext_id)
      if container_ext_id.nil?
        fail ArgumentError, 'container_ext_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if container_ext_id !~ pattern
        fail ArgumentError, "invalid value for \"container_ext_id\", must conform to the pattern #{pattern}."
      end

      @container_ext_id = container_ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] owner_ext_id Value to be assigned
    def owner_ext_id=(owner_ext_id)
      if owner_ext_id.nil?
        fail ArgumentError, 'owner_ext_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if owner_ext_id !~ pattern
        fail ArgumentError, "invalid value for \"owner_ext_id\", must conform to the pattern #{pattern}."
      end

      @owner_ext_id = owner_ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 75
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 75.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] cluster_ext_id Value to be assigned
    def cluster_ext_id=(cluster_ext_id)
      if cluster_ext_id.nil?
        fail ArgumentError, 'cluster_ext_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for \"cluster_ext_id\", must conform to the pattern #{pattern}."
      end

      @cluster_ext_id = cluster_ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] storage_pool_ext_id Value to be assigned
    def storage_pool_ext_id=(storage_pool_ext_id)
      if storage_pool_ext_id.nil?
        fail ArgumentError, 'storage_pool_ext_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if storage_pool_ext_id !~ pattern
        fail ArgumentError, "invalid value for \"storage_pool_ext_id\", must conform to the pattern #{pattern}."
      end

      @storage_pool_ext_id = storage_pool_ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] nfs_whitelist_address Value to be assigned
    def nfs_whitelist_address=(nfs_whitelist_address)
      if nfs_whitelist_address.nil?
        fail ArgumentError, 'nfs_whitelist_address cannot be nil'
      end

      if nfs_whitelist_address.length > 100
        fail ArgumentError, 'invalid value for "nfs_whitelist_address", number of items must be less than or equal to 100.'
      end

      if nfs_whitelist_address.length < 0
        fail ArgumentError, 'invalid value for "nfs_whitelist_address", number of items must be greater than or equal to 0.'
      end

      @nfs_whitelist_address = nfs_whitelist_address
    end

    # Custom attribute writer method with validation
    # @param [Object] affinity_host_ext_id Value to be assigned
    def affinity_host_ext_id=(affinity_host_ext_id)
      if affinity_host_ext_id.nil?
        fail ArgumentError, 'affinity_host_ext_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if affinity_host_ext_id !~ pattern
        fail ArgumentError, "invalid value for \"affinity_host_ext_id\", must conform to the pattern #{pattern}."
      end

      @affinity_host_ext_id = affinity_host_ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] cluster_name Value to be assigned
    def cluster_name=(cluster_name)
      if cluster_name.nil?
        fail ArgumentError, 'cluster_name cannot be nil'
      end

      if cluster_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "cluster_name", the character length must be smaller than or equal to 256.'
      end

      @cluster_name = cluster_name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tenant_id == o.tenant_id &&
          ext_id == o.ext_id &&
          links == o.links &&
          container_ext_id == o.container_ext_id &&
          owner_ext_id == o.owner_ext_id &&
          name == o.name &&
          cluster_ext_id == o.cluster_ext_id &&
          storage_pool_ext_id == o.storage_pool_ext_id &&
          is_marked_for_removal == o.is_marked_for_removal &&
          marked_for_removal == o.marked_for_removal &&
          max_capacity_bytes == o.max_capacity_bytes &&
          logical_explicit_reserved_capacity_bytes == o.logical_explicit_reserved_capacity_bytes &&
          logical_implicit_reserved_capacity_bytes == o.logical_implicit_reserved_capacity_bytes &&
          logical_advertised_capacity_bytes == o.logical_advertised_capacity_bytes &&
          replication_factor == o.replication_factor &&
          nfs_whitelist_address == o.nfs_whitelist_address &&
          is_nfs_whitelist_inherited == o.is_nfs_whitelist_inherited &&
          erasure_code == o.erasure_code &&
          is_inline_ec_enabled == o.is_inline_ec_enabled &&
          has_higher_ec_fault_domain_preference == o.has_higher_ec_fault_domain_preference &&
          erasure_code_delay_secs == o.erasure_code_delay_secs &&
          cache_deduplication == o.cache_deduplication &&
          on_disk_dedup == o.on_disk_dedup &&
          is_compression_enabled == o.is_compression_enabled &&
          compression_delay_secs == o.compression_delay_secs &&
          is_internal == o.is_internal &&
          is_software_encryption_enabled == o.is_software_encryption_enabled &&
          is_encrypted == o.is_encrypted &&
          affinity_host_ext_id == o.affinity_host_ext_id &&
          cluster_name == o.cluster_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tenant_id, ext_id, links, container_ext_id, owner_ext_id, name, cluster_ext_id, storage_pool_ext_id, is_marked_for_removal, marked_for_removal, max_capacity_bytes, logical_explicit_reserved_capacity_bytes, logical_implicit_reserved_capacity_bytes, logical_advertised_capacity_bytes, replication_factor, nfs_whitelist_address, is_nfs_whitelist_inherited, erasure_code, is_inline_ec_enabled, has_higher_ec_fault_domain_preference, erasure_code_delay_secs, cache_deduplication, on_disk_dedup, is_compression_enabled, compression_delay_secs, is_internal, is_software_encryption_enabled, is_encrypted, affinity_host_ext_id, cluster_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixClustermgmt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
