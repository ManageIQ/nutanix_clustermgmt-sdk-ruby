=begin
#Nutanix Cluster Management APIs

#Manage Hosts, Clusters and other Infrastructure.

The version of the OpenAPI document: 4.0.2

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module NutanixClustermgmt
  # Node specific details required to fetch node networking information.
  class ClustermgmtV40ConfigNodeListNetworkingDetails
    # UUID of the host.
    attr_accessor :node_uuid

    # Rackable unit Id in which node resides.
    attr_accessor :block_id

    # Position of a node in a rackable unit.
    attr_accessor :node_position

    attr_accessor :cvm_ip

    attr_accessor :hypervisor_ip

    attr_accessor :ipmi_ip

    # List of objects containing digital_certificate_base64 and key_management_server_uuid fields for key management server.
    attr_accessor :digital_certificate_map_list

    # Rackable unit model name.
    attr_accessor :model

    # Indicates whether the node is compute only or not.
    attr_accessor :is_compute_only

    # Indicates whether the node is light compute or not.
    attr_accessor :is_light_compute

    attr_accessor :hypervisor_type

    # Host version of the node.
    attr_accessor :hypervisor_version

    # NOS software version of a node.
    attr_accessor :nos_version

    # Current network interface of a node.
    attr_accessor :current_network_interface

    # Indicates whether the hypervisor is robo mixed or not.
    attr_accessor :is_robo_mixed_hypervisor

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'node_uuid' => :'nodeUuid',
        :'block_id' => :'blockId',
        :'node_position' => :'nodePosition',
        :'cvm_ip' => :'cvmIp',
        :'hypervisor_ip' => :'hypervisorIp',
        :'ipmi_ip' => :'ipmiIp',
        :'digital_certificate_map_list' => :'digitalCertificateMapList',
        :'model' => :'model',
        :'is_compute_only' => :'isComputeOnly',
        :'is_light_compute' => :'isLightCompute',
        :'hypervisor_type' => :'hypervisorType',
        :'hypervisor_version' => :'hypervisorVersion',
        :'nos_version' => :'nosVersion',
        :'current_network_interface' => :'currentNetworkInterface',
        :'is_robo_mixed_hypervisor' => :'isRoboMixedHypervisor'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'node_uuid' => :'String',
        :'block_id' => :'String',
        :'node_position' => :'String',
        :'cvm_ip' => :'CommonV10ConfigIPAddress',
        :'hypervisor_ip' => :'CommonV10ConfigIPAddress',
        :'ipmi_ip' => :'CommonV10ConfigIPAddress',
        :'digital_certificate_map_list' => :'Array<ClustermgmtV40ConfigDigitalCertificateMapReference>',
        :'model' => :'String',
        :'is_compute_only' => :'Boolean',
        :'is_light_compute' => :'Boolean',
        :'hypervisor_type' => :'ClustermgmtV40ConfigHypervisorType',
        :'hypervisor_version' => :'String',
        :'nos_version' => :'String',
        :'current_network_interface' => :'String',
        :'is_robo_mixed_hypervisor' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixClustermgmt::ClustermgmtV40ConfigNodeListNetworkingDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixClustermgmt::ClustermgmtV40ConfigNodeListNetworkingDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'node_uuid')
        self.node_uuid = attributes[:'node_uuid']
      end

      if attributes.key?(:'block_id')
        self.block_id = attributes[:'block_id']
      end

      if attributes.key?(:'node_position')
        self.node_position = attributes[:'node_position']
      end

      if attributes.key?(:'cvm_ip')
        self.cvm_ip = attributes[:'cvm_ip']
      end

      if attributes.key?(:'hypervisor_ip')
        self.hypervisor_ip = attributes[:'hypervisor_ip']
      end

      if attributes.key?(:'ipmi_ip')
        self.ipmi_ip = attributes[:'ipmi_ip']
      end

      if attributes.key?(:'digital_certificate_map_list')
        if (value = attributes[:'digital_certificate_map_list']).is_a?(Array)
          self.digital_certificate_map_list = value
        end
      end

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.key?(:'is_compute_only')
        self.is_compute_only = attributes[:'is_compute_only']
      end

      if attributes.key?(:'is_light_compute')
        self.is_light_compute = attributes[:'is_light_compute']
      end

      if attributes.key?(:'hypervisor_type')
        self.hypervisor_type = attributes[:'hypervisor_type']
      end

      if attributes.key?(:'hypervisor_version')
        self.hypervisor_version = attributes[:'hypervisor_version']
      end

      if attributes.key?(:'nos_version')
        self.nos_version = attributes[:'nos_version']
      end

      if attributes.key?(:'current_network_interface')
        self.current_network_interface = attributes[:'current_network_interface']
      end

      if attributes.key?(:'is_robo_mixed_hypervisor')
        self.is_robo_mixed_hypervisor = attributes[:'is_robo_mixed_hypervisor']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@node_uuid.nil? && @node_uuid !~ pattern
        invalid_properties.push("invalid value for \"node_uuid\", must conform to the pattern #{pattern}.")
      end

      if !@digital_certificate_map_list.nil? && @digital_certificate_map_list.length > 1024
        invalid_properties.push('invalid value for "digital_certificate_map_list", number of items must be less than or equal to 1024.')
      end

      if !@digital_certificate_map_list.nil? && @digital_certificate_map_list.length < 0
        invalid_properties.push('invalid value for "digital_certificate_map_list", number of items must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@node_uuid.nil? && @node_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@digital_certificate_map_list.nil? && @digital_certificate_map_list.length > 1024
      return false if !@digital_certificate_map_list.nil? && @digital_certificate_map_list.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] node_uuid Value to be assigned
    def node_uuid=(node_uuid)
      if node_uuid.nil?
        fail ArgumentError, 'node_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if node_uuid !~ pattern
        fail ArgumentError, "invalid value for \"node_uuid\", must conform to the pattern #{pattern}."
      end

      @node_uuid = node_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] digital_certificate_map_list Value to be assigned
    def digital_certificate_map_list=(digital_certificate_map_list)
      if digital_certificate_map_list.nil?
        fail ArgumentError, 'digital_certificate_map_list cannot be nil'
      end

      if digital_certificate_map_list.length > 1024
        fail ArgumentError, 'invalid value for "digital_certificate_map_list", number of items must be less than or equal to 1024.'
      end

      if digital_certificate_map_list.length < 0
        fail ArgumentError, 'invalid value for "digital_certificate_map_list", number of items must be greater than or equal to 0.'
      end

      @digital_certificate_map_list = digital_certificate_map_list
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          node_uuid == o.node_uuid &&
          block_id == o.block_id &&
          node_position == o.node_position &&
          cvm_ip == o.cvm_ip &&
          hypervisor_ip == o.hypervisor_ip &&
          ipmi_ip == o.ipmi_ip &&
          digital_certificate_map_list == o.digital_certificate_map_list &&
          model == o.model &&
          is_compute_only == o.is_compute_only &&
          is_light_compute == o.is_light_compute &&
          hypervisor_type == o.hypervisor_type &&
          hypervisor_version == o.hypervisor_version &&
          nos_version == o.nos_version &&
          current_network_interface == o.current_network_interface &&
          is_robo_mixed_hypervisor == o.is_robo_mixed_hypervisor
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [node_uuid, block_id, node_position, cvm_ip, hypervisor_ip, ipmi_ip, digital_certificate_map_list, model, is_compute_only, is_light_compute, hypervisor_type, hypervisor_version, nos_version, current_network_interface, is_robo_mixed_hypervisor].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixClustermgmt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
