=begin
#Nutanix Cluster Management APIs

#Manage Hosts, Clusters and other Infrastructure.

The version of the OpenAPI document: 4.0.2

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module NutanixClustermgmt
  class ClustermgmtV40StatsDiskStats
    # A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    attr_accessor :tenant_id

    # A globally unique identifier of an instance that is suitable for external consumption. 
    attr_accessor :ext_id

    # A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    attr_accessor :links

    # Disk space used on a storage device, expressed in parts per million (ppm).
    attr_accessor :disk_usage_ppm

    # Total storage capacity of a device in bytes.
    attr_accessor :disk_capacity_bytes

    # Number of I/O operations that a Disk performs per second.
    attr_accessor :disk_num_iops

    # Upper limit of I/O operations that a Disk performs per second.
    attr_accessor :disk_peak_num_iops

    # Lower limit of I/O operations that a Disk can perform per second.
    attr_accessor :disk_base_num_iops

    # I/O bandwidth in KB per second.
    attr_accessor :disk_io_bandwidthkbps

    # Upper limit of data transfer that a Disk can handle per second.
    attr_accessor :disk_peak_io_bandwidthkbps

    # Lower limit of data transfer that a Disk can handle per second.
    attr_accessor :disk_base_io_bandwidthkbps

    # Average I/O latency.
    attr_accessor :disk_avg_io_latency_microsec

    # Upper limit of the latency of I/O operations that the Disk can handle without exceeding its standard latency level.
    attr_accessor :disk_peak_io_latency_microsec

    # Lower limit of the latency of I/O operations that the Disk can handle without exceeding its standard latency level.
    attr_accessor :disk_base_io_latency_microsec

    # Free storage space available on the Disk, measured in bytes.
    attr_accessor :disk_free_bytes

    # Amount of storage currently being used, measured in bytes.
    attr_accessor :disk_usage_bytes

    # Number of read I/O per second.
    attr_accessor :disk_read_iops

    # Lower buffer capacity for the number of read IOPS that a Disk can handle.
    attr_accessor :disk_base_read_iops

    # Upper buffer capacity for the number of read IOPS that a Disk can handle.
    attr_accessor :disk_peak_read_iops

    # Number of write I/O per second.
    attr_accessor :disk_write_iops

    # Upper buffer capacity of a number of write I/O per second.
    attr_accessor :disk_peak_write_iops

    # Lower buffer capacity of a number of write I/O per second.
    attr_accessor :disk_base_write_iops

    # Number of Disk read I/O per second as reported by Stargate.
    attr_accessor :disk_read_io_bandwidthkbps

    # Upper buffer capacity for the amount of I/O bandwidth that a Disk can handle read operations.
    attr_accessor :disk_peak_read_io_bandwidthkbps

    # Lower buffer capacity for the amount of I/O bandwidth that a Disk can handle read operations.
    attr_accessor :disk_base_read_io_bandwidthkbps

    # Number of Disk write I/O per second reported by Stargate.
    attr_accessor :disk_write_io_bandwidthkbps

    # Upper buffer capacity for the amount of I/O bandwidth that a Disk can handle write operations.
    attr_accessor :disk_peak_write_io_bandwidthkbps

    # Lower buffer capacity for the amount of I/O bandwidth that a Disk can handle write operations.
    attr_accessor :disk_base_write_io_bandwidthkbps

    # Average read I/O latency, measured in microseconds (μs).
    attr_accessor :disk_read_io_avg_latency_microsec

    # Upper buffer capacity average read I/O latency, measured in microseconds (μs).
    attr_accessor :disk_peak_read_io_avg_latency_microsec

    # Lower buffer capacity average read I/O latency, measured in microseconds (μs).
    attr_accessor :disk_base_read_io_avg_latency_microsec

    # Average write I/O latency, measured in microseconds (μs).
    attr_accessor :disk_write_io_avg_latency_microsec

    # Upper buffer capacity average write I/O latency, measured in microseconds (μs).
    attr_accessor :disk_peak_write_io_avg_latency_microsec

    # Lower buffer capacity average write I/O latency, measured in microseconds (μs).
    attr_accessor :disk_base_write_io_avg_latency_microsec

    # Disk read I/O, expressed in parts per million.
    attr_accessor :disk_read_io_ppm

    # Disk write I/O, expressed in parts per million.
    attr_accessor :disk_write_io_ppm

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tenant_id' => :'tenantId',
        :'ext_id' => :'extId',
        :'links' => :'links',
        :'disk_usage_ppm' => :'diskUsagePpm',
        :'disk_capacity_bytes' => :'diskCapacityBytes',
        :'disk_num_iops' => :'diskNumIops',
        :'disk_peak_num_iops' => :'diskPeakNumIops',
        :'disk_base_num_iops' => :'diskBaseNumIops',
        :'disk_io_bandwidthkbps' => :'diskIoBandwidthkbps',
        :'disk_peak_io_bandwidthkbps' => :'diskPeakIoBandwidthkbps',
        :'disk_base_io_bandwidthkbps' => :'diskBaseIoBandwidthkbps',
        :'disk_avg_io_latency_microsec' => :'diskAvgIoLatencyMicrosec',
        :'disk_peak_io_latency_microsec' => :'diskPeakIoLatencyMicrosec',
        :'disk_base_io_latency_microsec' => :'diskBaseIoLatencyMicrosec',
        :'disk_free_bytes' => :'diskFreeBytes',
        :'disk_usage_bytes' => :'diskUsageBytes',
        :'disk_read_iops' => :'diskReadIops',
        :'disk_base_read_iops' => :'diskBaseReadIops',
        :'disk_peak_read_iops' => :'diskPeakReadIops',
        :'disk_write_iops' => :'diskWriteIops',
        :'disk_peak_write_iops' => :'diskPeakWriteIops',
        :'disk_base_write_iops' => :'diskBaseWriteIops',
        :'disk_read_io_bandwidthkbps' => :'diskReadIoBandwidthkbps',
        :'disk_peak_read_io_bandwidthkbps' => :'diskPeakReadIoBandwidthkbps',
        :'disk_base_read_io_bandwidthkbps' => :'diskBaseReadIoBandwidthkbps',
        :'disk_write_io_bandwidthkbps' => :'diskWriteIoBandwidthkbps',
        :'disk_peak_write_io_bandwidthkbps' => :'diskPeakWriteIoBandwidthkbps',
        :'disk_base_write_io_bandwidthkbps' => :'diskBaseWriteIoBandwidthkbps',
        :'disk_read_io_avg_latency_microsec' => :'diskReadIoAvgLatencyMicrosec',
        :'disk_peak_read_io_avg_latency_microsec' => :'diskPeakReadIoAvgLatencyMicrosec',
        :'disk_base_read_io_avg_latency_microsec' => :'diskBaseReadIoAvgLatencyMicrosec',
        :'disk_write_io_avg_latency_microsec' => :'diskWriteIoAvgLatencyMicrosec',
        :'disk_peak_write_io_avg_latency_microsec' => :'diskPeakWriteIoAvgLatencyMicrosec',
        :'disk_base_write_io_avg_latency_microsec' => :'diskBaseWriteIoAvgLatencyMicrosec',
        :'disk_read_io_ppm' => :'diskReadIoPpm',
        :'disk_write_io_ppm' => :'diskWriteIoPpm'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tenant_id' => :'String',
        :'ext_id' => :'String',
        :'links' => :'Array<CommonV10ResponseApiLink>',
        :'disk_usage_ppm' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_capacity_bytes' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_num_iops' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_peak_num_iops' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_base_num_iops' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_io_bandwidthkbps' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_peak_io_bandwidthkbps' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_base_io_bandwidthkbps' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_avg_io_latency_microsec' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_peak_io_latency_microsec' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_base_io_latency_microsec' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_free_bytes' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_usage_bytes' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_read_iops' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_base_read_iops' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_peak_read_iops' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_write_iops' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_peak_write_iops' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_base_write_iops' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_read_io_bandwidthkbps' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_peak_read_io_bandwidthkbps' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_base_read_io_bandwidthkbps' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_write_io_bandwidthkbps' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_peak_write_io_bandwidthkbps' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_base_write_io_bandwidthkbps' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_read_io_avg_latency_microsec' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_peak_read_io_avg_latency_microsec' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_base_read_io_avg_latency_microsec' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_write_io_avg_latency_microsec' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_peak_write_io_avg_latency_microsec' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_base_write_io_avg_latency_microsec' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_read_io_ppm' => :'Array<CommonV10StatsTimeIntValuePair>',
        :'disk_write_io_ppm' => :'Array<CommonV10StatsTimeIntValuePair>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ext_id',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'CommonV10ResponseExternalizableAbstractModel'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixClustermgmt::ClustermgmtV40StatsDiskStats` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixClustermgmt::ClustermgmtV40StatsDiskStats`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tenant_id')
        self.tenant_id = attributes[:'tenant_id']
      end

      if attributes.key?(:'ext_id')
        self.ext_id = attributes[:'ext_id']
      end

      if attributes.key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.key?(:'disk_usage_ppm')
        if (value = attributes[:'disk_usage_ppm']).is_a?(Array)
          self.disk_usage_ppm = value
        end
      end

      if attributes.key?(:'disk_capacity_bytes')
        if (value = attributes[:'disk_capacity_bytes']).is_a?(Array)
          self.disk_capacity_bytes = value
        end
      end

      if attributes.key?(:'disk_num_iops')
        if (value = attributes[:'disk_num_iops']).is_a?(Array)
          self.disk_num_iops = value
        end
      end

      if attributes.key?(:'disk_peak_num_iops')
        if (value = attributes[:'disk_peak_num_iops']).is_a?(Array)
          self.disk_peak_num_iops = value
        end
      end

      if attributes.key?(:'disk_base_num_iops')
        if (value = attributes[:'disk_base_num_iops']).is_a?(Array)
          self.disk_base_num_iops = value
        end
      end

      if attributes.key?(:'disk_io_bandwidthkbps')
        if (value = attributes[:'disk_io_bandwidthkbps']).is_a?(Array)
          self.disk_io_bandwidthkbps = value
        end
      end

      if attributes.key?(:'disk_peak_io_bandwidthkbps')
        if (value = attributes[:'disk_peak_io_bandwidthkbps']).is_a?(Array)
          self.disk_peak_io_bandwidthkbps = value
        end
      end

      if attributes.key?(:'disk_base_io_bandwidthkbps')
        if (value = attributes[:'disk_base_io_bandwidthkbps']).is_a?(Array)
          self.disk_base_io_bandwidthkbps = value
        end
      end

      if attributes.key?(:'disk_avg_io_latency_microsec')
        if (value = attributes[:'disk_avg_io_latency_microsec']).is_a?(Array)
          self.disk_avg_io_latency_microsec = value
        end
      end

      if attributes.key?(:'disk_peak_io_latency_microsec')
        if (value = attributes[:'disk_peak_io_latency_microsec']).is_a?(Array)
          self.disk_peak_io_latency_microsec = value
        end
      end

      if attributes.key?(:'disk_base_io_latency_microsec')
        if (value = attributes[:'disk_base_io_latency_microsec']).is_a?(Array)
          self.disk_base_io_latency_microsec = value
        end
      end

      if attributes.key?(:'disk_free_bytes')
        if (value = attributes[:'disk_free_bytes']).is_a?(Array)
          self.disk_free_bytes = value
        end
      end

      if attributes.key?(:'disk_usage_bytes')
        if (value = attributes[:'disk_usage_bytes']).is_a?(Array)
          self.disk_usage_bytes = value
        end
      end

      if attributes.key?(:'disk_read_iops')
        if (value = attributes[:'disk_read_iops']).is_a?(Array)
          self.disk_read_iops = value
        end
      end

      if attributes.key?(:'disk_base_read_iops')
        if (value = attributes[:'disk_base_read_iops']).is_a?(Array)
          self.disk_base_read_iops = value
        end
      end

      if attributes.key?(:'disk_peak_read_iops')
        if (value = attributes[:'disk_peak_read_iops']).is_a?(Array)
          self.disk_peak_read_iops = value
        end
      end

      if attributes.key?(:'disk_write_iops')
        if (value = attributes[:'disk_write_iops']).is_a?(Array)
          self.disk_write_iops = value
        end
      end

      if attributes.key?(:'disk_peak_write_iops')
        if (value = attributes[:'disk_peak_write_iops']).is_a?(Array)
          self.disk_peak_write_iops = value
        end
      end

      if attributes.key?(:'disk_base_write_iops')
        if (value = attributes[:'disk_base_write_iops']).is_a?(Array)
          self.disk_base_write_iops = value
        end
      end

      if attributes.key?(:'disk_read_io_bandwidthkbps')
        if (value = attributes[:'disk_read_io_bandwidthkbps']).is_a?(Array)
          self.disk_read_io_bandwidthkbps = value
        end
      end

      if attributes.key?(:'disk_peak_read_io_bandwidthkbps')
        if (value = attributes[:'disk_peak_read_io_bandwidthkbps']).is_a?(Array)
          self.disk_peak_read_io_bandwidthkbps = value
        end
      end

      if attributes.key?(:'disk_base_read_io_bandwidthkbps')
        if (value = attributes[:'disk_base_read_io_bandwidthkbps']).is_a?(Array)
          self.disk_base_read_io_bandwidthkbps = value
        end
      end

      if attributes.key?(:'disk_write_io_bandwidthkbps')
        if (value = attributes[:'disk_write_io_bandwidthkbps']).is_a?(Array)
          self.disk_write_io_bandwidthkbps = value
        end
      end

      if attributes.key?(:'disk_peak_write_io_bandwidthkbps')
        if (value = attributes[:'disk_peak_write_io_bandwidthkbps']).is_a?(Array)
          self.disk_peak_write_io_bandwidthkbps = value
        end
      end

      if attributes.key?(:'disk_base_write_io_bandwidthkbps')
        if (value = attributes[:'disk_base_write_io_bandwidthkbps']).is_a?(Array)
          self.disk_base_write_io_bandwidthkbps = value
        end
      end

      if attributes.key?(:'disk_read_io_avg_latency_microsec')
        if (value = attributes[:'disk_read_io_avg_latency_microsec']).is_a?(Array)
          self.disk_read_io_avg_latency_microsec = value
        end
      end

      if attributes.key?(:'disk_peak_read_io_avg_latency_microsec')
        if (value = attributes[:'disk_peak_read_io_avg_latency_microsec']).is_a?(Array)
          self.disk_peak_read_io_avg_latency_microsec = value
        end
      end

      if attributes.key?(:'disk_base_read_io_avg_latency_microsec')
        if (value = attributes[:'disk_base_read_io_avg_latency_microsec']).is_a?(Array)
          self.disk_base_read_io_avg_latency_microsec = value
        end
      end

      if attributes.key?(:'disk_write_io_avg_latency_microsec')
        if (value = attributes[:'disk_write_io_avg_latency_microsec']).is_a?(Array)
          self.disk_write_io_avg_latency_microsec = value
        end
      end

      if attributes.key?(:'disk_peak_write_io_avg_latency_microsec')
        if (value = attributes[:'disk_peak_write_io_avg_latency_microsec']).is_a?(Array)
          self.disk_peak_write_io_avg_latency_microsec = value
        end
      end

      if attributes.key?(:'disk_base_write_io_avg_latency_microsec')
        if (value = attributes[:'disk_base_write_io_avg_latency_microsec']).is_a?(Array)
          self.disk_base_write_io_avg_latency_microsec = value
        end
      end

      if attributes.key?(:'disk_read_io_ppm')
        if (value = attributes[:'disk_read_io_ppm']).is_a?(Array)
          self.disk_read_io_ppm = value
        end
      end

      if attributes.key?(:'disk_write_io_ppm')
        if (value = attributes[:'disk_write_io_ppm']).is_a?(Array)
          self.disk_write_io_ppm = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@tenant_id.nil? && @tenant_id !~ pattern
        invalid_properties.push("invalid value for \"tenant_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@ext_id.nil? && @ext_id !~ pattern
        invalid_properties.push("invalid value for \"ext_id\", must conform to the pattern #{pattern}.")
      end

      if !@links.nil? && @links.length > 20
        invalid_properties.push('invalid value for "links", number of items must be less than or equal to 20.')
      end

      if !@links.nil? && @links.length < 0
        invalid_properties.push('invalid value for "links", number of items must be greater than or equal to 0.')
      end

      if !@disk_usage_ppm.nil? && @disk_usage_ppm.length > 3000
        invalid_properties.push('invalid value for "disk_usage_ppm", number of items must be less than or equal to 3000.')
      end

      if !@disk_usage_ppm.nil? && @disk_usage_ppm.length < 0
        invalid_properties.push('invalid value for "disk_usage_ppm", number of items must be greater than or equal to 0.')
      end

      if !@disk_capacity_bytes.nil? && @disk_capacity_bytes.length > 3000
        invalid_properties.push('invalid value for "disk_capacity_bytes", number of items must be less than or equal to 3000.')
      end

      if !@disk_capacity_bytes.nil? && @disk_capacity_bytes.length < 0
        invalid_properties.push('invalid value for "disk_capacity_bytes", number of items must be greater than or equal to 0.')
      end

      if !@disk_num_iops.nil? && @disk_num_iops.length > 3000
        invalid_properties.push('invalid value for "disk_num_iops", number of items must be less than or equal to 3000.')
      end

      if !@disk_num_iops.nil? && @disk_num_iops.length < 0
        invalid_properties.push('invalid value for "disk_num_iops", number of items must be greater than or equal to 0.')
      end

      if !@disk_peak_num_iops.nil? && @disk_peak_num_iops.length > 3000
        invalid_properties.push('invalid value for "disk_peak_num_iops", number of items must be less than or equal to 3000.')
      end

      if !@disk_peak_num_iops.nil? && @disk_peak_num_iops.length < 0
        invalid_properties.push('invalid value for "disk_peak_num_iops", number of items must be greater than or equal to 0.')
      end

      if !@disk_base_num_iops.nil? && @disk_base_num_iops.length > 3000
        invalid_properties.push('invalid value for "disk_base_num_iops", number of items must be less than or equal to 3000.')
      end

      if !@disk_base_num_iops.nil? && @disk_base_num_iops.length < 0
        invalid_properties.push('invalid value for "disk_base_num_iops", number of items must be greater than or equal to 0.')
      end

      if !@disk_io_bandwidthkbps.nil? && @disk_io_bandwidthkbps.length > 3000
        invalid_properties.push('invalid value for "disk_io_bandwidthkbps", number of items must be less than or equal to 3000.')
      end

      if !@disk_io_bandwidthkbps.nil? && @disk_io_bandwidthkbps.length < 0
        invalid_properties.push('invalid value for "disk_io_bandwidthkbps", number of items must be greater than or equal to 0.')
      end

      if !@disk_peak_io_bandwidthkbps.nil? && @disk_peak_io_bandwidthkbps.length > 3000
        invalid_properties.push('invalid value for "disk_peak_io_bandwidthkbps", number of items must be less than or equal to 3000.')
      end

      if !@disk_peak_io_bandwidthkbps.nil? && @disk_peak_io_bandwidthkbps.length < 0
        invalid_properties.push('invalid value for "disk_peak_io_bandwidthkbps", number of items must be greater than or equal to 0.')
      end

      if !@disk_base_io_bandwidthkbps.nil? && @disk_base_io_bandwidthkbps.length > 3000
        invalid_properties.push('invalid value for "disk_base_io_bandwidthkbps", number of items must be less than or equal to 3000.')
      end

      if !@disk_base_io_bandwidthkbps.nil? && @disk_base_io_bandwidthkbps.length < 0
        invalid_properties.push('invalid value for "disk_base_io_bandwidthkbps", number of items must be greater than or equal to 0.')
      end

      if !@disk_avg_io_latency_microsec.nil? && @disk_avg_io_latency_microsec.length > 3000
        invalid_properties.push('invalid value for "disk_avg_io_latency_microsec", number of items must be less than or equal to 3000.')
      end

      if !@disk_avg_io_latency_microsec.nil? && @disk_avg_io_latency_microsec.length < 0
        invalid_properties.push('invalid value for "disk_avg_io_latency_microsec", number of items must be greater than or equal to 0.')
      end

      if !@disk_peak_io_latency_microsec.nil? && @disk_peak_io_latency_microsec.length > 3000
        invalid_properties.push('invalid value for "disk_peak_io_latency_microsec", number of items must be less than or equal to 3000.')
      end

      if !@disk_peak_io_latency_microsec.nil? && @disk_peak_io_latency_microsec.length < 0
        invalid_properties.push('invalid value for "disk_peak_io_latency_microsec", number of items must be greater than or equal to 0.')
      end

      if !@disk_base_io_latency_microsec.nil? && @disk_base_io_latency_microsec.length > 3000
        invalid_properties.push('invalid value for "disk_base_io_latency_microsec", number of items must be less than or equal to 3000.')
      end

      if !@disk_base_io_latency_microsec.nil? && @disk_base_io_latency_microsec.length < 0
        invalid_properties.push('invalid value for "disk_base_io_latency_microsec", number of items must be greater than or equal to 0.')
      end

      if !@disk_free_bytes.nil? && @disk_free_bytes.length > 3000
        invalid_properties.push('invalid value for "disk_free_bytes", number of items must be less than or equal to 3000.')
      end

      if !@disk_free_bytes.nil? && @disk_free_bytes.length < 0
        invalid_properties.push('invalid value for "disk_free_bytes", number of items must be greater than or equal to 0.')
      end

      if !@disk_usage_bytes.nil? && @disk_usage_bytes.length > 3000
        invalid_properties.push('invalid value for "disk_usage_bytes", number of items must be less than or equal to 3000.')
      end

      if !@disk_usage_bytes.nil? && @disk_usage_bytes.length < 0
        invalid_properties.push('invalid value for "disk_usage_bytes", number of items must be greater than or equal to 0.')
      end

      if !@disk_read_iops.nil? && @disk_read_iops.length > 3000
        invalid_properties.push('invalid value for "disk_read_iops", number of items must be less than or equal to 3000.')
      end

      if !@disk_read_iops.nil? && @disk_read_iops.length < 0
        invalid_properties.push('invalid value for "disk_read_iops", number of items must be greater than or equal to 0.')
      end

      if !@disk_base_read_iops.nil? && @disk_base_read_iops.length > 3000
        invalid_properties.push('invalid value for "disk_base_read_iops", number of items must be less than or equal to 3000.')
      end

      if !@disk_base_read_iops.nil? && @disk_base_read_iops.length < 0
        invalid_properties.push('invalid value for "disk_base_read_iops", number of items must be greater than or equal to 0.')
      end

      if !@disk_peak_read_iops.nil? && @disk_peak_read_iops.length > 3000
        invalid_properties.push('invalid value for "disk_peak_read_iops", number of items must be less than or equal to 3000.')
      end

      if !@disk_peak_read_iops.nil? && @disk_peak_read_iops.length < 0
        invalid_properties.push('invalid value for "disk_peak_read_iops", number of items must be greater than or equal to 0.')
      end

      if !@disk_write_iops.nil? && @disk_write_iops.length > 3000
        invalid_properties.push('invalid value for "disk_write_iops", number of items must be less than or equal to 3000.')
      end

      if !@disk_write_iops.nil? && @disk_write_iops.length < 0
        invalid_properties.push('invalid value for "disk_write_iops", number of items must be greater than or equal to 0.')
      end

      if !@disk_peak_write_iops.nil? && @disk_peak_write_iops.length > 3000
        invalid_properties.push('invalid value for "disk_peak_write_iops", number of items must be less than or equal to 3000.')
      end

      if !@disk_peak_write_iops.nil? && @disk_peak_write_iops.length < 0
        invalid_properties.push('invalid value for "disk_peak_write_iops", number of items must be greater than or equal to 0.')
      end

      if !@disk_base_write_iops.nil? && @disk_base_write_iops.length > 3000
        invalid_properties.push('invalid value for "disk_base_write_iops", number of items must be less than or equal to 3000.')
      end

      if !@disk_base_write_iops.nil? && @disk_base_write_iops.length < 0
        invalid_properties.push('invalid value for "disk_base_write_iops", number of items must be greater than or equal to 0.')
      end

      if !@disk_read_io_bandwidthkbps.nil? && @disk_read_io_bandwidthkbps.length > 3000
        invalid_properties.push('invalid value for "disk_read_io_bandwidthkbps", number of items must be less than or equal to 3000.')
      end

      if !@disk_read_io_bandwidthkbps.nil? && @disk_read_io_bandwidthkbps.length < 0
        invalid_properties.push('invalid value for "disk_read_io_bandwidthkbps", number of items must be greater than or equal to 0.')
      end

      if !@disk_peak_read_io_bandwidthkbps.nil? && @disk_peak_read_io_bandwidthkbps.length > 3000
        invalid_properties.push('invalid value for "disk_peak_read_io_bandwidthkbps", number of items must be less than or equal to 3000.')
      end

      if !@disk_peak_read_io_bandwidthkbps.nil? && @disk_peak_read_io_bandwidthkbps.length < 0
        invalid_properties.push('invalid value for "disk_peak_read_io_bandwidthkbps", number of items must be greater than or equal to 0.')
      end

      if !@disk_base_read_io_bandwidthkbps.nil? && @disk_base_read_io_bandwidthkbps.length > 3000
        invalid_properties.push('invalid value for "disk_base_read_io_bandwidthkbps", number of items must be less than or equal to 3000.')
      end

      if !@disk_base_read_io_bandwidthkbps.nil? && @disk_base_read_io_bandwidthkbps.length < 0
        invalid_properties.push('invalid value for "disk_base_read_io_bandwidthkbps", number of items must be greater than or equal to 0.')
      end

      if !@disk_write_io_bandwidthkbps.nil? && @disk_write_io_bandwidthkbps.length > 3000
        invalid_properties.push('invalid value for "disk_write_io_bandwidthkbps", number of items must be less than or equal to 3000.')
      end

      if !@disk_write_io_bandwidthkbps.nil? && @disk_write_io_bandwidthkbps.length < 0
        invalid_properties.push('invalid value for "disk_write_io_bandwidthkbps", number of items must be greater than or equal to 0.')
      end

      if !@disk_peak_write_io_bandwidthkbps.nil? && @disk_peak_write_io_bandwidthkbps.length > 3000
        invalid_properties.push('invalid value for "disk_peak_write_io_bandwidthkbps", number of items must be less than or equal to 3000.')
      end

      if !@disk_peak_write_io_bandwidthkbps.nil? && @disk_peak_write_io_bandwidthkbps.length < 0
        invalid_properties.push('invalid value for "disk_peak_write_io_bandwidthkbps", number of items must be greater than or equal to 0.')
      end

      if !@disk_base_write_io_bandwidthkbps.nil? && @disk_base_write_io_bandwidthkbps.length > 3000
        invalid_properties.push('invalid value for "disk_base_write_io_bandwidthkbps", number of items must be less than or equal to 3000.')
      end

      if !@disk_base_write_io_bandwidthkbps.nil? && @disk_base_write_io_bandwidthkbps.length < 0
        invalid_properties.push('invalid value for "disk_base_write_io_bandwidthkbps", number of items must be greater than or equal to 0.')
      end

      if !@disk_read_io_avg_latency_microsec.nil? && @disk_read_io_avg_latency_microsec.length > 3000
        invalid_properties.push('invalid value for "disk_read_io_avg_latency_microsec", number of items must be less than or equal to 3000.')
      end

      if !@disk_read_io_avg_latency_microsec.nil? && @disk_read_io_avg_latency_microsec.length < 0
        invalid_properties.push('invalid value for "disk_read_io_avg_latency_microsec", number of items must be greater than or equal to 0.')
      end

      if !@disk_peak_read_io_avg_latency_microsec.nil? && @disk_peak_read_io_avg_latency_microsec.length > 3000
        invalid_properties.push('invalid value for "disk_peak_read_io_avg_latency_microsec", number of items must be less than or equal to 3000.')
      end

      if !@disk_peak_read_io_avg_latency_microsec.nil? && @disk_peak_read_io_avg_latency_microsec.length < 0
        invalid_properties.push('invalid value for "disk_peak_read_io_avg_latency_microsec", number of items must be greater than or equal to 0.')
      end

      if !@disk_base_read_io_avg_latency_microsec.nil? && @disk_base_read_io_avg_latency_microsec.length > 3000
        invalid_properties.push('invalid value for "disk_base_read_io_avg_latency_microsec", number of items must be less than or equal to 3000.')
      end

      if !@disk_base_read_io_avg_latency_microsec.nil? && @disk_base_read_io_avg_latency_microsec.length < 0
        invalid_properties.push('invalid value for "disk_base_read_io_avg_latency_microsec", number of items must be greater than or equal to 0.')
      end

      if !@disk_write_io_avg_latency_microsec.nil? && @disk_write_io_avg_latency_microsec.length > 3000
        invalid_properties.push('invalid value for "disk_write_io_avg_latency_microsec", number of items must be less than or equal to 3000.')
      end

      if !@disk_write_io_avg_latency_microsec.nil? && @disk_write_io_avg_latency_microsec.length < 0
        invalid_properties.push('invalid value for "disk_write_io_avg_latency_microsec", number of items must be greater than or equal to 0.')
      end

      if !@disk_peak_write_io_avg_latency_microsec.nil? && @disk_peak_write_io_avg_latency_microsec.length > 3000
        invalid_properties.push('invalid value for "disk_peak_write_io_avg_latency_microsec", number of items must be less than or equal to 3000.')
      end

      if !@disk_peak_write_io_avg_latency_microsec.nil? && @disk_peak_write_io_avg_latency_microsec.length < 0
        invalid_properties.push('invalid value for "disk_peak_write_io_avg_latency_microsec", number of items must be greater than or equal to 0.')
      end

      if !@disk_base_write_io_avg_latency_microsec.nil? && @disk_base_write_io_avg_latency_microsec.length > 3000
        invalid_properties.push('invalid value for "disk_base_write_io_avg_latency_microsec", number of items must be less than or equal to 3000.')
      end

      if !@disk_base_write_io_avg_latency_microsec.nil? && @disk_base_write_io_avg_latency_microsec.length < 0
        invalid_properties.push('invalid value for "disk_base_write_io_avg_latency_microsec", number of items must be greater than or equal to 0.')
      end

      if !@disk_read_io_ppm.nil? && @disk_read_io_ppm.length > 3000
        invalid_properties.push('invalid value for "disk_read_io_ppm", number of items must be less than or equal to 3000.')
      end

      if !@disk_read_io_ppm.nil? && @disk_read_io_ppm.length < 0
        invalid_properties.push('invalid value for "disk_read_io_ppm", number of items must be greater than or equal to 0.')
      end

      if !@disk_write_io_ppm.nil? && @disk_write_io_ppm.length > 3000
        invalid_properties.push('invalid value for "disk_write_io_ppm", number of items must be less than or equal to 3000.')
      end

      if !@disk_write_io_ppm.nil? && @disk_write_io_ppm.length < 0
        invalid_properties.push('invalid value for "disk_write_io_ppm", number of items must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@tenant_id.nil? && @tenant_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@ext_id.nil? && @ext_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@links.nil? && @links.length > 20
      return false if !@links.nil? && @links.length < 0
      return false if !@disk_usage_ppm.nil? && @disk_usage_ppm.length > 3000
      return false if !@disk_usage_ppm.nil? && @disk_usage_ppm.length < 0
      return false if !@disk_capacity_bytes.nil? && @disk_capacity_bytes.length > 3000
      return false if !@disk_capacity_bytes.nil? && @disk_capacity_bytes.length < 0
      return false if !@disk_num_iops.nil? && @disk_num_iops.length > 3000
      return false if !@disk_num_iops.nil? && @disk_num_iops.length < 0
      return false if !@disk_peak_num_iops.nil? && @disk_peak_num_iops.length > 3000
      return false if !@disk_peak_num_iops.nil? && @disk_peak_num_iops.length < 0
      return false if !@disk_base_num_iops.nil? && @disk_base_num_iops.length > 3000
      return false if !@disk_base_num_iops.nil? && @disk_base_num_iops.length < 0
      return false if !@disk_io_bandwidthkbps.nil? && @disk_io_bandwidthkbps.length > 3000
      return false if !@disk_io_bandwidthkbps.nil? && @disk_io_bandwidthkbps.length < 0
      return false if !@disk_peak_io_bandwidthkbps.nil? && @disk_peak_io_bandwidthkbps.length > 3000
      return false if !@disk_peak_io_bandwidthkbps.nil? && @disk_peak_io_bandwidthkbps.length < 0
      return false if !@disk_base_io_bandwidthkbps.nil? && @disk_base_io_bandwidthkbps.length > 3000
      return false if !@disk_base_io_bandwidthkbps.nil? && @disk_base_io_bandwidthkbps.length < 0
      return false if !@disk_avg_io_latency_microsec.nil? && @disk_avg_io_latency_microsec.length > 3000
      return false if !@disk_avg_io_latency_microsec.nil? && @disk_avg_io_latency_microsec.length < 0
      return false if !@disk_peak_io_latency_microsec.nil? && @disk_peak_io_latency_microsec.length > 3000
      return false if !@disk_peak_io_latency_microsec.nil? && @disk_peak_io_latency_microsec.length < 0
      return false if !@disk_base_io_latency_microsec.nil? && @disk_base_io_latency_microsec.length > 3000
      return false if !@disk_base_io_latency_microsec.nil? && @disk_base_io_latency_microsec.length < 0
      return false if !@disk_free_bytes.nil? && @disk_free_bytes.length > 3000
      return false if !@disk_free_bytes.nil? && @disk_free_bytes.length < 0
      return false if !@disk_usage_bytes.nil? && @disk_usage_bytes.length > 3000
      return false if !@disk_usage_bytes.nil? && @disk_usage_bytes.length < 0
      return false if !@disk_read_iops.nil? && @disk_read_iops.length > 3000
      return false if !@disk_read_iops.nil? && @disk_read_iops.length < 0
      return false if !@disk_base_read_iops.nil? && @disk_base_read_iops.length > 3000
      return false if !@disk_base_read_iops.nil? && @disk_base_read_iops.length < 0
      return false if !@disk_peak_read_iops.nil? && @disk_peak_read_iops.length > 3000
      return false if !@disk_peak_read_iops.nil? && @disk_peak_read_iops.length < 0
      return false if !@disk_write_iops.nil? && @disk_write_iops.length > 3000
      return false if !@disk_write_iops.nil? && @disk_write_iops.length < 0
      return false if !@disk_peak_write_iops.nil? && @disk_peak_write_iops.length > 3000
      return false if !@disk_peak_write_iops.nil? && @disk_peak_write_iops.length < 0
      return false if !@disk_base_write_iops.nil? && @disk_base_write_iops.length > 3000
      return false if !@disk_base_write_iops.nil? && @disk_base_write_iops.length < 0
      return false if !@disk_read_io_bandwidthkbps.nil? && @disk_read_io_bandwidthkbps.length > 3000
      return false if !@disk_read_io_bandwidthkbps.nil? && @disk_read_io_bandwidthkbps.length < 0
      return false if !@disk_peak_read_io_bandwidthkbps.nil? && @disk_peak_read_io_bandwidthkbps.length > 3000
      return false if !@disk_peak_read_io_bandwidthkbps.nil? && @disk_peak_read_io_bandwidthkbps.length < 0
      return false if !@disk_base_read_io_bandwidthkbps.nil? && @disk_base_read_io_bandwidthkbps.length > 3000
      return false if !@disk_base_read_io_bandwidthkbps.nil? && @disk_base_read_io_bandwidthkbps.length < 0
      return false if !@disk_write_io_bandwidthkbps.nil? && @disk_write_io_bandwidthkbps.length > 3000
      return false if !@disk_write_io_bandwidthkbps.nil? && @disk_write_io_bandwidthkbps.length < 0
      return false if !@disk_peak_write_io_bandwidthkbps.nil? && @disk_peak_write_io_bandwidthkbps.length > 3000
      return false if !@disk_peak_write_io_bandwidthkbps.nil? && @disk_peak_write_io_bandwidthkbps.length < 0
      return false if !@disk_base_write_io_bandwidthkbps.nil? && @disk_base_write_io_bandwidthkbps.length > 3000
      return false if !@disk_base_write_io_bandwidthkbps.nil? && @disk_base_write_io_bandwidthkbps.length < 0
      return false if !@disk_read_io_avg_latency_microsec.nil? && @disk_read_io_avg_latency_microsec.length > 3000
      return false if !@disk_read_io_avg_latency_microsec.nil? && @disk_read_io_avg_latency_microsec.length < 0
      return false if !@disk_peak_read_io_avg_latency_microsec.nil? && @disk_peak_read_io_avg_latency_microsec.length > 3000
      return false if !@disk_peak_read_io_avg_latency_microsec.nil? && @disk_peak_read_io_avg_latency_microsec.length < 0
      return false if !@disk_base_read_io_avg_latency_microsec.nil? && @disk_base_read_io_avg_latency_microsec.length > 3000
      return false if !@disk_base_read_io_avg_latency_microsec.nil? && @disk_base_read_io_avg_latency_microsec.length < 0
      return false if !@disk_write_io_avg_latency_microsec.nil? && @disk_write_io_avg_latency_microsec.length > 3000
      return false if !@disk_write_io_avg_latency_microsec.nil? && @disk_write_io_avg_latency_microsec.length < 0
      return false if !@disk_peak_write_io_avg_latency_microsec.nil? && @disk_peak_write_io_avg_latency_microsec.length > 3000
      return false if !@disk_peak_write_io_avg_latency_microsec.nil? && @disk_peak_write_io_avg_latency_microsec.length < 0
      return false if !@disk_base_write_io_avg_latency_microsec.nil? && @disk_base_write_io_avg_latency_microsec.length > 3000
      return false if !@disk_base_write_io_avg_latency_microsec.nil? && @disk_base_write_io_avg_latency_microsec.length < 0
      return false if !@disk_read_io_ppm.nil? && @disk_read_io_ppm.length > 3000
      return false if !@disk_read_io_ppm.nil? && @disk_read_io_ppm.length < 0
      return false if !@disk_write_io_ppm.nil? && @disk_write_io_ppm.length > 3000
      return false if !@disk_write_io_ppm.nil? && @disk_write_io_ppm.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] tenant_id Value to be assigned
    def tenant_id=(tenant_id)
      if tenant_id.nil?
        fail ArgumentError, 'tenant_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if tenant_id !~ pattern
        fail ArgumentError, "invalid value for \"tenant_id\", must conform to the pattern #{pattern}."
      end

      @tenant_id = tenant_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ext_id Value to be assigned
    def ext_id=(ext_id)
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !ext_id.nil? && ext_id !~ pattern
        fail ArgumentError, "invalid value for \"ext_id\", must conform to the pattern #{pattern}."
      end

      @ext_id = ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] links Value to be assigned
    def links=(links)
      if links.nil?
        fail ArgumentError, 'links cannot be nil'
      end

      if links.length > 20
        fail ArgumentError, 'invalid value for "links", number of items must be less than or equal to 20.'
      end

      if links.length < 0
        fail ArgumentError, 'invalid value for "links", number of items must be greater than or equal to 0.'
      end

      @links = links
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_usage_ppm Value to be assigned
    def disk_usage_ppm=(disk_usage_ppm)
      if disk_usage_ppm.nil?
        fail ArgumentError, 'disk_usage_ppm cannot be nil'
      end

      if disk_usage_ppm.length > 3000
        fail ArgumentError, 'invalid value for "disk_usage_ppm", number of items must be less than or equal to 3000.'
      end

      if disk_usage_ppm.length < 0
        fail ArgumentError, 'invalid value for "disk_usage_ppm", number of items must be greater than or equal to 0.'
      end

      @disk_usage_ppm = disk_usage_ppm
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_capacity_bytes Value to be assigned
    def disk_capacity_bytes=(disk_capacity_bytes)
      if disk_capacity_bytes.nil?
        fail ArgumentError, 'disk_capacity_bytes cannot be nil'
      end

      if disk_capacity_bytes.length > 3000
        fail ArgumentError, 'invalid value for "disk_capacity_bytes", number of items must be less than or equal to 3000.'
      end

      if disk_capacity_bytes.length < 0
        fail ArgumentError, 'invalid value for "disk_capacity_bytes", number of items must be greater than or equal to 0.'
      end

      @disk_capacity_bytes = disk_capacity_bytes
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_num_iops Value to be assigned
    def disk_num_iops=(disk_num_iops)
      if disk_num_iops.nil?
        fail ArgumentError, 'disk_num_iops cannot be nil'
      end

      if disk_num_iops.length > 3000
        fail ArgumentError, 'invalid value for "disk_num_iops", number of items must be less than or equal to 3000.'
      end

      if disk_num_iops.length < 0
        fail ArgumentError, 'invalid value for "disk_num_iops", number of items must be greater than or equal to 0.'
      end

      @disk_num_iops = disk_num_iops
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_peak_num_iops Value to be assigned
    def disk_peak_num_iops=(disk_peak_num_iops)
      if disk_peak_num_iops.nil?
        fail ArgumentError, 'disk_peak_num_iops cannot be nil'
      end

      if disk_peak_num_iops.length > 3000
        fail ArgumentError, 'invalid value for "disk_peak_num_iops", number of items must be less than or equal to 3000.'
      end

      if disk_peak_num_iops.length < 0
        fail ArgumentError, 'invalid value for "disk_peak_num_iops", number of items must be greater than or equal to 0.'
      end

      @disk_peak_num_iops = disk_peak_num_iops
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_base_num_iops Value to be assigned
    def disk_base_num_iops=(disk_base_num_iops)
      if disk_base_num_iops.nil?
        fail ArgumentError, 'disk_base_num_iops cannot be nil'
      end

      if disk_base_num_iops.length > 3000
        fail ArgumentError, 'invalid value for "disk_base_num_iops", number of items must be less than or equal to 3000.'
      end

      if disk_base_num_iops.length < 0
        fail ArgumentError, 'invalid value for "disk_base_num_iops", number of items must be greater than or equal to 0.'
      end

      @disk_base_num_iops = disk_base_num_iops
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_io_bandwidthkbps Value to be assigned
    def disk_io_bandwidthkbps=(disk_io_bandwidthkbps)
      if disk_io_bandwidthkbps.nil?
        fail ArgumentError, 'disk_io_bandwidthkbps cannot be nil'
      end

      if disk_io_bandwidthkbps.length > 3000
        fail ArgumentError, 'invalid value for "disk_io_bandwidthkbps", number of items must be less than or equal to 3000.'
      end

      if disk_io_bandwidthkbps.length < 0
        fail ArgumentError, 'invalid value for "disk_io_bandwidthkbps", number of items must be greater than or equal to 0.'
      end

      @disk_io_bandwidthkbps = disk_io_bandwidthkbps
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_peak_io_bandwidthkbps Value to be assigned
    def disk_peak_io_bandwidthkbps=(disk_peak_io_bandwidthkbps)
      if disk_peak_io_bandwidthkbps.nil?
        fail ArgumentError, 'disk_peak_io_bandwidthkbps cannot be nil'
      end

      if disk_peak_io_bandwidthkbps.length > 3000
        fail ArgumentError, 'invalid value for "disk_peak_io_bandwidthkbps", number of items must be less than or equal to 3000.'
      end

      if disk_peak_io_bandwidthkbps.length < 0
        fail ArgumentError, 'invalid value for "disk_peak_io_bandwidthkbps", number of items must be greater than or equal to 0.'
      end

      @disk_peak_io_bandwidthkbps = disk_peak_io_bandwidthkbps
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_base_io_bandwidthkbps Value to be assigned
    def disk_base_io_bandwidthkbps=(disk_base_io_bandwidthkbps)
      if disk_base_io_bandwidthkbps.nil?
        fail ArgumentError, 'disk_base_io_bandwidthkbps cannot be nil'
      end

      if disk_base_io_bandwidthkbps.length > 3000
        fail ArgumentError, 'invalid value for "disk_base_io_bandwidthkbps", number of items must be less than or equal to 3000.'
      end

      if disk_base_io_bandwidthkbps.length < 0
        fail ArgumentError, 'invalid value for "disk_base_io_bandwidthkbps", number of items must be greater than or equal to 0.'
      end

      @disk_base_io_bandwidthkbps = disk_base_io_bandwidthkbps
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_avg_io_latency_microsec Value to be assigned
    def disk_avg_io_latency_microsec=(disk_avg_io_latency_microsec)
      if disk_avg_io_latency_microsec.nil?
        fail ArgumentError, 'disk_avg_io_latency_microsec cannot be nil'
      end

      if disk_avg_io_latency_microsec.length > 3000
        fail ArgumentError, 'invalid value for "disk_avg_io_latency_microsec", number of items must be less than or equal to 3000.'
      end

      if disk_avg_io_latency_microsec.length < 0
        fail ArgumentError, 'invalid value for "disk_avg_io_latency_microsec", number of items must be greater than or equal to 0.'
      end

      @disk_avg_io_latency_microsec = disk_avg_io_latency_microsec
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_peak_io_latency_microsec Value to be assigned
    def disk_peak_io_latency_microsec=(disk_peak_io_latency_microsec)
      if disk_peak_io_latency_microsec.nil?
        fail ArgumentError, 'disk_peak_io_latency_microsec cannot be nil'
      end

      if disk_peak_io_latency_microsec.length > 3000
        fail ArgumentError, 'invalid value for "disk_peak_io_latency_microsec", number of items must be less than or equal to 3000.'
      end

      if disk_peak_io_latency_microsec.length < 0
        fail ArgumentError, 'invalid value for "disk_peak_io_latency_microsec", number of items must be greater than or equal to 0.'
      end

      @disk_peak_io_latency_microsec = disk_peak_io_latency_microsec
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_base_io_latency_microsec Value to be assigned
    def disk_base_io_latency_microsec=(disk_base_io_latency_microsec)
      if disk_base_io_latency_microsec.nil?
        fail ArgumentError, 'disk_base_io_latency_microsec cannot be nil'
      end

      if disk_base_io_latency_microsec.length > 3000
        fail ArgumentError, 'invalid value for "disk_base_io_latency_microsec", number of items must be less than or equal to 3000.'
      end

      if disk_base_io_latency_microsec.length < 0
        fail ArgumentError, 'invalid value for "disk_base_io_latency_microsec", number of items must be greater than or equal to 0.'
      end

      @disk_base_io_latency_microsec = disk_base_io_latency_microsec
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_free_bytes Value to be assigned
    def disk_free_bytes=(disk_free_bytes)
      if disk_free_bytes.nil?
        fail ArgumentError, 'disk_free_bytes cannot be nil'
      end

      if disk_free_bytes.length > 3000
        fail ArgumentError, 'invalid value for "disk_free_bytes", number of items must be less than or equal to 3000.'
      end

      if disk_free_bytes.length < 0
        fail ArgumentError, 'invalid value for "disk_free_bytes", number of items must be greater than or equal to 0.'
      end

      @disk_free_bytes = disk_free_bytes
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_usage_bytes Value to be assigned
    def disk_usage_bytes=(disk_usage_bytes)
      if disk_usage_bytes.nil?
        fail ArgumentError, 'disk_usage_bytes cannot be nil'
      end

      if disk_usage_bytes.length > 3000
        fail ArgumentError, 'invalid value for "disk_usage_bytes", number of items must be less than or equal to 3000.'
      end

      if disk_usage_bytes.length < 0
        fail ArgumentError, 'invalid value for "disk_usage_bytes", number of items must be greater than or equal to 0.'
      end

      @disk_usage_bytes = disk_usage_bytes
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_read_iops Value to be assigned
    def disk_read_iops=(disk_read_iops)
      if disk_read_iops.nil?
        fail ArgumentError, 'disk_read_iops cannot be nil'
      end

      if disk_read_iops.length > 3000
        fail ArgumentError, 'invalid value for "disk_read_iops", number of items must be less than or equal to 3000.'
      end

      if disk_read_iops.length < 0
        fail ArgumentError, 'invalid value for "disk_read_iops", number of items must be greater than or equal to 0.'
      end

      @disk_read_iops = disk_read_iops
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_base_read_iops Value to be assigned
    def disk_base_read_iops=(disk_base_read_iops)
      if disk_base_read_iops.nil?
        fail ArgumentError, 'disk_base_read_iops cannot be nil'
      end

      if disk_base_read_iops.length > 3000
        fail ArgumentError, 'invalid value for "disk_base_read_iops", number of items must be less than or equal to 3000.'
      end

      if disk_base_read_iops.length < 0
        fail ArgumentError, 'invalid value for "disk_base_read_iops", number of items must be greater than or equal to 0.'
      end

      @disk_base_read_iops = disk_base_read_iops
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_peak_read_iops Value to be assigned
    def disk_peak_read_iops=(disk_peak_read_iops)
      if disk_peak_read_iops.nil?
        fail ArgumentError, 'disk_peak_read_iops cannot be nil'
      end

      if disk_peak_read_iops.length > 3000
        fail ArgumentError, 'invalid value for "disk_peak_read_iops", number of items must be less than or equal to 3000.'
      end

      if disk_peak_read_iops.length < 0
        fail ArgumentError, 'invalid value for "disk_peak_read_iops", number of items must be greater than or equal to 0.'
      end

      @disk_peak_read_iops = disk_peak_read_iops
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_write_iops Value to be assigned
    def disk_write_iops=(disk_write_iops)
      if disk_write_iops.nil?
        fail ArgumentError, 'disk_write_iops cannot be nil'
      end

      if disk_write_iops.length > 3000
        fail ArgumentError, 'invalid value for "disk_write_iops", number of items must be less than or equal to 3000.'
      end

      if disk_write_iops.length < 0
        fail ArgumentError, 'invalid value for "disk_write_iops", number of items must be greater than or equal to 0.'
      end

      @disk_write_iops = disk_write_iops
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_peak_write_iops Value to be assigned
    def disk_peak_write_iops=(disk_peak_write_iops)
      if disk_peak_write_iops.nil?
        fail ArgumentError, 'disk_peak_write_iops cannot be nil'
      end

      if disk_peak_write_iops.length > 3000
        fail ArgumentError, 'invalid value for "disk_peak_write_iops", number of items must be less than or equal to 3000.'
      end

      if disk_peak_write_iops.length < 0
        fail ArgumentError, 'invalid value for "disk_peak_write_iops", number of items must be greater than or equal to 0.'
      end

      @disk_peak_write_iops = disk_peak_write_iops
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_base_write_iops Value to be assigned
    def disk_base_write_iops=(disk_base_write_iops)
      if disk_base_write_iops.nil?
        fail ArgumentError, 'disk_base_write_iops cannot be nil'
      end

      if disk_base_write_iops.length > 3000
        fail ArgumentError, 'invalid value for "disk_base_write_iops", number of items must be less than or equal to 3000.'
      end

      if disk_base_write_iops.length < 0
        fail ArgumentError, 'invalid value for "disk_base_write_iops", number of items must be greater than or equal to 0.'
      end

      @disk_base_write_iops = disk_base_write_iops
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_read_io_bandwidthkbps Value to be assigned
    def disk_read_io_bandwidthkbps=(disk_read_io_bandwidthkbps)
      if disk_read_io_bandwidthkbps.nil?
        fail ArgumentError, 'disk_read_io_bandwidthkbps cannot be nil'
      end

      if disk_read_io_bandwidthkbps.length > 3000
        fail ArgumentError, 'invalid value for "disk_read_io_bandwidthkbps", number of items must be less than or equal to 3000.'
      end

      if disk_read_io_bandwidthkbps.length < 0
        fail ArgumentError, 'invalid value for "disk_read_io_bandwidthkbps", number of items must be greater than or equal to 0.'
      end

      @disk_read_io_bandwidthkbps = disk_read_io_bandwidthkbps
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_peak_read_io_bandwidthkbps Value to be assigned
    def disk_peak_read_io_bandwidthkbps=(disk_peak_read_io_bandwidthkbps)
      if disk_peak_read_io_bandwidthkbps.nil?
        fail ArgumentError, 'disk_peak_read_io_bandwidthkbps cannot be nil'
      end

      if disk_peak_read_io_bandwidthkbps.length > 3000
        fail ArgumentError, 'invalid value for "disk_peak_read_io_bandwidthkbps", number of items must be less than or equal to 3000.'
      end

      if disk_peak_read_io_bandwidthkbps.length < 0
        fail ArgumentError, 'invalid value for "disk_peak_read_io_bandwidthkbps", number of items must be greater than or equal to 0.'
      end

      @disk_peak_read_io_bandwidthkbps = disk_peak_read_io_bandwidthkbps
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_base_read_io_bandwidthkbps Value to be assigned
    def disk_base_read_io_bandwidthkbps=(disk_base_read_io_bandwidthkbps)
      if disk_base_read_io_bandwidthkbps.nil?
        fail ArgumentError, 'disk_base_read_io_bandwidthkbps cannot be nil'
      end

      if disk_base_read_io_bandwidthkbps.length > 3000
        fail ArgumentError, 'invalid value for "disk_base_read_io_bandwidthkbps", number of items must be less than or equal to 3000.'
      end

      if disk_base_read_io_bandwidthkbps.length < 0
        fail ArgumentError, 'invalid value for "disk_base_read_io_bandwidthkbps", number of items must be greater than or equal to 0.'
      end

      @disk_base_read_io_bandwidthkbps = disk_base_read_io_bandwidthkbps
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_write_io_bandwidthkbps Value to be assigned
    def disk_write_io_bandwidthkbps=(disk_write_io_bandwidthkbps)
      if disk_write_io_bandwidthkbps.nil?
        fail ArgumentError, 'disk_write_io_bandwidthkbps cannot be nil'
      end

      if disk_write_io_bandwidthkbps.length > 3000
        fail ArgumentError, 'invalid value for "disk_write_io_bandwidthkbps", number of items must be less than or equal to 3000.'
      end

      if disk_write_io_bandwidthkbps.length < 0
        fail ArgumentError, 'invalid value for "disk_write_io_bandwidthkbps", number of items must be greater than or equal to 0.'
      end

      @disk_write_io_bandwidthkbps = disk_write_io_bandwidthkbps
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_peak_write_io_bandwidthkbps Value to be assigned
    def disk_peak_write_io_bandwidthkbps=(disk_peak_write_io_bandwidthkbps)
      if disk_peak_write_io_bandwidthkbps.nil?
        fail ArgumentError, 'disk_peak_write_io_bandwidthkbps cannot be nil'
      end

      if disk_peak_write_io_bandwidthkbps.length > 3000
        fail ArgumentError, 'invalid value for "disk_peak_write_io_bandwidthkbps", number of items must be less than or equal to 3000.'
      end

      if disk_peak_write_io_bandwidthkbps.length < 0
        fail ArgumentError, 'invalid value for "disk_peak_write_io_bandwidthkbps", number of items must be greater than or equal to 0.'
      end

      @disk_peak_write_io_bandwidthkbps = disk_peak_write_io_bandwidthkbps
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_base_write_io_bandwidthkbps Value to be assigned
    def disk_base_write_io_bandwidthkbps=(disk_base_write_io_bandwidthkbps)
      if disk_base_write_io_bandwidthkbps.nil?
        fail ArgumentError, 'disk_base_write_io_bandwidthkbps cannot be nil'
      end

      if disk_base_write_io_bandwidthkbps.length > 3000
        fail ArgumentError, 'invalid value for "disk_base_write_io_bandwidthkbps", number of items must be less than or equal to 3000.'
      end

      if disk_base_write_io_bandwidthkbps.length < 0
        fail ArgumentError, 'invalid value for "disk_base_write_io_bandwidthkbps", number of items must be greater than or equal to 0.'
      end

      @disk_base_write_io_bandwidthkbps = disk_base_write_io_bandwidthkbps
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_read_io_avg_latency_microsec Value to be assigned
    def disk_read_io_avg_latency_microsec=(disk_read_io_avg_latency_microsec)
      if disk_read_io_avg_latency_microsec.nil?
        fail ArgumentError, 'disk_read_io_avg_latency_microsec cannot be nil'
      end

      if disk_read_io_avg_latency_microsec.length > 3000
        fail ArgumentError, 'invalid value for "disk_read_io_avg_latency_microsec", number of items must be less than or equal to 3000.'
      end

      if disk_read_io_avg_latency_microsec.length < 0
        fail ArgumentError, 'invalid value for "disk_read_io_avg_latency_microsec", number of items must be greater than or equal to 0.'
      end

      @disk_read_io_avg_latency_microsec = disk_read_io_avg_latency_microsec
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_peak_read_io_avg_latency_microsec Value to be assigned
    def disk_peak_read_io_avg_latency_microsec=(disk_peak_read_io_avg_latency_microsec)
      if disk_peak_read_io_avg_latency_microsec.nil?
        fail ArgumentError, 'disk_peak_read_io_avg_latency_microsec cannot be nil'
      end

      if disk_peak_read_io_avg_latency_microsec.length > 3000
        fail ArgumentError, 'invalid value for "disk_peak_read_io_avg_latency_microsec", number of items must be less than or equal to 3000.'
      end

      if disk_peak_read_io_avg_latency_microsec.length < 0
        fail ArgumentError, 'invalid value for "disk_peak_read_io_avg_latency_microsec", number of items must be greater than or equal to 0.'
      end

      @disk_peak_read_io_avg_latency_microsec = disk_peak_read_io_avg_latency_microsec
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_base_read_io_avg_latency_microsec Value to be assigned
    def disk_base_read_io_avg_latency_microsec=(disk_base_read_io_avg_latency_microsec)
      if disk_base_read_io_avg_latency_microsec.nil?
        fail ArgumentError, 'disk_base_read_io_avg_latency_microsec cannot be nil'
      end

      if disk_base_read_io_avg_latency_microsec.length > 3000
        fail ArgumentError, 'invalid value for "disk_base_read_io_avg_latency_microsec", number of items must be less than or equal to 3000.'
      end

      if disk_base_read_io_avg_latency_microsec.length < 0
        fail ArgumentError, 'invalid value for "disk_base_read_io_avg_latency_microsec", number of items must be greater than or equal to 0.'
      end

      @disk_base_read_io_avg_latency_microsec = disk_base_read_io_avg_latency_microsec
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_write_io_avg_latency_microsec Value to be assigned
    def disk_write_io_avg_latency_microsec=(disk_write_io_avg_latency_microsec)
      if disk_write_io_avg_latency_microsec.nil?
        fail ArgumentError, 'disk_write_io_avg_latency_microsec cannot be nil'
      end

      if disk_write_io_avg_latency_microsec.length > 3000
        fail ArgumentError, 'invalid value for "disk_write_io_avg_latency_microsec", number of items must be less than or equal to 3000.'
      end

      if disk_write_io_avg_latency_microsec.length < 0
        fail ArgumentError, 'invalid value for "disk_write_io_avg_latency_microsec", number of items must be greater than or equal to 0.'
      end

      @disk_write_io_avg_latency_microsec = disk_write_io_avg_latency_microsec
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_peak_write_io_avg_latency_microsec Value to be assigned
    def disk_peak_write_io_avg_latency_microsec=(disk_peak_write_io_avg_latency_microsec)
      if disk_peak_write_io_avg_latency_microsec.nil?
        fail ArgumentError, 'disk_peak_write_io_avg_latency_microsec cannot be nil'
      end

      if disk_peak_write_io_avg_latency_microsec.length > 3000
        fail ArgumentError, 'invalid value for "disk_peak_write_io_avg_latency_microsec", number of items must be less than or equal to 3000.'
      end

      if disk_peak_write_io_avg_latency_microsec.length < 0
        fail ArgumentError, 'invalid value for "disk_peak_write_io_avg_latency_microsec", number of items must be greater than or equal to 0.'
      end

      @disk_peak_write_io_avg_latency_microsec = disk_peak_write_io_avg_latency_microsec
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_base_write_io_avg_latency_microsec Value to be assigned
    def disk_base_write_io_avg_latency_microsec=(disk_base_write_io_avg_latency_microsec)
      if disk_base_write_io_avg_latency_microsec.nil?
        fail ArgumentError, 'disk_base_write_io_avg_latency_microsec cannot be nil'
      end

      if disk_base_write_io_avg_latency_microsec.length > 3000
        fail ArgumentError, 'invalid value for "disk_base_write_io_avg_latency_microsec", number of items must be less than or equal to 3000.'
      end

      if disk_base_write_io_avg_latency_microsec.length < 0
        fail ArgumentError, 'invalid value for "disk_base_write_io_avg_latency_microsec", number of items must be greater than or equal to 0.'
      end

      @disk_base_write_io_avg_latency_microsec = disk_base_write_io_avg_latency_microsec
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_read_io_ppm Value to be assigned
    def disk_read_io_ppm=(disk_read_io_ppm)
      if disk_read_io_ppm.nil?
        fail ArgumentError, 'disk_read_io_ppm cannot be nil'
      end

      if disk_read_io_ppm.length > 3000
        fail ArgumentError, 'invalid value for "disk_read_io_ppm", number of items must be less than or equal to 3000.'
      end

      if disk_read_io_ppm.length < 0
        fail ArgumentError, 'invalid value for "disk_read_io_ppm", number of items must be greater than or equal to 0.'
      end

      @disk_read_io_ppm = disk_read_io_ppm
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_write_io_ppm Value to be assigned
    def disk_write_io_ppm=(disk_write_io_ppm)
      if disk_write_io_ppm.nil?
        fail ArgumentError, 'disk_write_io_ppm cannot be nil'
      end

      if disk_write_io_ppm.length > 3000
        fail ArgumentError, 'invalid value for "disk_write_io_ppm", number of items must be less than or equal to 3000.'
      end

      if disk_write_io_ppm.length < 0
        fail ArgumentError, 'invalid value for "disk_write_io_ppm", number of items must be greater than or equal to 0.'
      end

      @disk_write_io_ppm = disk_write_io_ppm
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tenant_id == o.tenant_id &&
          ext_id == o.ext_id &&
          links == o.links &&
          disk_usage_ppm == o.disk_usage_ppm &&
          disk_capacity_bytes == o.disk_capacity_bytes &&
          disk_num_iops == o.disk_num_iops &&
          disk_peak_num_iops == o.disk_peak_num_iops &&
          disk_base_num_iops == o.disk_base_num_iops &&
          disk_io_bandwidthkbps == o.disk_io_bandwidthkbps &&
          disk_peak_io_bandwidthkbps == o.disk_peak_io_bandwidthkbps &&
          disk_base_io_bandwidthkbps == o.disk_base_io_bandwidthkbps &&
          disk_avg_io_latency_microsec == o.disk_avg_io_latency_microsec &&
          disk_peak_io_latency_microsec == o.disk_peak_io_latency_microsec &&
          disk_base_io_latency_microsec == o.disk_base_io_latency_microsec &&
          disk_free_bytes == o.disk_free_bytes &&
          disk_usage_bytes == o.disk_usage_bytes &&
          disk_read_iops == o.disk_read_iops &&
          disk_base_read_iops == o.disk_base_read_iops &&
          disk_peak_read_iops == o.disk_peak_read_iops &&
          disk_write_iops == o.disk_write_iops &&
          disk_peak_write_iops == o.disk_peak_write_iops &&
          disk_base_write_iops == o.disk_base_write_iops &&
          disk_read_io_bandwidthkbps == o.disk_read_io_bandwidthkbps &&
          disk_peak_read_io_bandwidthkbps == o.disk_peak_read_io_bandwidthkbps &&
          disk_base_read_io_bandwidthkbps == o.disk_base_read_io_bandwidthkbps &&
          disk_write_io_bandwidthkbps == o.disk_write_io_bandwidthkbps &&
          disk_peak_write_io_bandwidthkbps == o.disk_peak_write_io_bandwidthkbps &&
          disk_base_write_io_bandwidthkbps == o.disk_base_write_io_bandwidthkbps &&
          disk_read_io_avg_latency_microsec == o.disk_read_io_avg_latency_microsec &&
          disk_peak_read_io_avg_latency_microsec == o.disk_peak_read_io_avg_latency_microsec &&
          disk_base_read_io_avg_latency_microsec == o.disk_base_read_io_avg_latency_microsec &&
          disk_write_io_avg_latency_microsec == o.disk_write_io_avg_latency_microsec &&
          disk_peak_write_io_avg_latency_microsec == o.disk_peak_write_io_avg_latency_microsec &&
          disk_base_write_io_avg_latency_microsec == o.disk_base_write_io_avg_latency_microsec &&
          disk_read_io_ppm == o.disk_read_io_ppm &&
          disk_write_io_ppm == o.disk_write_io_ppm
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tenant_id, ext_id, links, disk_usage_ppm, disk_capacity_bytes, disk_num_iops, disk_peak_num_iops, disk_base_num_iops, disk_io_bandwidthkbps, disk_peak_io_bandwidthkbps, disk_base_io_bandwidthkbps, disk_avg_io_latency_microsec, disk_peak_io_latency_microsec, disk_base_io_latency_microsec, disk_free_bytes, disk_usage_bytes, disk_read_iops, disk_base_read_iops, disk_peak_read_iops, disk_write_iops, disk_peak_write_iops, disk_base_write_iops, disk_read_io_bandwidthkbps, disk_peak_read_io_bandwidthkbps, disk_base_read_io_bandwidthkbps, disk_write_io_bandwidthkbps, disk_peak_write_io_bandwidthkbps, disk_base_write_io_bandwidthkbps, disk_read_io_avg_latency_microsec, disk_peak_read_io_avg_latency_microsec, disk_base_read_io_avg_latency_microsec, disk_write_io_avg_latency_microsec, disk_peak_write_io_avg_latency_microsec, disk_base_write_io_avg_latency_microsec, disk_read_io_ppm, disk_write_io_ppm].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixClustermgmt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
