=begin
#Nutanix Cluster Management APIs

#Manage Hosts, Clusters and other Infrastructure.

The version of the OpenAPI document: 4.0.2

Generated by: https://openapi-generator.tech
Generator version: 7.16.0

=end

require 'date'
require 'time'

module NutanixClustermgmt
  # Host NIC details.
  class ClustermgmtV40ConfigHostNic
    # A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    attr_accessor :tenant_id

    # A globally unique identifier of an instance that is suitable for external consumption. 
    attr_accessor :ext_id

    # A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    attr_accessor :links

    # Name of the host NIC.
    attr_accessor :name

    # Host description.
    attr_accessor :host_description

    # Host Mac address.
    attr_accessor :mac_address

    # List of IPv4 addresses associated with the NIC entity for the network connection.
    attr_accessor :ipv4_addresses

    # List of IPv6 addresses associated with the NIC entity for the network connection.
    attr_accessor :ipv6_addresses

    # Operational status of the interface to the port associated with the NIC entity.
    attr_accessor :interface_status

    # Status of DHCP protocol.
    attr_accessor :is_dhcp_enabled

    # Link speed in Kbps.
    attr_accessor :link_speed_in_kbps

    # Maximum transmission unit in bytes.
    attr_accessor :mtu_in_bytes

    # UUID of the host.
    attr_accessor :node_uuid

    # Network discovery protocol (either LLDP or None).
    attr_accessor :discovery_protocol

    # Switch device Id learned through the discovery protocol.
    attr_accessor :switch_device_id

    # Switch port Id learned through the discovery protocol.
    attr_accessor :switch_port_id

    # Switch vendor information learned through the discovery protocol.
    attr_accessor :switch_vendor_info

    # Switch VLAN Id learned through the discovery protocol.
    attr_accessor :switch_vlan_id

    attr_accessor :switch_management_ip

    # Switch Mac address
    attr_accessor :switch_mac_address

    # List of network switch interfaces attached to the host NIC.
    attr_accessor :attached_switch_interface_list

    # Size of configured buffer (in bytes) to the port associated with NIC, storing the network packets received through the port.
    attr_accessor :rx_ring_size_in_bytes

    # Size of configured buffer (in bytes) to the port associated with NIC, storing the network packets that would be transmitted through the port.
    attr_accessor :tx_ring_size_in_bytes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tenant_id' => :'tenantId',
        :'ext_id' => :'extId',
        :'links' => :'links',
        :'name' => :'name',
        :'host_description' => :'hostDescription',
        :'mac_address' => :'macAddress',
        :'ipv4_addresses' => :'ipv4Addresses',
        :'ipv6_addresses' => :'ipv6Addresses',
        :'interface_status' => :'interfaceStatus',
        :'is_dhcp_enabled' => :'isDhcpEnabled',
        :'link_speed_in_kbps' => :'linkSpeedInKbps',
        :'mtu_in_bytes' => :'mtuInBytes',
        :'node_uuid' => :'nodeUuid',
        :'discovery_protocol' => :'discoveryProtocol',
        :'switch_device_id' => :'switchDeviceId',
        :'switch_port_id' => :'switchPortId',
        :'switch_vendor_info' => :'switchVendorInfo',
        :'switch_vlan_id' => :'switchVlanId',
        :'switch_management_ip' => :'switchManagementIp',
        :'switch_mac_address' => :'switchMacAddress',
        :'attached_switch_interface_list' => :'attachedSwitchInterfaceList',
        :'rx_ring_size_in_bytes' => :'rxRingSizeInBytes',
        :'tx_ring_size_in_bytes' => :'txRingSizeInBytes'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tenant_id' => :'String',
        :'ext_id' => :'String',
        :'links' => :'Array<CommonV10ResponseApiLink>',
        :'name' => :'String',
        :'host_description' => :'String',
        :'mac_address' => :'String',
        :'ipv4_addresses' => :'Array<CommonV10ConfigIPAddress>',
        :'ipv6_addresses' => :'Array<CommonV10ConfigIPAddress>',
        :'interface_status' => :'String',
        :'is_dhcp_enabled' => :'Boolean',
        :'link_speed_in_kbps' => :'Integer',
        :'mtu_in_bytes' => :'Integer',
        :'node_uuid' => :'String',
        :'discovery_protocol' => :'String',
        :'switch_device_id' => :'String',
        :'switch_port_id' => :'String',
        :'switch_vendor_info' => :'String',
        :'switch_vlan_id' => :'String',
        :'switch_management_ip' => :'CommonV10ConfigIPAddress',
        :'switch_mac_address' => :'String',
        :'attached_switch_interface_list' => :'Array<ClustermgmtV40ConfigNetworkSwitchInterface>',
        :'rx_ring_size_in_bytes' => :'Integer',
        :'tx_ring_size_in_bytes' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ext_id',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'CommonV10ResponseExternalizableAbstractModel'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixClustermgmt::ClustermgmtV40ConfigHostNic` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixClustermgmt::ClustermgmtV40ConfigHostNic`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tenant_id')
        self.tenant_id = attributes[:'tenant_id']
      end

      if attributes.key?(:'ext_id')
        self.ext_id = attributes[:'ext_id']
      end

      if attributes.key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'host_description')
        self.host_description = attributes[:'host_description']
      end

      if attributes.key?(:'mac_address')
        self.mac_address = attributes[:'mac_address']
      end

      if attributes.key?(:'ipv4_addresses')
        if (value = attributes[:'ipv4_addresses']).is_a?(Array)
          self.ipv4_addresses = value
        end
      end

      if attributes.key?(:'ipv6_addresses')
        if (value = attributes[:'ipv6_addresses']).is_a?(Array)
          self.ipv6_addresses = value
        end
      end

      if attributes.key?(:'interface_status')
        self.interface_status = attributes[:'interface_status']
      end

      if attributes.key?(:'is_dhcp_enabled')
        self.is_dhcp_enabled = attributes[:'is_dhcp_enabled']
      end

      if attributes.key?(:'link_speed_in_kbps')
        self.link_speed_in_kbps = attributes[:'link_speed_in_kbps']
      end

      if attributes.key?(:'mtu_in_bytes')
        self.mtu_in_bytes = attributes[:'mtu_in_bytes']
      end

      if attributes.key?(:'node_uuid')
        self.node_uuid = attributes[:'node_uuid']
      end

      if attributes.key?(:'discovery_protocol')
        self.discovery_protocol = attributes[:'discovery_protocol']
      end

      if attributes.key?(:'switch_device_id')
        self.switch_device_id = attributes[:'switch_device_id']
      end

      if attributes.key?(:'switch_port_id')
        self.switch_port_id = attributes[:'switch_port_id']
      end

      if attributes.key?(:'switch_vendor_info')
        self.switch_vendor_info = attributes[:'switch_vendor_info']
      end

      if attributes.key?(:'switch_vlan_id')
        self.switch_vlan_id = attributes[:'switch_vlan_id']
      end

      if attributes.key?(:'switch_management_ip')
        self.switch_management_ip = attributes[:'switch_management_ip']
      end

      if attributes.key?(:'switch_mac_address')
        self.switch_mac_address = attributes[:'switch_mac_address']
      end

      if attributes.key?(:'attached_switch_interface_list')
        if (value = attributes[:'attached_switch_interface_list']).is_a?(Array)
          self.attached_switch_interface_list = value
        end
      end

      if attributes.key?(:'rx_ring_size_in_bytes')
        self.rx_ring_size_in_bytes = attributes[:'rx_ring_size_in_bytes']
      end

      if attributes.key?(:'tx_ring_size_in_bytes')
        self.tx_ring_size_in_bytes = attributes[:'tx_ring_size_in_bytes']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@tenant_id.nil? && @tenant_id !~ pattern
        invalid_properties.push("invalid value for \"tenant_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@ext_id.nil? && @ext_id !~ pattern
        invalid_properties.push("invalid value for \"ext_id\", must conform to the pattern #{pattern}.")
      end

      if !@links.nil? && @links.length > 20
        invalid_properties.push('invalid value for "links", number of items must be less than or equal to 20.')
      end

      if !@links.nil? && @links.length < 0
        invalid_properties.push('invalid value for "links", number of items must be greater than or equal to 0.')
      end

      if !@name.nil? && @name.to_s.length > 64
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 64.')
      end

      pattern = Regexp.new(/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/)
      if !@mac_address.nil? && @mac_address !~ pattern
        invalid_properties.push("invalid value for \"mac_address\", must conform to the pattern #{pattern}.")
      end

      if !@ipv4_addresses.nil? && @ipv4_addresses.length > 1024
        invalid_properties.push('invalid value for "ipv4_addresses", number of items must be less than or equal to 1024.')
      end

      if !@ipv4_addresses.nil? && @ipv4_addresses.length < 0
        invalid_properties.push('invalid value for "ipv4_addresses", number of items must be greater than or equal to 0.')
      end

      if !@ipv6_addresses.nil? && @ipv6_addresses.length > 1024
        invalid_properties.push('invalid value for "ipv6_addresses", number of items must be less than or equal to 1024.')
      end

      if !@ipv6_addresses.nil? && @ipv6_addresses.length < 0
        invalid_properties.push('invalid value for "ipv6_addresses", number of items must be greater than or equal to 0.')
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@node_uuid.nil? && @node_uuid !~ pattern
        invalid_properties.push("invalid value for \"node_uuid\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/)
      if !@switch_mac_address.nil? && @switch_mac_address !~ pattern
        invalid_properties.push("invalid value for \"switch_mac_address\", must conform to the pattern #{pattern}.")
      end

      if !@attached_switch_interface_list.nil? && @attached_switch_interface_list.length > 1024
        invalid_properties.push('invalid value for "attached_switch_interface_list", number of items must be less than or equal to 1024.')
      end

      if !@attached_switch_interface_list.nil? && @attached_switch_interface_list.length < 0
        invalid_properties.push('invalid value for "attached_switch_interface_list", number of items must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@tenant_id.nil? && @tenant_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@ext_id.nil? && @ext_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@links.nil? && @links.length > 20
      return false if !@links.nil? && @links.length < 0
      return false if !@name.nil? && @name.to_s.length > 64
      return false if !@mac_address.nil? && @mac_address !~ Regexp.new(/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/)
      return false if !@ipv4_addresses.nil? && @ipv4_addresses.length > 1024
      return false if !@ipv4_addresses.nil? && @ipv4_addresses.length < 0
      return false if !@ipv6_addresses.nil? && @ipv6_addresses.length > 1024
      return false if !@ipv6_addresses.nil? && @ipv6_addresses.length < 0
      return false if !@node_uuid.nil? && @node_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@switch_mac_address.nil? && @switch_mac_address !~ Regexp.new(/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/)
      return false if !@attached_switch_interface_list.nil? && @attached_switch_interface_list.length > 1024
      return false if !@attached_switch_interface_list.nil? && @attached_switch_interface_list.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] tenant_id Value to be assigned
    def tenant_id=(tenant_id)
      if tenant_id.nil?
        fail ArgumentError, 'tenant_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if tenant_id !~ pattern
        fail ArgumentError, "invalid value for \"tenant_id\", must conform to the pattern #{pattern}."
      end

      @tenant_id = tenant_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ext_id Value to be assigned
    def ext_id=(ext_id)
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !ext_id.nil? && ext_id !~ pattern
        fail ArgumentError, "invalid value for \"ext_id\", must conform to the pattern #{pattern}."
      end

      @ext_id = ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] links Value to be assigned
    def links=(links)
      if links.nil?
        fail ArgumentError, 'links cannot be nil'
      end

      if links.length > 20
        fail ArgumentError, 'invalid value for "links", number of items must be less than or equal to 20.'
      end

      if links.length < 0
        fail ArgumentError, 'invalid value for "links", number of items must be greater than or equal to 0.'
      end

      @links = links
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 64
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 64.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] mac_address Value to be assigned
    def mac_address=(mac_address)
      if mac_address.nil?
        fail ArgumentError, 'mac_address cannot be nil'
      end

      pattern = Regexp.new(/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/)
      if mac_address !~ pattern
        fail ArgumentError, "invalid value for \"mac_address\", must conform to the pattern #{pattern}."
      end

      @mac_address = mac_address
    end

    # Custom attribute writer method with validation
    # @param [Object] ipv4_addresses Value to be assigned
    def ipv4_addresses=(ipv4_addresses)
      if ipv4_addresses.nil?
        fail ArgumentError, 'ipv4_addresses cannot be nil'
      end

      if ipv4_addresses.length > 1024
        fail ArgumentError, 'invalid value for "ipv4_addresses", number of items must be less than or equal to 1024.'
      end

      if ipv4_addresses.length < 0
        fail ArgumentError, 'invalid value for "ipv4_addresses", number of items must be greater than or equal to 0.'
      end

      @ipv4_addresses = ipv4_addresses
    end

    # Custom attribute writer method with validation
    # @param [Object] ipv6_addresses Value to be assigned
    def ipv6_addresses=(ipv6_addresses)
      if ipv6_addresses.nil?
        fail ArgumentError, 'ipv6_addresses cannot be nil'
      end

      if ipv6_addresses.length > 1024
        fail ArgumentError, 'invalid value for "ipv6_addresses", number of items must be less than or equal to 1024.'
      end

      if ipv6_addresses.length < 0
        fail ArgumentError, 'invalid value for "ipv6_addresses", number of items must be greater than or equal to 0.'
      end

      @ipv6_addresses = ipv6_addresses
    end

    # Custom attribute writer method with validation
    # @param [Object] node_uuid Value to be assigned
    def node_uuid=(node_uuid)
      if node_uuid.nil?
        fail ArgumentError, 'node_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if node_uuid !~ pattern
        fail ArgumentError, "invalid value for \"node_uuid\", must conform to the pattern #{pattern}."
      end

      @node_uuid = node_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] switch_mac_address Value to be assigned
    def switch_mac_address=(switch_mac_address)
      if switch_mac_address.nil?
        fail ArgumentError, 'switch_mac_address cannot be nil'
      end

      pattern = Regexp.new(/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/)
      if switch_mac_address !~ pattern
        fail ArgumentError, "invalid value for \"switch_mac_address\", must conform to the pattern #{pattern}."
      end

      @switch_mac_address = switch_mac_address
    end

    # Custom attribute writer method with validation
    # @param [Object] attached_switch_interface_list Value to be assigned
    def attached_switch_interface_list=(attached_switch_interface_list)
      if attached_switch_interface_list.nil?
        fail ArgumentError, 'attached_switch_interface_list cannot be nil'
      end

      if attached_switch_interface_list.length > 1024
        fail ArgumentError, 'invalid value for "attached_switch_interface_list", number of items must be less than or equal to 1024.'
      end

      if attached_switch_interface_list.length < 0
        fail ArgumentError, 'invalid value for "attached_switch_interface_list", number of items must be greater than or equal to 0.'
      end

      @attached_switch_interface_list = attached_switch_interface_list
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tenant_id == o.tenant_id &&
          ext_id == o.ext_id &&
          links == o.links &&
          name == o.name &&
          host_description == o.host_description &&
          mac_address == o.mac_address &&
          ipv4_addresses == o.ipv4_addresses &&
          ipv6_addresses == o.ipv6_addresses &&
          interface_status == o.interface_status &&
          is_dhcp_enabled == o.is_dhcp_enabled &&
          link_speed_in_kbps == o.link_speed_in_kbps &&
          mtu_in_bytes == o.mtu_in_bytes &&
          node_uuid == o.node_uuid &&
          discovery_protocol == o.discovery_protocol &&
          switch_device_id == o.switch_device_id &&
          switch_port_id == o.switch_port_id &&
          switch_vendor_info == o.switch_vendor_info &&
          switch_vlan_id == o.switch_vlan_id &&
          switch_management_ip == o.switch_management_ip &&
          switch_mac_address == o.switch_mac_address &&
          attached_switch_interface_list == o.attached_switch_interface_list &&
          rx_ring_size_in_bytes == o.rx_ring_size_in_bytes &&
          tx_ring_size_in_bytes == o.tx_ring_size_in_bytes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tenant_id, ext_id, links, name, host_description, mac_address, ipv4_addresses, ipv6_addresses, interface_status, is_dhcp_enabled, link_speed_in_kbps, mtu_in_bytes, node_uuid, discovery_protocol, switch_device_id, switch_port_id, switch_vendor_info, switch_vlan_id, switch_management_ip, switch_mac_address, attached_switch_interface_list, rx_ring_size_in_bytes, tx_ring_size_in_bytes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixClustermgmt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
