=begin
#Nutanix Cluster Management APIs

#Manage Hosts, Clusters and other Infrastructure.

The version of the OpenAPI document: 4.0.2

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module NutanixClustermgmt
  # Virtual GPU configuration details.
  class ClustermgmtV40ConfigVirtualGpuConfig
    attr_accessor :type

    # Device Id.
    attr_accessor :device_id

    # Device name.
    attr_accessor :device_name

    # Vendor name.
    attr_accessor :vendor_name

    # GPU in use.
    attr_accessor :is_in_use

    # SBDF address.
    attr_accessor :sbdf

    # NUMA node.
    attr_accessor :numa_node

    # GPU assignable.
    attr_accessor :assignable

    # GPU fraction.
    attr_accessor :fraction

    # Guest driver version.
    attr_accessor :guest_driver_version

    # GPU license list.
    attr_accessor :licenses

    # Number of virtual display heads.
    attr_accessor :number_of_virtual_display_heads

    # Frame buffer size in bytes.
    attr_accessor :frame_buffer_size_bytes

    # Maximum resolution per display heads.
    attr_accessor :max_resolution

    # Maximum instances allowed per VM.
    attr_accessor :max_instances_per_vm

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'device_id' => :'deviceId',
        :'device_name' => :'deviceName',
        :'vendor_name' => :'vendorName',
        :'is_in_use' => :'isInUse',
        :'sbdf' => :'sbdf',
        :'numa_node' => :'numaNode',
        :'assignable' => :'assignable',
        :'fraction' => :'fraction',
        :'guest_driver_version' => :'guestDriverVersion',
        :'licenses' => :'licenses',
        :'number_of_virtual_display_heads' => :'numberOfVirtualDisplayHeads',
        :'frame_buffer_size_bytes' => :'frameBufferSizeBytes',
        :'max_resolution' => :'maxResolution',
        :'max_instances_per_vm' => :'maxInstancesPerVm'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'type' => :'ClustermgmtV40ConfigGpuType',
        :'device_id' => :'Integer',
        :'device_name' => :'String',
        :'vendor_name' => :'String',
        :'is_in_use' => :'Boolean',
        :'sbdf' => :'String',
        :'numa_node' => :'String',
        :'assignable' => :'Integer',
        :'fraction' => :'Integer',
        :'guest_driver_version' => :'String',
        :'licenses' => :'Array<String>',
        :'number_of_virtual_display_heads' => :'Integer',
        :'frame_buffer_size_bytes' => :'Integer',
        :'max_resolution' => :'String',
        :'max_instances_per_vm' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixClustermgmt::ClustermgmtV40ConfigVirtualGpuConfig` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixClustermgmt::ClustermgmtV40ConfigVirtualGpuConfig`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'device_id')
        self.device_id = attributes[:'device_id']
      end

      if attributes.key?(:'device_name')
        self.device_name = attributes[:'device_name']
      end

      if attributes.key?(:'vendor_name')
        self.vendor_name = attributes[:'vendor_name']
      end

      if attributes.key?(:'is_in_use')
        self.is_in_use = attributes[:'is_in_use']
      end

      if attributes.key?(:'sbdf')
        self.sbdf = attributes[:'sbdf']
      end

      if attributes.key?(:'numa_node')
        self.numa_node = attributes[:'numa_node']
      end

      if attributes.key?(:'assignable')
        self.assignable = attributes[:'assignable']
      end

      if attributes.key?(:'fraction')
        self.fraction = attributes[:'fraction']
      end

      if attributes.key?(:'guest_driver_version')
        self.guest_driver_version = attributes[:'guest_driver_version']
      end

      if attributes.key?(:'licenses')
        if (value = attributes[:'licenses']).is_a?(Array)
          self.licenses = value
        end
      end

      if attributes.key?(:'number_of_virtual_display_heads')
        self.number_of_virtual_display_heads = attributes[:'number_of_virtual_display_heads']
      end

      if attributes.key?(:'frame_buffer_size_bytes')
        self.frame_buffer_size_bytes = attributes[:'frame_buffer_size_bytes']
      end

      if attributes.key?(:'max_resolution')
        self.max_resolution = attributes[:'max_resolution']
      end

      if attributes.key?(:'max_instances_per_vm')
        self.max_instances_per_vm = attributes[:'max_instances_per_vm']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@vendor_name.nil? && @vendor_name.to_s.length > 128
        invalid_properties.push('invalid value for "vendor_name", the character length must be smaller than or equal to 128.')
      end

      if !@vendor_name.nil? && @vendor_name.to_s.length < 0
        invalid_properties.push('invalid value for "vendor_name", the character length must be great than or equal to 0.')
      end

      if !@licenses.nil? && @licenses.length > 1024
        invalid_properties.push('invalid value for "licenses", number of items must be less than or equal to 1024.')
      end

      if !@licenses.nil? && @licenses.length < 0
        invalid_properties.push('invalid value for "licenses", number of items must be greater than or equal to 0.')
      end

      if !@max_resolution.nil? && @max_resolution.to_s.length > 16
        invalid_properties.push('invalid value for "max_resolution", the character length must be smaller than or equal to 16.')
      end

      if !@max_resolution.nil? && @max_resolution.to_s.length < 0
        invalid_properties.push('invalid value for "max_resolution", the character length must be great than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@vendor_name.nil? && @vendor_name.to_s.length > 128
      return false if !@vendor_name.nil? && @vendor_name.to_s.length < 0
      return false if !@licenses.nil? && @licenses.length > 1024
      return false if !@licenses.nil? && @licenses.length < 0
      return false if !@max_resolution.nil? && @max_resolution.to_s.length > 16
      return false if !@max_resolution.nil? && @max_resolution.to_s.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] vendor_name Value to be assigned
    def vendor_name=(vendor_name)
      if vendor_name.nil?
        fail ArgumentError, 'vendor_name cannot be nil'
      end

      if vendor_name.to_s.length > 128
        fail ArgumentError, 'invalid value for "vendor_name", the character length must be smaller than or equal to 128.'
      end

      if vendor_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "vendor_name", the character length must be great than or equal to 0.'
      end

      @vendor_name = vendor_name
    end

    # Custom attribute writer method with validation
    # @param [Object] licenses Value to be assigned
    def licenses=(licenses)
      if licenses.nil?
        fail ArgumentError, 'licenses cannot be nil'
      end

      if licenses.length > 1024
        fail ArgumentError, 'invalid value for "licenses", number of items must be less than or equal to 1024.'
      end

      if licenses.length < 0
        fail ArgumentError, 'invalid value for "licenses", number of items must be greater than or equal to 0.'
      end

      @licenses = licenses
    end

    # Custom attribute writer method with validation
    # @param [Object] max_resolution Value to be assigned
    def max_resolution=(max_resolution)
      if max_resolution.nil?
        fail ArgumentError, 'max_resolution cannot be nil'
      end

      if max_resolution.to_s.length > 16
        fail ArgumentError, 'invalid value for "max_resolution", the character length must be smaller than or equal to 16.'
      end

      if max_resolution.to_s.length < 0
        fail ArgumentError, 'invalid value for "max_resolution", the character length must be great than or equal to 0.'
      end

      @max_resolution = max_resolution
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          device_id == o.device_id &&
          device_name == o.device_name &&
          vendor_name == o.vendor_name &&
          is_in_use == o.is_in_use &&
          sbdf == o.sbdf &&
          numa_node == o.numa_node &&
          assignable == o.assignable &&
          fraction == o.fraction &&
          guest_driver_version == o.guest_driver_version &&
          licenses == o.licenses &&
          number_of_virtual_display_heads == o.number_of_virtual_display_heads &&
          frame_buffer_size_bytes == o.frame_buffer_size_bytes &&
          max_resolution == o.max_resolution &&
          max_instances_per_vm == o.max_instances_per_vm
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, device_id, device_name, vendor_name, is_in_use, sbdf, numa_node, assignable, fraction, guest_driver_version, licenses, number_of_virtual_display_heads, frame_buffer_size_bytes, max_resolution, max_instances_per_vm].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixClustermgmt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
