=begin
#Nutanix Cluster Management APIs

#Manage Hosts, Clusters and other Infrastructure.

The version of the OpenAPI document: 4.0.2

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module NutanixClustermgmt
  # Parameters of the node to be added.
  class ClustermgmtV40ConfigNodeParam
    # Block list of a cluster.
    attr_accessor :block_list

    # List of nodes in a cluster.
    attr_accessor :node_list

    # List of compute only nodes.
    attr_accessor :compute_node_list

    # Hypervisor type to md5sum map.
    attr_accessor :hypervisor_isos

    # Hyperv SKU.
    attr_accessor :hyperv_sku

    attr_accessor :bundle_info

    # Indicates if the host networking needs to be skipped or not.
    attr_accessor :should_skip_host_networking

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'block_list' => :'blockList',
        :'node_list' => :'nodeList',
        :'compute_node_list' => :'computeNodeList',
        :'hypervisor_isos' => :'hypervisorIsos',
        :'hyperv_sku' => :'hypervSku',
        :'bundle_info' => :'bundleInfo',
        :'should_skip_host_networking' => :'shouldSkipHostNetworking'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'block_list' => :'Array<ClustermgmtV40ConfigBlockItem>',
        :'node_list' => :'Array<ClustermgmtV40ConfigNodeItem>',
        :'compute_node_list' => :'Array<ClustermgmtV40ConfigComputeNodeItem>',
        :'hypervisor_isos' => :'Array<ClustermgmtV40ConfigHypervisorIsoMap>',
        :'hyperv_sku' => :'String',
        :'bundle_info' => :'ClustermgmtV40ConfigBundleInfo',
        :'should_skip_host_networking' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixClustermgmt::ClustermgmtV40ConfigNodeParam` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixClustermgmt::ClustermgmtV40ConfigNodeParam`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'block_list')
        if (value = attributes[:'block_list']).is_a?(Array)
          self.block_list = value
        end
      end

      if attributes.key?(:'node_list')
        if (value = attributes[:'node_list']).is_a?(Array)
          self.node_list = value
        end
      end

      if attributes.key?(:'compute_node_list')
        if (value = attributes[:'compute_node_list']).is_a?(Array)
          self.compute_node_list = value
        end
      end

      if attributes.key?(:'hypervisor_isos')
        if (value = attributes[:'hypervisor_isos']).is_a?(Array)
          self.hypervisor_isos = value
        end
      end

      if attributes.key?(:'hyperv_sku')
        self.hyperv_sku = attributes[:'hyperv_sku']
      end

      if attributes.key?(:'bundle_info')
        self.bundle_info = attributes[:'bundle_info']
      end

      if attributes.key?(:'should_skip_host_networking')
        self.should_skip_host_networking = attributes[:'should_skip_host_networking']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@block_list.nil? && @block_list.length > 1024
        invalid_properties.push('invalid value for "block_list", number of items must be less than or equal to 1024.')
      end

      if !@block_list.nil? && @block_list.length < 0
        invalid_properties.push('invalid value for "block_list", number of items must be greater than or equal to 0.')
      end

      if !@node_list.nil? && @node_list.length > 1024
        invalid_properties.push('invalid value for "node_list", number of items must be less than or equal to 1024.')
      end

      if !@node_list.nil? && @node_list.length < 0
        invalid_properties.push('invalid value for "node_list", number of items must be greater than or equal to 0.')
      end

      if !@compute_node_list.nil? && @compute_node_list.length > 1024
        invalid_properties.push('invalid value for "compute_node_list", number of items must be less than or equal to 1024.')
      end

      if !@compute_node_list.nil? && @compute_node_list.length < 0
        invalid_properties.push('invalid value for "compute_node_list", number of items must be greater than or equal to 0.')
      end

      if !@hypervisor_isos.nil? && @hypervisor_isos.length > 1024
        invalid_properties.push('invalid value for "hypervisor_isos", number of items must be less than or equal to 1024.')
      end

      if !@hypervisor_isos.nil? && @hypervisor_isos.length < 0
        invalid_properties.push('invalid value for "hypervisor_isos", number of items must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@block_list.nil? && @block_list.length > 1024
      return false if !@block_list.nil? && @block_list.length < 0
      return false if !@node_list.nil? && @node_list.length > 1024
      return false if !@node_list.nil? && @node_list.length < 0
      return false if !@compute_node_list.nil? && @compute_node_list.length > 1024
      return false if !@compute_node_list.nil? && @compute_node_list.length < 0
      return false if !@hypervisor_isos.nil? && @hypervisor_isos.length > 1024
      return false if !@hypervisor_isos.nil? && @hypervisor_isos.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] block_list Value to be assigned
    def block_list=(block_list)
      if block_list.nil?
        fail ArgumentError, 'block_list cannot be nil'
      end

      if block_list.length > 1024
        fail ArgumentError, 'invalid value for "block_list", number of items must be less than or equal to 1024.'
      end

      if block_list.length < 0
        fail ArgumentError, 'invalid value for "block_list", number of items must be greater than or equal to 0.'
      end

      @block_list = block_list
    end

    # Custom attribute writer method with validation
    # @param [Object] node_list Value to be assigned
    def node_list=(node_list)
      if node_list.nil?
        fail ArgumentError, 'node_list cannot be nil'
      end

      if node_list.length > 1024
        fail ArgumentError, 'invalid value for "node_list", number of items must be less than or equal to 1024.'
      end

      if node_list.length < 0
        fail ArgumentError, 'invalid value for "node_list", number of items must be greater than or equal to 0.'
      end

      @node_list = node_list
    end

    # Custom attribute writer method with validation
    # @param [Object] compute_node_list Value to be assigned
    def compute_node_list=(compute_node_list)
      if compute_node_list.nil?
        fail ArgumentError, 'compute_node_list cannot be nil'
      end

      if compute_node_list.length > 1024
        fail ArgumentError, 'invalid value for "compute_node_list", number of items must be less than or equal to 1024.'
      end

      if compute_node_list.length < 0
        fail ArgumentError, 'invalid value for "compute_node_list", number of items must be greater than or equal to 0.'
      end

      @compute_node_list = compute_node_list
    end

    # Custom attribute writer method with validation
    # @param [Object] hypervisor_isos Value to be assigned
    def hypervisor_isos=(hypervisor_isos)
      if hypervisor_isos.nil?
        fail ArgumentError, 'hypervisor_isos cannot be nil'
      end

      if hypervisor_isos.length > 1024
        fail ArgumentError, 'invalid value for "hypervisor_isos", number of items must be less than or equal to 1024.'
      end

      if hypervisor_isos.length < 0
        fail ArgumentError, 'invalid value for "hypervisor_isos", number of items must be greater than or equal to 0.'
      end

      @hypervisor_isos = hypervisor_isos
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          block_list == o.block_list &&
          node_list == o.node_list &&
          compute_node_list == o.compute_node_list &&
          hypervisor_isos == o.hypervisor_isos &&
          hyperv_sku == o.hyperv_sku &&
          bundle_info == o.bundle_info &&
          should_skip_host_networking == o.should_skip_host_networking
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [block_list, node_list, compute_node_list, hypervisor_isos, hyperv_sku, bundle_info, should_skip_host_networking].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixClustermgmt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
