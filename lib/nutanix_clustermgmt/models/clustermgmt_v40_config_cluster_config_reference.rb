=begin
#Nutanix Cluster Management APIs

#Manage Hosts, Clusters and other Infrastructure.

The version of the OpenAPI document: 4.0.2

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module NutanixClustermgmt
  # Cluster configuration details.
  class ClustermgmtV40ConfigClusterConfigReference
    # Cluster incarnation Id. This is part of payload for cluster update operation only.
    attr_accessor :incarnation_id

    attr_accessor :build_info

    # Hypervisor type.
    attr_accessor :hypervisor_types

    # Cluster function. This is part of payload for cluster create operation only (allowed enum values for creation are AOS, ONE_NODE & TWO_NODE only).
    attr_accessor :cluster_function

    # Time zone on a cluster.
    attr_accessor :timezone

    # Public ssh key details. This is part of payload for cluster update operation only.
    attr_accessor :authorized_public_key_list

    # Redundancy factor of a cluster. This is part of payload for both cluster create & update operations.
    attr_accessor :redundancy_factor

    # Cluster software version details.
    attr_accessor :cluster_software_map

    attr_accessor :cluster_arch

    attr_accessor :fault_tolerance_state

    # Remote support status.
    attr_accessor :is_remote_support_enabled

    attr_accessor :operation_mode

    # Indicates whether the release is categorized as Long-term or not.
    attr_accessor :is_lts

    # Indicates whether the password ssh into the cluster is enabled or not.
    attr_accessor :is_password_remote_login_enabled

    attr_accessor :encryption_in_transit_status

    # Encryption option.
    attr_accessor :encryption_option

    # Encryption scope.
    attr_accessor :encryption_scope

    attr_accessor :pulse_status

    # Indicates if cluster is available to contact or not.
    attr_accessor :is_available

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'incarnation_id' => :'incarnationId',
        :'build_info' => :'buildInfo',
        :'hypervisor_types' => :'hypervisorTypes',
        :'cluster_function' => :'clusterFunction',
        :'timezone' => :'timezone',
        :'authorized_public_key_list' => :'authorizedPublicKeyList',
        :'redundancy_factor' => :'redundancyFactor',
        :'cluster_software_map' => :'clusterSoftwareMap',
        :'cluster_arch' => :'clusterArch',
        :'fault_tolerance_state' => :'faultToleranceState',
        :'is_remote_support_enabled' => :'isRemoteSupportEnabled',
        :'operation_mode' => :'operationMode',
        :'is_lts' => :'isLts',
        :'is_password_remote_login_enabled' => :'isPasswordRemoteLoginEnabled',
        :'encryption_in_transit_status' => :'encryptionInTransitStatus',
        :'encryption_option' => :'encryptionOption',
        :'encryption_scope' => :'encryptionScope',
        :'pulse_status' => :'pulseStatus',
        :'is_available' => :'isAvailable'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'incarnation_id' => :'Integer',
        :'build_info' => :'ClustermgmtV40ConfigBuildReference',
        :'hypervisor_types' => :'Array<ClustermgmtV40ConfigHypervisorType>',
        :'cluster_function' => :'Array<ClustermgmtV40ConfigClusterFunctionRef>',
        :'timezone' => :'String',
        :'authorized_public_key_list' => :'Array<ClustermgmtV40ConfigPublicKey>',
        :'redundancy_factor' => :'Integer',
        :'cluster_software_map' => :'Array<ClustermgmtV40ConfigSoftwareMapReference>',
        :'cluster_arch' => :'ClustermgmtV40ConfigClusterArchReference',
        :'fault_tolerance_state' => :'ClustermgmtV40ConfigFaultToleranceState',
        :'is_remote_support_enabled' => :'Boolean',
        :'operation_mode' => :'ClustermgmtV40ConfigOperationMode',
        :'is_lts' => :'Boolean',
        :'is_password_remote_login_enabled' => :'Boolean',
        :'encryption_in_transit_status' => :'ClustermgmtV40ConfigEncryptionStatus',
        :'encryption_option' => :'Array<ClustermgmtV40ConfigEncryptionOptionInfo>',
        :'encryption_scope' => :'Array<ClustermgmtV40ConfigEncryptionScopeInfo>',
        :'pulse_status' => :'ClustermgmtV40ConfigPulseStatus',
        :'is_available' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixClustermgmt::ClustermgmtV40ConfigClusterConfigReference` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixClustermgmt::ClustermgmtV40ConfigClusterConfigReference`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'incarnation_id')
        self.incarnation_id = attributes[:'incarnation_id']
      end

      if attributes.key?(:'build_info')
        self.build_info = attributes[:'build_info']
      end

      if attributes.key?(:'hypervisor_types')
        if (value = attributes[:'hypervisor_types']).is_a?(Array)
          self.hypervisor_types = value
        end
      end

      if attributes.key?(:'cluster_function')
        if (value = attributes[:'cluster_function']).is_a?(Array)
          self.cluster_function = value
        end
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.key?(:'authorized_public_key_list')
        if (value = attributes[:'authorized_public_key_list']).is_a?(Array)
          self.authorized_public_key_list = value
        end
      end

      if attributes.key?(:'redundancy_factor')
        self.redundancy_factor = attributes[:'redundancy_factor']
      end

      if attributes.key?(:'cluster_software_map')
        if (value = attributes[:'cluster_software_map']).is_a?(Array)
          self.cluster_software_map = value
        end
      end

      if attributes.key?(:'cluster_arch')
        self.cluster_arch = attributes[:'cluster_arch']
      end

      if attributes.key?(:'fault_tolerance_state')
        self.fault_tolerance_state = attributes[:'fault_tolerance_state']
      end

      if attributes.key?(:'is_remote_support_enabled')
        self.is_remote_support_enabled = attributes[:'is_remote_support_enabled']
      end

      if attributes.key?(:'operation_mode')
        self.operation_mode = attributes[:'operation_mode']
      end

      if attributes.key?(:'is_lts')
        self.is_lts = attributes[:'is_lts']
      end

      if attributes.key?(:'is_password_remote_login_enabled')
        self.is_password_remote_login_enabled = attributes[:'is_password_remote_login_enabled']
      end

      if attributes.key?(:'encryption_in_transit_status')
        self.encryption_in_transit_status = attributes[:'encryption_in_transit_status']
      end

      if attributes.key?(:'encryption_option')
        if (value = attributes[:'encryption_option']).is_a?(Array)
          self.encryption_option = value
        end
      end

      if attributes.key?(:'encryption_scope')
        if (value = attributes[:'encryption_scope']).is_a?(Array)
          self.encryption_scope = value
        end
      end

      if attributes.key?(:'pulse_status')
        self.pulse_status = attributes[:'pulse_status']
      end

      if attributes.key?(:'is_available')
        self.is_available = attributes[:'is_available']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@hypervisor_types.nil? && @hypervisor_types.length > 5
        invalid_properties.push('invalid value for "hypervisor_types", number of items must be less than or equal to 5.')
      end

      if !@hypervisor_types.nil? && @hypervisor_types.length < 0
        invalid_properties.push('invalid value for "hypervisor_types", number of items must be greater than or equal to 0.')
      end

      if !@cluster_function.nil? && @cluster_function.length > 7
        invalid_properties.push('invalid value for "cluster_function", number of items must be less than or equal to 7.')
      end

      if !@cluster_function.nil? && @cluster_function.length < 0
        invalid_properties.push('invalid value for "cluster_function", number of items must be greater than or equal to 0.')
      end

      if !@authorized_public_key_list.nil? && @authorized_public_key_list.length > 1024
        invalid_properties.push('invalid value for "authorized_public_key_list", number of items must be less than or equal to 1024.')
      end

      if !@authorized_public_key_list.nil? && @authorized_public_key_list.length < 0
        invalid_properties.push('invalid value for "authorized_public_key_list", number of items must be greater than or equal to 0.')
      end

      if !@cluster_software_map.nil? && @cluster_software_map.length > 3
        invalid_properties.push('invalid value for "cluster_software_map", number of items must be less than or equal to 3.')
      end

      if !@cluster_software_map.nil? && @cluster_software_map.length < 0
        invalid_properties.push('invalid value for "cluster_software_map", number of items must be greater than or equal to 0.')
      end

      if !@encryption_option.nil? && @encryption_option.length > 3
        invalid_properties.push('invalid value for "encryption_option", number of items must be less than or equal to 3.')
      end

      if !@encryption_option.nil? && @encryption_option.length < 0
        invalid_properties.push('invalid value for "encryption_option", number of items must be greater than or equal to 0.')
      end

      if !@encryption_scope.nil? && @encryption_scope.length > 2
        invalid_properties.push('invalid value for "encryption_scope", number of items must be less than or equal to 2.')
      end

      if !@encryption_scope.nil? && @encryption_scope.length < 0
        invalid_properties.push('invalid value for "encryption_scope", number of items must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@hypervisor_types.nil? && @hypervisor_types.length > 5
      return false if !@hypervisor_types.nil? && @hypervisor_types.length < 0
      return false if !@cluster_function.nil? && @cluster_function.length > 7
      return false if !@cluster_function.nil? && @cluster_function.length < 0
      return false if !@authorized_public_key_list.nil? && @authorized_public_key_list.length > 1024
      return false if !@authorized_public_key_list.nil? && @authorized_public_key_list.length < 0
      return false if !@cluster_software_map.nil? && @cluster_software_map.length > 3
      return false if !@cluster_software_map.nil? && @cluster_software_map.length < 0
      return false if !@encryption_option.nil? && @encryption_option.length > 3
      return false if !@encryption_option.nil? && @encryption_option.length < 0
      return false if !@encryption_scope.nil? && @encryption_scope.length > 2
      return false if !@encryption_scope.nil? && @encryption_scope.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] hypervisor_types Value to be assigned
    def hypervisor_types=(hypervisor_types)
      if hypervisor_types.nil?
        fail ArgumentError, 'hypervisor_types cannot be nil'
      end

      if hypervisor_types.length > 5
        fail ArgumentError, 'invalid value for "hypervisor_types", number of items must be less than or equal to 5.'
      end

      if hypervisor_types.length < 0
        fail ArgumentError, 'invalid value for "hypervisor_types", number of items must be greater than or equal to 0.'
      end

      @hypervisor_types = hypervisor_types
    end

    # Custom attribute writer method with validation
    # @param [Object] cluster_function Value to be assigned
    def cluster_function=(cluster_function)
      if cluster_function.nil?
        fail ArgumentError, 'cluster_function cannot be nil'
      end

      if cluster_function.length > 7
        fail ArgumentError, 'invalid value for "cluster_function", number of items must be less than or equal to 7.'
      end

      if cluster_function.length < 0
        fail ArgumentError, 'invalid value for "cluster_function", number of items must be greater than or equal to 0.'
      end

      @cluster_function = cluster_function
    end

    # Custom attribute writer method with validation
    # @param [Object] authorized_public_key_list Value to be assigned
    def authorized_public_key_list=(authorized_public_key_list)
      if authorized_public_key_list.nil?
        fail ArgumentError, 'authorized_public_key_list cannot be nil'
      end

      if authorized_public_key_list.length > 1024
        fail ArgumentError, 'invalid value for "authorized_public_key_list", number of items must be less than or equal to 1024.'
      end

      if authorized_public_key_list.length < 0
        fail ArgumentError, 'invalid value for "authorized_public_key_list", number of items must be greater than or equal to 0.'
      end

      @authorized_public_key_list = authorized_public_key_list
    end

    # Custom attribute writer method with validation
    # @param [Object] cluster_software_map Value to be assigned
    def cluster_software_map=(cluster_software_map)
      if cluster_software_map.nil?
        fail ArgumentError, 'cluster_software_map cannot be nil'
      end

      if cluster_software_map.length > 3
        fail ArgumentError, 'invalid value for "cluster_software_map", number of items must be less than or equal to 3.'
      end

      if cluster_software_map.length < 0
        fail ArgumentError, 'invalid value for "cluster_software_map", number of items must be greater than or equal to 0.'
      end

      @cluster_software_map = cluster_software_map
    end

    # Custom attribute writer method with validation
    # @param [Object] encryption_option Value to be assigned
    def encryption_option=(encryption_option)
      if encryption_option.nil?
        fail ArgumentError, 'encryption_option cannot be nil'
      end

      if encryption_option.length > 3
        fail ArgumentError, 'invalid value for "encryption_option", number of items must be less than or equal to 3.'
      end

      if encryption_option.length < 0
        fail ArgumentError, 'invalid value for "encryption_option", number of items must be greater than or equal to 0.'
      end

      @encryption_option = encryption_option
    end

    # Custom attribute writer method with validation
    # @param [Object] encryption_scope Value to be assigned
    def encryption_scope=(encryption_scope)
      if encryption_scope.nil?
        fail ArgumentError, 'encryption_scope cannot be nil'
      end

      if encryption_scope.length > 2
        fail ArgumentError, 'invalid value for "encryption_scope", number of items must be less than or equal to 2.'
      end

      if encryption_scope.length < 0
        fail ArgumentError, 'invalid value for "encryption_scope", number of items must be greater than or equal to 0.'
      end

      @encryption_scope = encryption_scope
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          incarnation_id == o.incarnation_id &&
          build_info == o.build_info &&
          hypervisor_types == o.hypervisor_types &&
          cluster_function == o.cluster_function &&
          timezone == o.timezone &&
          authorized_public_key_list == o.authorized_public_key_list &&
          redundancy_factor == o.redundancy_factor &&
          cluster_software_map == o.cluster_software_map &&
          cluster_arch == o.cluster_arch &&
          fault_tolerance_state == o.fault_tolerance_state &&
          is_remote_support_enabled == o.is_remote_support_enabled &&
          operation_mode == o.operation_mode &&
          is_lts == o.is_lts &&
          is_password_remote_login_enabled == o.is_password_remote_login_enabled &&
          encryption_in_transit_status == o.encryption_in_transit_status &&
          encryption_option == o.encryption_option &&
          encryption_scope == o.encryption_scope &&
          pulse_status == o.pulse_status &&
          is_available == o.is_available
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [incarnation_id, build_info, hypervisor_types, cluster_function, timezone, authorized_public_key_list, redundancy_factor, cluster_software_map, cluster_arch, fault_tolerance_state, is_remote_support_enabled, operation_mode, is_lts, is_password_remote_login_enabled, encryption_in_transit_status, encryption_option, encryption_scope, pulse_status, is_available].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixClustermgmt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
