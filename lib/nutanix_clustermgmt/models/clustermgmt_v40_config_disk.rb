=begin
#Nutanix Cluster Management APIs

#Manage Hosts, Clusters and other Infrastructure.

The version of the OpenAPI document: 4.0.2

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module NutanixClustermgmt
  # A model that represents the Disk resources.
  class ClustermgmtV40ConfigDisk
    # A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    attr_accessor :tenant_id

    # A globally unique identifier of an instance that is suitable for external consumption. 
    attr_accessor :ext_id

    # A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    attr_accessor :links

    # Cluster name of the Disk it belongs to.
    attr_accessor :cluster_name

    # The external identifier of the cluster on which Disk will be added.
    attr_accessor :cluster_ext_id

    attr_accessor :status

    attr_accessor :storage_tier

    # The external identifier of a storage pool.
    attr_accessor :storage_pool_ext_id

    # The service VM ID of the node.
    attr_accessor :service_vmid

    # The external identifier of the node.
    attr_accessor :node_ext_id

    attr_accessor :cvm_ip_address

    attr_accessor :node_ip_address

    # Represents the mount path of the Disk.
    attr_accessor :mount_path

    # Indicates the location of the Disk in a node.
    attr_accessor :location

    # Represents the Disk serial number.
    attr_accessor :serial_number

    # Size of the Disk in bytes.
    attr_accessor :disk_size_bytes

    # Physical capacity of the Disk in bytes.
    attr_accessor :physical_capacity_bytes

    # Represents the Disk model.
    attr_accessor :model

    # Represents the Disk vendor.
    attr_accessor :vendor

    # Indicates the PCIe path of NVMe devices.
    attr_accessor :nvme_pcie_path

    # Represents the current firmware version.
    attr_accessor :firmware_version

    # Represents the target firmware version.
    attr_accessor :target_firmware_version

    # Host name of the Disk to which it belongs.
    attr_accessor :host_name

    attr_accessor :disk_advance_config

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tenant_id' => :'tenantId',
        :'ext_id' => :'extId',
        :'links' => :'links',
        :'cluster_name' => :'clusterName',
        :'cluster_ext_id' => :'clusterExtId',
        :'status' => :'status',
        :'storage_tier' => :'storageTier',
        :'storage_pool_ext_id' => :'storagePoolExtId',
        :'service_vmid' => :'serviceVMId',
        :'node_ext_id' => :'nodeExtId',
        :'cvm_ip_address' => :'cvmIpAddress',
        :'node_ip_address' => :'nodeIpAddress',
        :'mount_path' => :'mountPath',
        :'location' => :'location',
        :'serial_number' => :'serialNumber',
        :'disk_size_bytes' => :'diskSizeBytes',
        :'physical_capacity_bytes' => :'physicalCapacityBytes',
        :'model' => :'model',
        :'vendor' => :'vendor',
        :'nvme_pcie_path' => :'nvmePciePath',
        :'firmware_version' => :'firmwareVersion',
        :'target_firmware_version' => :'targetFirmwareVersion',
        :'host_name' => :'hostName',
        :'disk_advance_config' => :'diskAdvanceConfig'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tenant_id' => :'String',
        :'ext_id' => :'String',
        :'links' => :'Array<CommonV10ResponseApiLink>',
        :'cluster_name' => :'String',
        :'cluster_ext_id' => :'String',
        :'status' => :'ClustermgmtV40ConfigDiskStatus',
        :'storage_tier' => :'ClustermgmtV40ConfigStorageTier',
        :'storage_pool_ext_id' => :'String',
        :'service_vmid' => :'String',
        :'node_ext_id' => :'String',
        :'cvm_ip_address' => :'CommonV10ConfigIPAddress',
        :'node_ip_address' => :'CommonV10ConfigIPAddress',
        :'mount_path' => :'String',
        :'location' => :'Integer',
        :'serial_number' => :'String',
        :'disk_size_bytes' => :'Integer',
        :'physical_capacity_bytes' => :'Integer',
        :'model' => :'String',
        :'vendor' => :'String',
        :'nvme_pcie_path' => :'String',
        :'firmware_version' => :'String',
        :'target_firmware_version' => :'String',
        :'host_name' => :'String',
        :'disk_advance_config' => :'ClustermgmtV40ConfigDiskAdvanceConfig'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ext_id',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'CommonV10ResponseExternalizableAbstractModel'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixClustermgmt::ClustermgmtV40ConfigDisk` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixClustermgmt::ClustermgmtV40ConfigDisk`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tenant_id')
        self.tenant_id = attributes[:'tenant_id']
      end

      if attributes.key?(:'ext_id')
        self.ext_id = attributes[:'ext_id']
      end

      if attributes.key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.key?(:'cluster_name')
        self.cluster_name = attributes[:'cluster_name']
      end

      if attributes.key?(:'cluster_ext_id')
        self.cluster_ext_id = attributes[:'cluster_ext_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'storage_tier')
        self.storage_tier = attributes[:'storage_tier']
      end

      if attributes.key?(:'storage_pool_ext_id')
        self.storage_pool_ext_id = attributes[:'storage_pool_ext_id']
      end

      if attributes.key?(:'service_vmid')
        self.service_vmid = attributes[:'service_vmid']
      end

      if attributes.key?(:'node_ext_id')
        self.node_ext_id = attributes[:'node_ext_id']
      end

      if attributes.key?(:'cvm_ip_address')
        self.cvm_ip_address = attributes[:'cvm_ip_address']
      end

      if attributes.key?(:'node_ip_address')
        self.node_ip_address = attributes[:'node_ip_address']
      end

      if attributes.key?(:'mount_path')
        self.mount_path = attributes[:'mount_path']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'serial_number')
        self.serial_number = attributes[:'serial_number']
      end

      if attributes.key?(:'disk_size_bytes')
        self.disk_size_bytes = attributes[:'disk_size_bytes']
      end

      if attributes.key?(:'physical_capacity_bytes')
        self.physical_capacity_bytes = attributes[:'physical_capacity_bytes']
      end

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.key?(:'vendor')
        self.vendor = attributes[:'vendor']
      end

      if attributes.key?(:'nvme_pcie_path')
        self.nvme_pcie_path = attributes[:'nvme_pcie_path']
      end

      if attributes.key?(:'firmware_version')
        self.firmware_version = attributes[:'firmware_version']
      end

      if attributes.key?(:'target_firmware_version')
        self.target_firmware_version = attributes[:'target_firmware_version']
      end

      if attributes.key?(:'host_name')
        self.host_name = attributes[:'host_name']
      end

      if attributes.key?(:'disk_advance_config')
        self.disk_advance_config = attributes[:'disk_advance_config']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@tenant_id.nil? && @tenant_id !~ pattern
        invalid_properties.push("invalid value for \"tenant_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@ext_id.nil? && @ext_id !~ pattern
        invalid_properties.push("invalid value for \"ext_id\", must conform to the pattern #{pattern}.")
      end

      if !@links.nil? && @links.length > 20
        invalid_properties.push('invalid value for "links", number of items must be less than or equal to 20.')
      end

      if !@links.nil? && @links.length < 0
        invalid_properties.push('invalid value for "links", number of items must be greater than or equal to 0.')
      end

      if !@cluster_name.nil? && @cluster_name.to_s.length > 256
        invalid_properties.push('invalid value for "cluster_name", the character length must be smaller than or equal to 256.')
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@cluster_ext_id.nil? && @cluster_ext_id !~ pattern
        invalid_properties.push("invalid value for \"cluster_ext_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@storage_pool_ext_id.nil? && @storage_pool_ext_id !~ pattern
        invalid_properties.push("invalid value for \"storage_pool_ext_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}::[0-9]{1,}$/)
      if !@service_vmid.nil? && @service_vmid !~ pattern
        invalid_properties.push("invalid value for \"service_vmid\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@node_ext_id.nil? && @node_ext_id !~ pattern
        invalid_properties.push("invalid value for \"node_ext_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\/home\/nutanix\/data\/stargate-storage\/disks\/[A-Z0-9]{8}$/)
      if !@mount_path.nil? && @mount_path !~ pattern
        invalid_properties.push("invalid value for \"mount_path\", must conform to the pattern #{pattern}.")
      end

      if !@serial_number.nil? && @serial_number.to_s.length > 256
        invalid_properties.push('invalid value for "serial_number", the character length must be smaller than or equal to 256.')
      end

      if !@disk_size_bytes.nil? && @disk_size_bytes < 524288
        invalid_properties.push('invalid value for "disk_size_bytes", must be greater than or equal to 524288.')
      end

      if !@physical_capacity_bytes.nil? && @physical_capacity_bytes < 524288
        invalid_properties.push('invalid value for "physical_capacity_bytes", must be greater than or equal to 524288.')
      end

      if !@model.nil? && @model.to_s.length > 256
        invalid_properties.push('invalid value for "model", the character length must be smaller than or equal to 256.')
      end

      if !@vendor.nil? && @vendor.to_s.length > 256
        invalid_properties.push('invalid value for "vendor", the character length must be smaller than or equal to 256.')
      end

      if !@firmware_version.nil? && @firmware_version.to_s.length > 256
        invalid_properties.push('invalid value for "firmware_version", the character length must be smaller than or equal to 256.')
      end

      if !@target_firmware_version.nil? && @target_firmware_version.to_s.length > 256
        invalid_properties.push('invalid value for "target_firmware_version", the character length must be smaller than or equal to 256.')
      end

      if !@host_name.nil? && @host_name.to_s.length > 256
        invalid_properties.push('invalid value for "host_name", the character length must be smaller than or equal to 256.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@tenant_id.nil? && @tenant_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@ext_id.nil? && @ext_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@links.nil? && @links.length > 20
      return false if !@links.nil? && @links.length < 0
      return false if !@cluster_name.nil? && @cluster_name.to_s.length > 256
      return false if !@cluster_ext_id.nil? && @cluster_ext_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@storage_pool_ext_id.nil? && @storage_pool_ext_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@service_vmid.nil? && @service_vmid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}::[0-9]{1,}$/)
      return false if !@node_ext_id.nil? && @node_ext_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@mount_path.nil? && @mount_path !~ Regexp.new(/^\/home\/nutanix\/data\/stargate-storage\/disks\/[A-Z0-9]{8}$/)
      return false if !@serial_number.nil? && @serial_number.to_s.length > 256
      return false if !@disk_size_bytes.nil? && @disk_size_bytes < 524288
      return false if !@physical_capacity_bytes.nil? && @physical_capacity_bytes < 524288
      return false if !@model.nil? && @model.to_s.length > 256
      return false if !@vendor.nil? && @vendor.to_s.length > 256
      return false if !@firmware_version.nil? && @firmware_version.to_s.length > 256
      return false if !@target_firmware_version.nil? && @target_firmware_version.to_s.length > 256
      return false if !@host_name.nil? && @host_name.to_s.length > 256
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] tenant_id Value to be assigned
    def tenant_id=(tenant_id)
      if tenant_id.nil?
        fail ArgumentError, 'tenant_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if tenant_id !~ pattern
        fail ArgumentError, "invalid value for \"tenant_id\", must conform to the pattern #{pattern}."
      end

      @tenant_id = tenant_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ext_id Value to be assigned
    def ext_id=(ext_id)
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !ext_id.nil? && ext_id !~ pattern
        fail ArgumentError, "invalid value for \"ext_id\", must conform to the pattern #{pattern}."
      end

      @ext_id = ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] links Value to be assigned
    def links=(links)
      if links.nil?
        fail ArgumentError, 'links cannot be nil'
      end

      if links.length > 20
        fail ArgumentError, 'invalid value for "links", number of items must be less than or equal to 20.'
      end

      if links.length < 0
        fail ArgumentError, 'invalid value for "links", number of items must be greater than or equal to 0.'
      end

      @links = links
    end

    # Custom attribute writer method with validation
    # @param [Object] cluster_name Value to be assigned
    def cluster_name=(cluster_name)
      if cluster_name.nil?
        fail ArgumentError, 'cluster_name cannot be nil'
      end

      if cluster_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "cluster_name", the character length must be smaller than or equal to 256.'
      end

      @cluster_name = cluster_name
    end

    # Custom attribute writer method with validation
    # @param [Object] cluster_ext_id Value to be assigned
    def cluster_ext_id=(cluster_ext_id)
      if cluster_ext_id.nil?
        fail ArgumentError, 'cluster_ext_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for \"cluster_ext_id\", must conform to the pattern #{pattern}."
      end

      @cluster_ext_id = cluster_ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] storage_pool_ext_id Value to be assigned
    def storage_pool_ext_id=(storage_pool_ext_id)
      if storage_pool_ext_id.nil?
        fail ArgumentError, 'storage_pool_ext_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if storage_pool_ext_id !~ pattern
        fail ArgumentError, "invalid value for \"storage_pool_ext_id\", must conform to the pattern #{pattern}."
      end

      @storage_pool_ext_id = storage_pool_ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] service_vmid Value to be assigned
    def service_vmid=(service_vmid)
      if service_vmid.nil?
        fail ArgumentError, 'service_vmid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}::[0-9]{1,}$/)
      if service_vmid !~ pattern
        fail ArgumentError, "invalid value for \"service_vmid\", must conform to the pattern #{pattern}."
      end

      @service_vmid = service_vmid
    end

    # Custom attribute writer method with validation
    # @param [Object] node_ext_id Value to be assigned
    def node_ext_id=(node_ext_id)
      if node_ext_id.nil?
        fail ArgumentError, 'node_ext_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if node_ext_id !~ pattern
        fail ArgumentError, "invalid value for \"node_ext_id\", must conform to the pattern #{pattern}."
      end

      @node_ext_id = node_ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] mount_path Value to be assigned
    def mount_path=(mount_path)
      if mount_path.nil?
        fail ArgumentError, 'mount_path cannot be nil'
      end

      pattern = Regexp.new(/^\/home\/nutanix\/data\/stargate-storage\/disks\/[A-Z0-9]{8}$/)
      if mount_path !~ pattern
        fail ArgumentError, "invalid value for \"mount_path\", must conform to the pattern #{pattern}."
      end

      @mount_path = mount_path
    end

    # Custom attribute writer method with validation
    # @param [Object] serial_number Value to be assigned
    def serial_number=(serial_number)
      if serial_number.nil?
        fail ArgumentError, 'serial_number cannot be nil'
      end

      if serial_number.to_s.length > 256
        fail ArgumentError, 'invalid value for "serial_number", the character length must be smaller than or equal to 256.'
      end

      @serial_number = serial_number
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_size_bytes Value to be assigned
    def disk_size_bytes=(disk_size_bytes)
      if disk_size_bytes.nil?
        fail ArgumentError, 'disk_size_bytes cannot be nil'
      end

      if disk_size_bytes < 524288
        fail ArgumentError, 'invalid value for "disk_size_bytes", must be greater than or equal to 524288.'
      end

      @disk_size_bytes = disk_size_bytes
    end

    # Custom attribute writer method with validation
    # @param [Object] physical_capacity_bytes Value to be assigned
    def physical_capacity_bytes=(physical_capacity_bytes)
      if physical_capacity_bytes.nil?
        fail ArgumentError, 'physical_capacity_bytes cannot be nil'
      end

      if physical_capacity_bytes < 524288
        fail ArgumentError, 'invalid value for "physical_capacity_bytes", must be greater than or equal to 524288.'
      end

      @physical_capacity_bytes = physical_capacity_bytes
    end

    # Custom attribute writer method with validation
    # @param [Object] model Value to be assigned
    def model=(model)
      if model.nil?
        fail ArgumentError, 'model cannot be nil'
      end

      if model.to_s.length > 256
        fail ArgumentError, 'invalid value for "model", the character length must be smaller than or equal to 256.'
      end

      @model = model
    end

    # Custom attribute writer method with validation
    # @param [Object] vendor Value to be assigned
    def vendor=(vendor)
      if vendor.nil?
        fail ArgumentError, 'vendor cannot be nil'
      end

      if vendor.to_s.length > 256
        fail ArgumentError, 'invalid value for "vendor", the character length must be smaller than or equal to 256.'
      end

      @vendor = vendor
    end

    # Custom attribute writer method with validation
    # @param [Object] firmware_version Value to be assigned
    def firmware_version=(firmware_version)
      if firmware_version.nil?
        fail ArgumentError, 'firmware_version cannot be nil'
      end

      if firmware_version.to_s.length > 256
        fail ArgumentError, 'invalid value for "firmware_version", the character length must be smaller than or equal to 256.'
      end

      @firmware_version = firmware_version
    end

    # Custom attribute writer method with validation
    # @param [Object] target_firmware_version Value to be assigned
    def target_firmware_version=(target_firmware_version)
      if target_firmware_version.nil?
        fail ArgumentError, 'target_firmware_version cannot be nil'
      end

      if target_firmware_version.to_s.length > 256
        fail ArgumentError, 'invalid value for "target_firmware_version", the character length must be smaller than or equal to 256.'
      end

      @target_firmware_version = target_firmware_version
    end

    # Custom attribute writer method with validation
    # @param [Object] host_name Value to be assigned
    def host_name=(host_name)
      if host_name.nil?
        fail ArgumentError, 'host_name cannot be nil'
      end

      if host_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "host_name", the character length must be smaller than or equal to 256.'
      end

      @host_name = host_name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tenant_id == o.tenant_id &&
          ext_id == o.ext_id &&
          links == o.links &&
          cluster_name == o.cluster_name &&
          cluster_ext_id == o.cluster_ext_id &&
          status == o.status &&
          storage_tier == o.storage_tier &&
          storage_pool_ext_id == o.storage_pool_ext_id &&
          service_vmid == o.service_vmid &&
          node_ext_id == o.node_ext_id &&
          cvm_ip_address == o.cvm_ip_address &&
          node_ip_address == o.node_ip_address &&
          mount_path == o.mount_path &&
          location == o.location &&
          serial_number == o.serial_number &&
          disk_size_bytes == o.disk_size_bytes &&
          physical_capacity_bytes == o.physical_capacity_bytes &&
          model == o.model &&
          vendor == o.vendor &&
          nvme_pcie_path == o.nvme_pcie_path &&
          firmware_version == o.firmware_version &&
          target_firmware_version == o.target_firmware_version &&
          host_name == o.host_name &&
          disk_advance_config == o.disk_advance_config
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tenant_id, ext_id, links, cluster_name, cluster_ext_id, status, storage_tier, storage_pool_ext_id, service_vmid, node_ext_id, cvm_ip_address, node_ip_address, mount_path, location, serial_number, disk_size_bytes, physical_capacity_bytes, model, vendor, nvme_pcie_path, firmware_version, target_firmware_version, host_name, disk_advance_config].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixClustermgmt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
