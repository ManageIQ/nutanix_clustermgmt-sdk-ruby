=begin
#Nutanix Cluster Management APIs

#Manage Hosts, Clusters and other Infrastructure.

The version of the OpenAPI document: 4.0.2

Generated by: https://openapi-generator.tech
Generator version: 7.16.0

=end

require 'cgi'

module NutanixClustermgmt
  class BmcApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get BMC details
    # Get BMC details of a host
    # @param cluster_ext_id [String] Cluster UUID
    # @param ext_id [String] Host UUID
    # @param [Hash] opts the optional parameters
    # @return [GetBmcInfo200Response]
    def get_bmc_info(cluster_ext_id, ext_id, opts = {})
      data, _status_code, _headers = get_bmc_info_with_http_info(cluster_ext_id, ext_id, opts)
      data
    end

    # Get BMC details
    # Get BMC details of a host
    # @param cluster_ext_id [String] Cluster UUID
    # @param ext_id [String] Host UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetBmcInfo200Response, Integer, Hash)>] GetBmcInfo200Response data, response status code and response headers
    def get_bmc_info_with_http_info(cluster_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BmcApi.get_bmc_info ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling BmcApi.get_bmc_info"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling BmcApi.get_bmc_info, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling BmcApi.get_bmc_info"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling BmcApi.get_bmc_info, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/hosts/{extId}/bmc-info'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetBmcInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"BmcApi.get_bmc_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BmcApi#get_bmc_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update BMC info summary
    # Update BMC info
    # @param cluster_ext_id [String] Cluster UUID
    # @param ext_id [String] Host UUID
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_bmc_info [ClustermgmtV40ConfigBmcInfo] Update BMC info body
    # @param [Hash] opts the optional parameters
    # @return [UpdateBmcInfo202Response]
    def update_bmc_info(cluster_ext_id, ext_id, if_match, ntnx_request_id, clustermgmt_v40_config_bmc_info, opts = {})
      data, _status_code, _headers = update_bmc_info_with_http_info(cluster_ext_id, ext_id, if_match, ntnx_request_id, clustermgmt_v40_config_bmc_info, opts)
      data
    end

    # Update BMC info summary
    # Update BMC info
    # @param cluster_ext_id [String] Cluster UUID
    # @param ext_id [String] Host UUID
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_bmc_info [ClustermgmtV40ConfigBmcInfo] Update BMC info body
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateBmcInfo202Response, Integer, Hash)>] UpdateBmcInfo202Response data, response status code and response headers
    def update_bmc_info_with_http_info(cluster_ext_id, ext_id, if_match, ntnx_request_id, clustermgmt_v40_config_bmc_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BmcApi.update_bmc_info ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling BmcApi.update_bmc_info"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling BmcApi.update_bmc_info, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling BmcApi.update_bmc_info"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling BmcApi.update_bmc_info, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling BmcApi.update_bmc_info"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling BmcApi.update_bmc_info"
      end
      # verify the required parameter 'clustermgmt_v40_config_bmc_info' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_bmc_info.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_bmc_info' when calling BmcApi.update_bmc_info"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/hosts/{extId}/bmc-info'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_bmc_info)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateBmcInfo202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"BmcApi.update_bmc_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BmcApi#update_bmc_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
