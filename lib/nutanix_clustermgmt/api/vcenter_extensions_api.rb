=begin
#Nutanix Cluster Management APIs

#Manage Hosts, Clusters and other Infrastructure.

The version of the OpenAPI document: 4.0.2

Generated by: https://openapi-generator.tech
Generator version: 7.16.0

=end

require 'cgi'

module NutanixClustermgmt
  class VcenterExtensionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get vCenter server extension.
    # Fetches vCenter server extension information for the given VcenterExtensionExtId.
    # @param ext_id [String] The globally unique identifier of vCenter Server extension instance. It should be of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetVcenterExtensionById200Response]
    def get_vcenter_extension_by_id(ext_id, opts = {})
      data, _status_code, _headers = get_vcenter_extension_by_id_with_http_info(ext_id, opts)
      data
    end

    # Get vCenter server extension.
    # Fetches vCenter server extension information for the given VcenterExtensionExtId.
    # @param ext_id [String] The globally unique identifier of vCenter Server extension instance. It should be of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetVcenterExtensionById200Response, Integer, Hash)>] GetVcenterExtensionById200Response data, response status code and response headers
    def get_vcenter_extension_by_id_with_http_info(ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VcenterExtensionsApi.get_vcenter_extension_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VcenterExtensionsApi.get_vcenter_extension_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VcenterExtensionsApi.get_vcenter_extension_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/vcenter-extensions/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVcenterExtensionById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VcenterExtensionsApi.get_vcenter_extension_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VcenterExtensionsApi#get_vcenter_extension_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List vCenter server extensions.
    # List of vCenter server extensions for the clusters registered under a Prism Central server.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - clusterExtId - ipAddress - isRegistered 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - clusterExtId - extId - ipAddress - isRegistered - links - tenantId 
    # @return [ListVcenterExtensions200Response]
    def list_vcenter_extensions(opts = {})
      data, _status_code, _headers = list_vcenter_extensions_with_http_info(opts)
      data
    end

    # List vCenter server extensions.
    # List of vCenter server extensions for the clusters registered under a Prism Central server.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - clusterExtId - ipAddress - isRegistered 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - clusterExtId - extId - ipAddress - isRegistered - links - tenantId 
    # @return [Array<(ListVcenterExtensions200Response, Integer, Hash)>] ListVcenterExtensions200Response data, response status code and response headers
    def list_vcenter_extensions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VcenterExtensionsApi.list_vcenter_extensions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VcenterExtensionsApi.list_vcenter_extensions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VcenterExtensionsApi.list_vcenter_extensions, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VcenterExtensionsApi.list_vcenter_extensions, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/vcenter-extensions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListVcenterExtensions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VcenterExtensionsApi.list_vcenter_extensions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VcenterExtensionsApi#list_vcenter_extensions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register vCenter server extension.
    # Registers Nutanix cluster as a vCenter server extension.
    # @param ext_id [String] The globally unique identifier of vCenter Server extension instance. It should be of type UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_vcenter_credentials [ClustermgmtV40ConfigVcenterCredentials] 
    # @param [Hash] opts the optional parameters
    # @return [RegisterVcenterExtension202Response]
    def register_vcenter_extension(ext_id, ntnx_request_id, clustermgmt_v40_config_vcenter_credentials, opts = {})
      data, _status_code, _headers = register_vcenter_extension_with_http_info(ext_id, ntnx_request_id, clustermgmt_v40_config_vcenter_credentials, opts)
      data
    end

    # Register vCenter server extension.
    # Registers Nutanix cluster as a vCenter server extension.
    # @param ext_id [String] The globally unique identifier of vCenter Server extension instance. It should be of type UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_vcenter_credentials [ClustermgmtV40ConfigVcenterCredentials] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegisterVcenterExtension202Response, Integer, Hash)>] RegisterVcenterExtension202Response data, response status code and response headers
    def register_vcenter_extension_with_http_info(ext_id, ntnx_request_id, clustermgmt_v40_config_vcenter_credentials, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VcenterExtensionsApi.register_vcenter_extension ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VcenterExtensionsApi.register_vcenter_extension"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VcenterExtensionsApi.register_vcenter_extension, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VcenterExtensionsApi.register_vcenter_extension"
      end
      # verify the required parameter 'clustermgmt_v40_config_vcenter_credentials' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_vcenter_credentials.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_vcenter_credentials' when calling VcenterExtensionsApi.register_vcenter_extension"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/vcenter-extensions/{extId}/$actions/register'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_vcenter_credentials)

      # return_type
      return_type = opts[:debug_return_type] || 'RegisterVcenterExtension202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VcenterExtensionsApi.register_vcenter_extension",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VcenterExtensionsApi#register_vcenter_extension\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unregister vCenter server extension.
    # Unregisters Nutanix cluster as a vCenter server extension.
    # @param ext_id [String] The globally unique identifier of vCenter Server extension instance. It should be of type UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_vcenter_credentials [ClustermgmtV40ConfigVcenterCredentials] 
    # @param [Hash] opts the optional parameters
    # @return [UnregisterVcenterExtension202Response]
    def unregister_vcenter_extension(ext_id, ntnx_request_id, clustermgmt_v40_config_vcenter_credentials, opts = {})
      data, _status_code, _headers = unregister_vcenter_extension_with_http_info(ext_id, ntnx_request_id, clustermgmt_v40_config_vcenter_credentials, opts)
      data
    end

    # Unregister vCenter server extension.
    # Unregisters Nutanix cluster as a vCenter server extension.
    # @param ext_id [String] The globally unique identifier of vCenter Server extension instance. It should be of type UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_vcenter_credentials [ClustermgmtV40ConfigVcenterCredentials] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnregisterVcenterExtension202Response, Integer, Hash)>] UnregisterVcenterExtension202Response data, response status code and response headers
    def unregister_vcenter_extension_with_http_info(ext_id, ntnx_request_id, clustermgmt_v40_config_vcenter_credentials, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VcenterExtensionsApi.unregister_vcenter_extension ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VcenterExtensionsApi.unregister_vcenter_extension"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VcenterExtensionsApi.unregister_vcenter_extension, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VcenterExtensionsApi.unregister_vcenter_extension"
      end
      # verify the required parameter 'clustermgmt_v40_config_vcenter_credentials' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_vcenter_credentials.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_vcenter_credentials' when calling VcenterExtensionsApi.unregister_vcenter_extension"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/vcenter-extensions/{extId}/$actions/unregister'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_vcenter_credentials)

      # return_type
      return_type = opts[:debug_return_type] || 'UnregisterVcenterExtension202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VcenterExtensionsApi.unregister_vcenter_extension",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VcenterExtensionsApi#unregister_vcenter_extension\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
