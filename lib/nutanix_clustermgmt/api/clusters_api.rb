=begin
#Nutanix Cluster Management APIs

#Manage Hosts, Clusters and other Infrastructure.

The version of the OpenAPI document: 4.0.2

Generated by: https://openapi-generator.tech
Generator version: 7.16.0

=end

require 'cgi'

module NutanixClustermgmt
  class ClustersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add SNMP transport ports and protocol details
    # Adds transport ports and protocol details to the SNMP configuration associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_snmp_transport [ClustermgmtV40ConfigSnmpTransport] SNMP transports to add.
    # @param [Hash] opts the optional parameters
    # @return [AddSnmpTransport202Response]
    def add_snmp_transport(cluster_ext_id, clustermgmt_v40_config_snmp_transport, opts = {})
      data, _status_code, _headers = add_snmp_transport_with_http_info(cluster_ext_id, clustermgmt_v40_config_snmp_transport, opts)
      data
    end

    # Add SNMP transport ports and protocol details
    # Adds transport ports and protocol details to the SNMP configuration associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_snmp_transport [ClustermgmtV40ConfigSnmpTransport] SNMP transports to add.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddSnmpTransport202Response, Integer, Hash)>] AddSnmpTransport202Response data, response status code and response headers
    def add_snmp_transport_with_http_info(cluster_ext_id, clustermgmt_v40_config_snmp_transport, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.add_snmp_transport ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.add_snmp_transport"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.add_snmp_transport, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'clustermgmt_v40_config_snmp_transport' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_snmp_transport.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_snmp_transport' when calling ClustersApi.add_snmp_transport"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/snmp/$actions/add-transports'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_snmp_transport)

      # return_type
      return_type = opts[:debug_return_type] || 'AddSnmpTransport202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.add_snmp_transport",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#add_snmp_transport\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate categories to the cluster
    # Attach categories to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_category_entity_references [ClustermgmtV40ConfigCategoryEntityReferences] The specifications required for updating categories to the entity.
    # @param [Hash] opts the optional parameters
    # @return [AssociateCategoriesToCluster202Response]
    def associate_categories_to_cluster(cluster_ext_id, clustermgmt_v40_config_category_entity_references, opts = {})
      data, _status_code, _headers = associate_categories_to_cluster_with_http_info(cluster_ext_id, clustermgmt_v40_config_category_entity_references, opts)
      data
    end

    # Associate categories to the cluster
    # Attach categories to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_category_entity_references [ClustermgmtV40ConfigCategoryEntityReferences] The specifications required for updating categories to the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssociateCategoriesToCluster202Response, Integer, Hash)>] AssociateCategoriesToCluster202Response data, response status code and response headers
    def associate_categories_to_cluster_with_http_info(cluster_ext_id, clustermgmt_v40_config_category_entity_references, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.associate_categories_to_cluster ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.associate_categories_to_cluster"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.associate_categories_to_cluster, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'clustermgmt_v40_config_category_entity_references' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_category_entity_references.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_category_entity_references' when calling ClustersApi.associate_categories_to_cluster"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/$actions/associate-categories'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_category_entity_references)

      # return_type
      return_type = opts[:debug_return_type] || 'AssociateCategoriesToCluster202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.associate_categories_to_cluster",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#associate_categories_to_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get hypervisor ISO upload information
    # Provides information on whether hypervisor ISO upload is required or not. This API is not supported for XEN hypervisor type.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_hypervisor_upload_param [ClustermgmtV40ConfigHypervisorUploadParam] Parameters to get information on whether hypervisor ISO upload is required or not.
    # @param [Hash] opts the optional parameters
    # @return [CheckHypervisorRequirements202Response]
    def check_hypervisor_requirements(cluster_ext_id, clustermgmt_v40_config_hypervisor_upload_param, opts = {})
      data, _status_code, _headers = check_hypervisor_requirements_with_http_info(cluster_ext_id, clustermgmt_v40_config_hypervisor_upload_param, opts)
      data
    end

    # Get hypervisor ISO upload information
    # Provides information on whether hypervisor ISO upload is required or not. This API is not supported for XEN hypervisor type.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_hypervisor_upload_param [ClustermgmtV40ConfigHypervisorUploadParam] Parameters to get information on whether hypervisor ISO upload is required or not.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckHypervisorRequirements202Response, Integer, Hash)>] CheckHypervisorRequirements202Response data, response status code and response headers
    def check_hypervisor_requirements_with_http_info(cluster_ext_id, clustermgmt_v40_config_hypervisor_upload_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.check_hypervisor_requirements ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.check_hypervisor_requirements"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.check_hypervisor_requirements, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'clustermgmt_v40_config_hypervisor_upload_param' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_hypervisor_upload_param.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_hypervisor_upload_param' when calling ClustersApi.check_hypervisor_requirements"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/$actions/check-hypervisor-requirements'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_hypervisor_upload_param)

      # return_type
      return_type = opts[:debug_return_type] || 'CheckHypervisorRequirements202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.check_hypervisor_requirements",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#check_hypervisor_requirements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a cluster
    # Cluster create operation.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_cluster [ClustermgmtV40ConfigCluster] The required parameters for cluster create workflow.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dryrun A URL query parameter that allows long running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true. 
    # @return [CreateCluster202Response]
    def create_cluster(ntnx_request_id, clustermgmt_v40_config_cluster, opts = {})
      data, _status_code, _headers = create_cluster_with_http_info(ntnx_request_id, clustermgmt_v40_config_cluster, opts)
      data
    end

    # Create a cluster
    # Cluster create operation.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_cluster [ClustermgmtV40ConfigCluster] The required parameters for cluster create workflow.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dryrun A URL query parameter that allows long running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true. 
    # @return [Array<(CreateCluster202Response, Integer, Hash)>] CreateCluster202Response data, response status code and response headers
    def create_cluster_with_http_info(ntnx_request_id, clustermgmt_v40_config_cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.create_cluster ...'
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling ClustersApi.create_cluster"
      end
      # verify the required parameter 'clustermgmt_v40_config_cluster' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_cluster.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_cluster' when calling ClustersApi.create_cluster"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$dryrun'] = opts[:'dryrun'] if !opts[:'dryrun'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_cluster)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCluster202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.create_cluster",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#create_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add RSYSLOG server configuration
    # Adds RSYSLOG server configuration to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_rsyslog_server [ClustermgmtV40ConfigRsyslogServer] RSYSLOG server to add.
    # @param [Hash] opts the optional parameters
    # @return [CreateRsyslogServer202Response]
    def create_rsyslog_server(cluster_ext_id, clustermgmt_v40_config_rsyslog_server, opts = {})
      data, _status_code, _headers = create_rsyslog_server_with_http_info(cluster_ext_id, clustermgmt_v40_config_rsyslog_server, opts)
      data
    end

    # Add RSYSLOG server configuration
    # Adds RSYSLOG server configuration to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_rsyslog_server [ClustermgmtV40ConfigRsyslogServer] RSYSLOG server to add.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateRsyslogServer202Response, Integer, Hash)>] CreateRsyslogServer202Response data, response status code and response headers
    def create_rsyslog_server_with_http_info(cluster_ext_id, clustermgmt_v40_config_rsyslog_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.create_rsyslog_server ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.create_rsyslog_server"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.create_rsyslog_server, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'clustermgmt_v40_config_rsyslog_server' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_rsyslog_server.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_rsyslog_server' when calling ClustersApi.create_rsyslog_server"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/rsyslog-servers'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_rsyslog_server)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateRsyslogServer202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.create_rsyslog_server",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#create_rsyslog_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add SNMP trap
    # Add SNMP trap configuration associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_snmp_trap [ClustermgmtV40ConfigSnmpTrap] SNMP trap to add.
    # @param [Hash] opts the optional parameters
    # @return [CreateSnmpTrap202Response]
    def create_snmp_trap(cluster_ext_id, clustermgmt_v40_config_snmp_trap, opts = {})
      data, _status_code, _headers = create_snmp_trap_with_http_info(cluster_ext_id, clustermgmt_v40_config_snmp_trap, opts)
      data
    end

    # Add SNMP trap
    # Add SNMP trap configuration associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_snmp_trap [ClustermgmtV40ConfigSnmpTrap] SNMP trap to add.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSnmpTrap202Response, Integer, Hash)>] CreateSnmpTrap202Response data, response status code and response headers
    def create_snmp_trap_with_http_info(cluster_ext_id, clustermgmt_v40_config_snmp_trap, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.create_snmp_trap ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.create_snmp_trap"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.create_snmp_trap, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'clustermgmt_v40_config_snmp_trap' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_snmp_trap.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_snmp_trap' when calling ClustersApi.create_snmp_trap"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/snmp/traps'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_snmp_trap)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateSnmpTrap202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.create_snmp_trap",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#create_snmp_trap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add SNMP user
    # Adds SNMP user configuration to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_snmp_user [ClustermgmtV40ConfigSnmpUser] SNMP user to add.
    # @param [Hash] opts the optional parameters
    # @return [CreateSnmpUser202Response]
    def create_snmp_user(cluster_ext_id, clustermgmt_v40_config_snmp_user, opts = {})
      data, _status_code, _headers = create_snmp_user_with_http_info(cluster_ext_id, clustermgmt_v40_config_snmp_user, opts)
      data
    end

    # Add SNMP user
    # Adds SNMP user configuration to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_snmp_user [ClustermgmtV40ConfigSnmpUser] SNMP user to add.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSnmpUser202Response, Integer, Hash)>] CreateSnmpUser202Response data, response status code and response headers
    def create_snmp_user_with_http_info(cluster_ext_id, clustermgmt_v40_config_snmp_user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.create_snmp_user ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.create_snmp_user"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.create_snmp_user, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'clustermgmt_v40_config_snmp_user' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_snmp_user.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_snmp_user' when calling ClustersApi.create_snmp_user"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/snmp/users'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_snmp_user)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateSnmpUser202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.create_snmp_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#create_snmp_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a cluster
    # Deletes the cluster identified by {extId}.
    # @param ext_id [String] Cluster UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dryrun A URL query parameter that allows long running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true. 
    # @return [DeleteClusterById202Response]
    def delete_cluster_by_id(ext_id, ntnx_request_id, opts = {})
      data, _status_code, _headers = delete_cluster_by_id_with_http_info(ext_id, ntnx_request_id, opts)
      data
    end

    # Delete a cluster
    # Deletes the cluster identified by {extId}.
    # @param ext_id [String] Cluster UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dryrun A URL query parameter that allows long running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true. 
    # @return [Array<(DeleteClusterById202Response, Integer, Hash)>] DeleteClusterById202Response data, response status code and response headers
    def delete_cluster_by_id_with_http_info(ext_id, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.delete_cluster_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.delete_cluster_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.delete_cluster_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling ClustersApi.delete_cluster_by_id"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$dryrun'] = opts[:'dryrun'] if !opts[:'dryrun'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteClusterById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.delete_cluster_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#delete_cluster_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete RSYSLOG server configuration
    # Deletes RSYSLOG server configuration identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] RSYSLOG server UUID.
    # @param [Hash] opts the optional parameters
    # @return [DeleteRsyslogServerById202Response]
    def delete_rsyslog_server_by_id(cluster_ext_id, ext_id, opts = {})
      data, _status_code, _headers = delete_rsyslog_server_by_id_with_http_info(cluster_ext_id, ext_id, opts)
      data
    end

    # Delete RSYSLOG server configuration
    # Deletes RSYSLOG server configuration identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] RSYSLOG server UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteRsyslogServerById202Response, Integer, Hash)>] DeleteRsyslogServerById202Response data, response status code and response headers
    def delete_rsyslog_server_by_id_with_http_info(cluster_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.delete_rsyslog_server_by_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.delete_rsyslog_server_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.delete_rsyslog_server_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.delete_rsyslog_server_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.delete_rsyslog_server_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/rsyslog-servers/{extId}'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteRsyslogServerById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.delete_rsyslog_server_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#delete_rsyslog_server_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete SNMP trap
    # Deletes SNMP trap configuration identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] SNMP trap UUID.
    # @param [Hash] opts the optional parameters
    # @return [DeleteSnmpTrapById202Response]
    def delete_snmp_trap_by_id(cluster_ext_id, ext_id, opts = {})
      data, _status_code, _headers = delete_snmp_trap_by_id_with_http_info(cluster_ext_id, ext_id, opts)
      data
    end

    # Delete SNMP trap
    # Deletes SNMP trap configuration identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] SNMP trap UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteSnmpTrapById202Response, Integer, Hash)>] DeleteSnmpTrapById202Response data, response status code and response headers
    def delete_snmp_trap_by_id_with_http_info(cluster_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.delete_snmp_trap_by_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.delete_snmp_trap_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.delete_snmp_trap_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.delete_snmp_trap_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.delete_snmp_trap_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/snmp/traps/{extId}'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteSnmpTrapById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.delete_snmp_trap_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#delete_snmp_trap_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete SNMP user
    # Deletes SNMP user configuration identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] SNMP user UUID.
    # @param [Hash] opts the optional parameters
    # @return [DeleteSnmpUserById202Response]
    def delete_snmp_user_by_id(cluster_ext_id, ext_id, opts = {})
      data, _status_code, _headers = delete_snmp_user_by_id_with_http_info(cluster_ext_id, ext_id, opts)
      data
    end

    # Delete SNMP user
    # Deletes SNMP user configuration identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] SNMP user UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteSnmpUserById202Response, Integer, Hash)>] DeleteSnmpUserById202Response data, response status code and response headers
    def delete_snmp_user_by_id_with_http_info(cluster_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.delete_snmp_user_by_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.delete_snmp_user_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.delete_snmp_user_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.delete_snmp_user_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.delete_snmp_user_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/snmp/users/{extId}'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteSnmpUserById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.delete_snmp_user_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#delete_snmp_user_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disassociate categories from the cluster
    # Detach categories from the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_category_entity_references [ClustermgmtV40ConfigCategoryEntityReferences] The specifications required for updating categories to the entity.
    # @param [Hash] opts the optional parameters
    # @return [DisassociateCategoriesFromCluster202Response]
    def disassociate_categories_from_cluster(cluster_ext_id, clustermgmt_v40_config_category_entity_references, opts = {})
      data, _status_code, _headers = disassociate_categories_from_cluster_with_http_info(cluster_ext_id, clustermgmt_v40_config_category_entity_references, opts)
      data
    end

    # Disassociate categories from the cluster
    # Detach categories from the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_category_entity_references [ClustermgmtV40ConfigCategoryEntityReferences] The specifications required for updating categories to the entity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DisassociateCategoriesFromCluster202Response, Integer, Hash)>] DisassociateCategoriesFromCluster202Response data, response status code and response headers
    def disassociate_categories_from_cluster_with_http_info(cluster_ext_id, clustermgmt_v40_config_category_entity_references, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.disassociate_categories_from_cluster ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.disassociate_categories_from_cluster"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.disassociate_categories_from_cluster, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'clustermgmt_v40_config_category_entity_references' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_category_entity_references.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_category_entity_references' when calling ClustersApi.disassociate_categories_from_cluster"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/$actions/disassociate-categories'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_category_entity_references)

      # return_type
      return_type = opts[:debug_return_type] || 'DisassociateCategoriesFromCluster202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.disassociate_categories_from_cluster",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#disassociate_categories_from_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Discover unconfigured nodes
    # Get the unconfigured node details such as node UUID, node position, node IP, foundation version and more.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_node_discovery_params [ClustermgmtV40ConfigNodeDiscoveryParams] Discover unconfigured node details.
    # @param [Hash] opts the optional parameters
    # @return [DiscoverUnconfiguredNodes202Response]
    def discover_unconfigured_nodes(cluster_ext_id, clustermgmt_v40_config_node_discovery_params, opts = {})
      data, _status_code, _headers = discover_unconfigured_nodes_with_http_info(cluster_ext_id, clustermgmt_v40_config_node_discovery_params, opts)
      data
    end

    # Discover unconfigured nodes
    # Get the unconfigured node details such as node UUID, node position, node IP, foundation version and more.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_node_discovery_params [ClustermgmtV40ConfigNodeDiscoveryParams] Discover unconfigured node details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DiscoverUnconfiguredNodes202Response, Integer, Hash)>] DiscoverUnconfiguredNodes202Response data, response status code and response headers
    def discover_unconfigured_nodes_with_http_info(cluster_ext_id, clustermgmt_v40_config_node_discovery_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.discover_unconfigured_nodes ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.discover_unconfigured_nodes"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.discover_unconfigured_nodes, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'clustermgmt_v40_config_node_discovery_params' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_node_discovery_params.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_node_discovery_params' when calling ClustersApi.discover_unconfigured_nodes"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/$actions/discover-unconfigured-nodes'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_node_discovery_params)

      # return_type
      return_type = opts[:debug_return_type] || 'DiscoverUnconfiguredNodes202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.discover_unconfigured_nodes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#discover_unconfigured_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enter host into maintenance mode
    # Enter host identified by {extId} into maintenance mode belonging to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] Host UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_operations_enter_host_maintenance_spec [ClustermgmtV40OperationsEnterHostMaintenanceSpec] Property of the host to be put into maintenance mode.
    # @param [Hash] opts the optional parameters
    # @return [EnterHostMaintenance202Response]
    def enter_host_maintenance(cluster_ext_id, ext_id, ntnx_request_id, clustermgmt_v40_operations_enter_host_maintenance_spec, opts = {})
      data, _status_code, _headers = enter_host_maintenance_with_http_info(cluster_ext_id, ext_id, ntnx_request_id, clustermgmt_v40_operations_enter_host_maintenance_spec, opts)
      data
    end

    # Enter host into maintenance mode
    # Enter host identified by {extId} into maintenance mode belonging to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] Host UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_operations_enter_host_maintenance_spec [ClustermgmtV40OperationsEnterHostMaintenanceSpec] Property of the host to be put into maintenance mode.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnterHostMaintenance202Response, Integer, Hash)>] EnterHostMaintenance202Response data, response status code and response headers
    def enter_host_maintenance_with_http_info(cluster_ext_id, ext_id, ntnx_request_id, clustermgmt_v40_operations_enter_host_maintenance_spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.enter_host_maintenance ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.enter_host_maintenance"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.enter_host_maintenance, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.enter_host_maintenance"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.enter_host_maintenance, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling ClustersApi.enter_host_maintenance"
      end
      # verify the required parameter 'clustermgmt_v40_operations_enter_host_maintenance_spec' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_operations_enter_host_maintenance_spec.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_operations_enter_host_maintenance_spec' when calling ClustersApi.enter_host_maintenance"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/operations/clusters/{clusterExtId}/hosts/{extId}/$actions/enter-host-maintenance'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_operations_enter_host_maintenance_spec)

      # return_type
      return_type = opts[:debug_return_type] || 'EnterHostMaintenance202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.enter_host_maintenance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#enter_host_maintenance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Exit host from maintenance mode
    # Exit host identified by {extId} from maintenance mode belonging to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] Host UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_operations_host_maintenance_common_spec [ClustermgmtV40OperationsHostMaintenanceCommonSpec] Property of the host to be exited from maintenance mode.
    # @param [Hash] opts the optional parameters
    # @return [ExitHostMaintenance202Response]
    def exit_host_maintenance(cluster_ext_id, ext_id, ntnx_request_id, clustermgmt_v40_operations_host_maintenance_common_spec, opts = {})
      data, _status_code, _headers = exit_host_maintenance_with_http_info(cluster_ext_id, ext_id, ntnx_request_id, clustermgmt_v40_operations_host_maintenance_common_spec, opts)
      data
    end

    # Exit host from maintenance mode
    # Exit host identified by {extId} from maintenance mode belonging to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] Host UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_operations_host_maintenance_common_spec [ClustermgmtV40OperationsHostMaintenanceCommonSpec] Property of the host to be exited from maintenance mode.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExitHostMaintenance202Response, Integer, Hash)>] ExitHostMaintenance202Response data, response status code and response headers
    def exit_host_maintenance_with_http_info(cluster_ext_id, ext_id, ntnx_request_id, clustermgmt_v40_operations_host_maintenance_common_spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.exit_host_maintenance ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.exit_host_maintenance"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.exit_host_maintenance, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.exit_host_maintenance"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.exit_host_maintenance, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling ClustersApi.exit_host_maintenance"
      end
      # verify the required parameter 'clustermgmt_v40_operations_host_maintenance_common_spec' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_operations_host_maintenance_common_spec.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_operations_host_maintenance_common_spec' when calling ClustersApi.exit_host_maintenance"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/operations/clusters/{clusterExtId}/hosts/{extId}/$actions/exit-host-maintenance'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_operations_host_maintenance_common_spec)

      # return_type
      return_type = opts[:debug_return_type] || 'ExitHostMaintenance202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.exit_host_maintenance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#exit_host_maintenance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add node on a cluster
    # Add node on a cluster. This API is not supported for XEN hypervisor type.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_expand_cluster_params [ClustermgmtV40ConfigExpandClusterParams] Property of the node to be added.
    # @param [Hash] opts the optional parameters
    # @return [ExpandCluster202Response]
    def expand_cluster(cluster_ext_id, ntnx_request_id, clustermgmt_v40_config_expand_cluster_params, opts = {})
      data, _status_code, _headers = expand_cluster_with_http_info(cluster_ext_id, ntnx_request_id, clustermgmt_v40_config_expand_cluster_params, opts)
      data
    end

    # Add node on a cluster
    # Add node on a cluster. This API is not supported for XEN hypervisor type.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_expand_cluster_params [ClustermgmtV40ConfigExpandClusterParams] Property of the node to be added.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpandCluster202Response, Integer, Hash)>] ExpandCluster202Response data, response status code and response headers
    def expand_cluster_with_http_info(cluster_ext_id, ntnx_request_id, clustermgmt_v40_config_expand_cluster_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.expand_cluster ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.expand_cluster"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.expand_cluster, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling ClustersApi.expand_cluster"
      end
      # verify the required parameter 'clustermgmt_v40_config_expand_cluster_params' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_expand_cluster_params.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_expand_cluster_params' when calling ClustersApi.expand_cluster"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/$actions/expand-cluster'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_expand_cluster_params)

      # return_type
      return_type = opts[:debug_return_type] || 'ExpandCluster202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.expand_cluster",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#expand_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get network information of unconfigured nodes
    # Get a dictionary of cluster networks and available uplinks on the given nodes. This API is not supported for XEN hypervisor type.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_node_details [ClustermgmtV40ConfigNodeDetails] Node specific details required to fetch node networking information.
    # @param [Hash] opts the optional parameters
    # @return [FetchNodeNetworkingDetails202Response]
    def fetch_node_networking_details(cluster_ext_id, clustermgmt_v40_config_node_details, opts = {})
      data, _status_code, _headers = fetch_node_networking_details_with_http_info(cluster_ext_id, clustermgmt_v40_config_node_details, opts)
      data
    end

    # Get network information of unconfigured nodes
    # Get a dictionary of cluster networks and available uplinks on the given nodes. This API is not supported for XEN hypervisor type.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_node_details [ClustermgmtV40ConfigNodeDetails] Node specific details required to fetch node networking information.
    # @param [Hash] opts the optional parameters
    # @return [Array<(FetchNodeNetworkingDetails202Response, Integer, Hash)>] FetchNodeNetworkingDetails202Response data, response status code and response headers
    def fetch_node_networking_details_with_http_info(cluster_ext_id, clustermgmt_v40_config_node_details, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.fetch_node_networking_details ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.fetch_node_networking_details"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.fetch_node_networking_details, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'clustermgmt_v40_config_node_details' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_node_details.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_node_details' when calling ClustersApi.fetch_node_networking_details"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/$actions/fetch-node-networking-details'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_node_details)

      # return_type
      return_type = opts[:debug_return_type] || 'FetchNodeNetworkingDetails202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.fetch_node_networking_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#fetch_node_networking_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get task response based on the type of request
    # Get task response based on the type of request.
    # @param ext_id [String] The external identifier of the task.
    # @param task_response_type [ClustermgmtV40ConfigTaskResponseType] 
    # @param [Hash] opts the optional parameters
    # @return [FetchTaskResponse200Response]
    def fetch_task_response(ext_id, task_response_type, opts = {})
      data, _status_code, _headers = fetch_task_response_with_http_info(ext_id, task_response_type, opts)
      data
    end

    # Get task response based on the type of request
    # Get task response based on the type of request.
    # @param ext_id [String] The external identifier of the task.
    # @param task_response_type [ClustermgmtV40ConfigTaskResponseType] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FetchTaskResponse200Response, Integer, Hash)>] FetchTaskResponse200Response data, response status code and response headers
    def fetch_task_response_with_http_info(ext_id, task_response_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.fetch_task_response ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.fetch_task_response"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.fetch_task_response, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'task_response_type' is set
      if @api_client.config.client_side_validation && task_response_type.nil?
        fail ArgumentError, "Missing the required parameter 'task_response_type' when calling ClustersApi.fetch_task_response"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/task-response/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'taskResponseType'] = task_response_type

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FetchTaskResponse200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.fetch_task_response",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#fetch_task_response\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a cluster
    # Fetches the cluster entity details identified by {extId}.
    # @param ext_id [String] Cluster UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. Each expanded item is evaluated relative to the entity containing the property being expanded. Other query options can be applied to an expanded property by appending a semicolon-separated list of query options, enclosed in parentheses, to the property name. Permissible system query options are $filter, $select and $orderby. The following expansion keys are supported. - clusterProfile - storageSummary 
    # @return [GetClusterById200Response]
    def get_cluster_by_id(ext_id, opts = {})
      data, _status_code, _headers = get_cluster_by_id_with_http_info(ext_id, opts)
      data
    end

    # Get details of a cluster
    # Fetches the cluster entity details identified by {extId}.
    # @param ext_id [String] Cluster UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. Each expanded item is evaluated relative to the entity containing the property being expanded. Other query options can be applied to an expanded property by appending a semicolon-separated list of query options, enclosed in parentheses, to the property name. Permissible system query options are $filter, $select and $orderby. The following expansion keys are supported. - clusterProfile - storageSummary 
    # @return [Array<(GetClusterById200Response, Integer, Hash)>] GetClusterById200Response data, response status code and response headers
    def get_cluster_by_id_with_http_info(ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.get_cluster_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.get_cluster_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.get_cluster_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetClusterById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.get_cluster_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#get_cluster_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get cluster statistics
    # Get the statistics data of the cluster identified by {clusterExtId}.
    # @param ext_id [String] Cluster UUID.
    # @param start_time [Time] The start time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, start time of 2022-04-23T01:23:45.678+09:00 would consider all stats starting at 1:23:45.678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    # @param end_time [Time] The end time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, end time of 2022-04-23T013:23:45.678+09:00 would consider all stats till 13:23:45 .678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :sampling_interval The sampling interval in seconds at which statistical data should be collected. For example, if you want performance statistics every 30 seconds, then provide the value as 30. 
    # @option opts [CommonV10StatsDownSamplingOperator] :stat_type 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - aggregateHypervisorMemoryUsagePpm - aggregateHypervisorMemoryUsagePpmLowerBuf - aggregateHypervisorMemoryUsagePpmUpperBuf - controllerAvgIoLatencyUsecs - controllerAvgIoLatencyUsecsLowerBuf - controllerAvgIoLatencyUsecsUpperBuf - controllerAvgReadIoLatencyUsecs - controllerAvgReadIoLatencyUsecsLowerBuf - controllerAvgReadIoLatencyUsecsUpperBuf - controllerAvgWriteIoLatencyUsecs - controllerAvgWriteIoLatencyUsecsLowerBuf - controllerAvgWriteIoLatencyUsecsUpperBuf - controllerNumIops - controllerNumIopsLowerBuf - controllerNumIopsUpperBuf - controllerNumReadIops - controllerNumReadIopsLowerBuf - controllerNumReadIopsUpperBuf - controllerNumWriteIops - controllerNumWriteIopsLowerBuf - controllerNumWriteIopsUpperBuf - controllerReadIoBandwidthKbps - controllerReadIoBandwidthKbpsLowerBuf - controllerReadIoBandwidthKbpsUpperBuf - controllerWriteIoBandwidthKbps - controllerWriteIoBandwidthKbpsLowerBuf - controllerWriteIoBandwidthKbpsUpperBuf - cpuCapacityHz - cpuUsageHz - freePhysicalStorageBytes - healthCheckScore - hypervisorCpuUsagePpm - hypervisorCpuUsagePpmLowerBuf - hypervisorCpuUsagePpmUpperBuf - ioBandwidthKbps - ioBandwidthKbpsLowerBuf - ioBandwidthKbpsUpperBuf - logicalStorageUsageBytes - memoryCapacityBytes - overallMemoryUsageBytes - overallSavingsBytes - overallSavingsRatio - powerConsumptionInstantWatt - recycleBinUsageBytes - snapshotCapacityBytes - storageCapacityBytes - storageUsageBytes 
    # @return [GetClusterStats200Response]
    def get_cluster_stats(ext_id, start_time, end_time, opts = {})
      data, _status_code, _headers = get_cluster_stats_with_http_info(ext_id, start_time, end_time, opts)
      data
    end

    # Get cluster statistics
    # Get the statistics data of the cluster identified by {clusterExtId}.
    # @param ext_id [String] Cluster UUID.
    # @param start_time [Time] The start time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, start time of 2022-04-23T01:23:45.678+09:00 would consider all stats starting at 1:23:45.678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    # @param end_time [Time] The end time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, end time of 2022-04-23T013:23:45.678+09:00 would consider all stats till 13:23:45 .678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :sampling_interval The sampling interval in seconds at which statistical data should be collected. For example, if you want performance statistics every 30 seconds, then provide the value as 30. 
    # @option opts [CommonV10StatsDownSamplingOperator] :stat_type 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - aggregateHypervisorMemoryUsagePpm - aggregateHypervisorMemoryUsagePpmLowerBuf - aggregateHypervisorMemoryUsagePpmUpperBuf - controllerAvgIoLatencyUsecs - controllerAvgIoLatencyUsecsLowerBuf - controllerAvgIoLatencyUsecsUpperBuf - controllerAvgReadIoLatencyUsecs - controllerAvgReadIoLatencyUsecsLowerBuf - controllerAvgReadIoLatencyUsecsUpperBuf - controllerAvgWriteIoLatencyUsecs - controllerAvgWriteIoLatencyUsecsLowerBuf - controllerAvgWriteIoLatencyUsecsUpperBuf - controllerNumIops - controllerNumIopsLowerBuf - controllerNumIopsUpperBuf - controllerNumReadIops - controllerNumReadIopsLowerBuf - controllerNumReadIopsUpperBuf - controllerNumWriteIops - controllerNumWriteIopsLowerBuf - controllerNumWriteIopsUpperBuf - controllerReadIoBandwidthKbps - controllerReadIoBandwidthKbpsLowerBuf - controllerReadIoBandwidthKbpsUpperBuf - controllerWriteIoBandwidthKbps - controllerWriteIoBandwidthKbpsLowerBuf - controllerWriteIoBandwidthKbpsUpperBuf - cpuCapacityHz - cpuUsageHz - freePhysicalStorageBytes - healthCheckScore - hypervisorCpuUsagePpm - hypervisorCpuUsagePpmLowerBuf - hypervisorCpuUsagePpmUpperBuf - ioBandwidthKbps - ioBandwidthKbpsLowerBuf - ioBandwidthKbpsUpperBuf - logicalStorageUsageBytes - memoryCapacityBytes - overallMemoryUsageBytes - overallSavingsBytes - overallSavingsRatio - powerConsumptionInstantWatt - recycleBinUsageBytes - snapshotCapacityBytes - storageCapacityBytes - storageUsageBytes 
    # @return [Array<(GetClusterStats200Response, Integer, Hash)>] GetClusterStats200Response data, response status code and response headers
    def get_cluster_stats_with_http_info(ext_id, start_time, end_time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.get_cluster_stats ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.get_cluster_stats"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.get_cluster_stats, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'start_time' is set
      if @api_client.config.client_side_validation && start_time.nil?
        fail ArgumentError, "Missing the required parameter 'start_time' when calling ClustersApi.get_cluster_stats"
      end
      # verify the required parameter 'end_time' is set
      if @api_client.config.client_side_validation && end_time.nil?
        fail ArgumentError, "Missing the required parameter 'end_time' when calling ClustersApi.get_cluster_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'sampling_interval'].nil? && opts[:'sampling_interval'] < 1
        fail ArgumentError, 'invalid value for "opts[:"sampling_interval"]" when calling ClustersApi.get_cluster_stats, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/stats/clusters/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$startTime'] = start_time
      query_params[:'$endTime'] = end_time
      query_params[:'$samplingInterval'] = opts[:'sampling_interval'] if !opts[:'sampling_interval'].nil?
      query_params[:'$statType'] = opts[:'stat_type'] if !opts[:'stat_type'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetClusterStats200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.get_cluster_stats",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#get_cluster_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the details of host associated with the cluster
    # Fetches the details of the host identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] Host UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetHostById200Response]
    def get_host_by_id(cluster_ext_id, ext_id, opts = {})
      data, _status_code, _headers = get_host_by_id_with_http_info(cluster_ext_id, ext_id, opts)
      data
    end

    # Get the details of host associated with the cluster
    # Fetches the details of the host identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] Host UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetHostById200Response, Integer, Hash)>] GetHostById200Response data, response status code and response headers
    def get_host_by_id_with_http_info(cluster_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.get_host_by_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.get_host_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.get_host_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.get_host_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.get_host_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/hosts/{extId}'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetHostById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.get_host_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#get_host_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get host NIC
    # Get the host NIC entity of the host identified by {hostExtId} belonging to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param host_ext_id [String] Host UUID.
    # @param ext_id [String] Host NIC UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetHostNicById200Response]
    def get_host_nic_by_id(cluster_ext_id, host_ext_id, ext_id, opts = {})
      data, _status_code, _headers = get_host_nic_by_id_with_http_info(cluster_ext_id, host_ext_id, ext_id, opts)
      data
    end

    # Get host NIC
    # Get the host NIC entity of the host identified by {hostExtId} belonging to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param host_ext_id [String] Host UUID.
    # @param ext_id [String] Host NIC UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetHostNicById200Response, Integer, Hash)>] GetHostNicById200Response data, response status code and response headers
    def get_host_nic_by_id_with_http_info(cluster_ext_id, host_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.get_host_nic_by_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.get_host_nic_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.get_host_nic_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'host_ext_id' is set
      if @api_client.config.client_side_validation && host_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_ext_id' when calling ClustersApi.get_host_nic_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && host_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'host_ext_id' when calling ClustersApi.get_host_nic_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.get_host_nic_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.get_host_nic_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/hosts/{hostExtId}/host-nics/{extId}'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'hostExtId' + '}', CGI.escape(host_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetHostNicById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.get_host_nic_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#get_host_nic_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get host statistics
    # Get the statistics data of the host identified by {hostExtId} belonging to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] Host UUID.
    # @param start_time [Time] The start time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, start time of 2022-04-23T01:23:45.678+09:00 would consider all stats starting at 1:23:45.678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    # @param end_time [Time] The end time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, end time of 2022-04-23T013:23:45.678+09:00 would consider all stats till 13:23:45 .678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :sampling_interval The sampling interval in seconds at which statistical data should be collected. For example, if you want performance statistics every 30 seconds, then provide the value as 30. 
    # @option opts [CommonV10StatsDownSamplingOperator] :stat_type 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - aggregateHypervisorMemoryUsagePpm - aggregateHypervisorMemoryUsagePpmLowerBuf - aggregateHypervisorMemoryUsagePpmUpperBuf - controllerAvgIoLatencyUsecs - controllerAvgIoLatencyUsecsLowerBuf - controllerAvgIoLatencyUsecsUpperBuf - controllerAvgReadIoLatencyUsecs - controllerAvgReadIoLatencyUsecsLowerBuf - controllerAvgReadIoLatencyUsecsUpperBuf - controllerAvgWriteIoLatencyUsecs - controllerAvgWriteIoLatencyUsecsLowerBuf - controllerAvgWriteIoLatencyUsecsUpperBuf - controllerNumIops - controllerNumIopsLowerBuf - controllerNumIopsUpperBuf - controllerNumReadIops - controllerNumReadIopsLowerBuf - controllerNumReadIopsUpperBuf - controllerNumWriteIops - controllerNumWriteIopsLowerBuf - controllerNumWriteIopsUpperBuf - controllerReadIoBandwidthKbps - controllerReadIoBandwidthKbpsLowerBuf - controllerReadIoBandwidthKbpsUpperBuf - controllerWriteIoBandwidthKbps - controllerWriteIoBandwidthKbpsLowerBuf - controllerWriteIoBandwidthKbpsUpperBuf - cpuCapacityHz - cpuUsageHz - freePhysicalStorageBytes - healthCheckScore - hypervisorCpuUsagePpm - hypervisorCpuUsagePpmLowerBuf - hypervisorCpuUsagePpmUpperBuf - ioBandwidthKbps - ioBandwidthKbpsLowerBuf - ioBandwidthKbpsUpperBuf - logicalStorageUsageBytes - memoryCapacityBytes - overallMemoryUsageBytes - overallMemoryUsagePpm - overallMemoryUsagePpmLowerBuf - overallMemoryUsagePpmUpperBuf - powerConsumptionInstantWatt - storageCapacityBytes - storageUsageBytes 
    # @return [GetHostStats200Response]
    def get_host_stats(cluster_ext_id, ext_id, start_time, end_time, opts = {})
      data, _status_code, _headers = get_host_stats_with_http_info(cluster_ext_id, ext_id, start_time, end_time, opts)
      data
    end

    # Get host statistics
    # Get the statistics data of the host identified by {hostExtId} belonging to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] Host UUID.
    # @param start_time [Time] The start time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, start time of 2022-04-23T01:23:45.678+09:00 would consider all stats starting at 1:23:45.678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    # @param end_time [Time] The end time of the period for which stats should be reported. The value should be in extended ISO-8601 format. For example, end time of 2022-04-23T013:23:45.678+09:00 would consider all stats till 13:23:45 .678 on the 23rd of April 2022. Details around ISO-8601 format can be found at https://www.iso.org/standard/70907.html 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :sampling_interval The sampling interval in seconds at which statistical data should be collected. For example, if you want performance statistics every 30 seconds, then provide the value as 30. 
    # @option opts [CommonV10StatsDownSamplingOperator] :stat_type 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - aggregateHypervisorMemoryUsagePpm - aggregateHypervisorMemoryUsagePpmLowerBuf - aggregateHypervisorMemoryUsagePpmUpperBuf - controllerAvgIoLatencyUsecs - controllerAvgIoLatencyUsecsLowerBuf - controllerAvgIoLatencyUsecsUpperBuf - controllerAvgReadIoLatencyUsecs - controllerAvgReadIoLatencyUsecsLowerBuf - controllerAvgReadIoLatencyUsecsUpperBuf - controllerAvgWriteIoLatencyUsecs - controllerAvgWriteIoLatencyUsecsLowerBuf - controllerAvgWriteIoLatencyUsecsUpperBuf - controllerNumIops - controllerNumIopsLowerBuf - controllerNumIopsUpperBuf - controllerNumReadIops - controllerNumReadIopsLowerBuf - controllerNumReadIopsUpperBuf - controllerNumWriteIops - controllerNumWriteIopsLowerBuf - controllerNumWriteIopsUpperBuf - controllerReadIoBandwidthKbps - controllerReadIoBandwidthKbpsLowerBuf - controllerReadIoBandwidthKbpsUpperBuf - controllerWriteIoBandwidthKbps - controllerWriteIoBandwidthKbpsLowerBuf - controllerWriteIoBandwidthKbpsUpperBuf - cpuCapacityHz - cpuUsageHz - freePhysicalStorageBytes - healthCheckScore - hypervisorCpuUsagePpm - hypervisorCpuUsagePpmLowerBuf - hypervisorCpuUsagePpmUpperBuf - ioBandwidthKbps - ioBandwidthKbpsLowerBuf - ioBandwidthKbpsUpperBuf - logicalStorageUsageBytes - memoryCapacityBytes - overallMemoryUsageBytes - overallMemoryUsagePpm - overallMemoryUsagePpmLowerBuf - overallMemoryUsagePpmUpperBuf - powerConsumptionInstantWatt - storageCapacityBytes - storageUsageBytes 
    # @return [Array<(GetHostStats200Response, Integer, Hash)>] GetHostStats200Response data, response status code and response headers
    def get_host_stats_with_http_info(cluster_ext_id, ext_id, start_time, end_time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.get_host_stats ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.get_host_stats"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.get_host_stats, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.get_host_stats"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.get_host_stats, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'start_time' is set
      if @api_client.config.client_side_validation && start_time.nil?
        fail ArgumentError, "Missing the required parameter 'start_time' when calling ClustersApi.get_host_stats"
      end
      # verify the required parameter 'end_time' is set
      if @api_client.config.client_side_validation && end_time.nil?
        fail ArgumentError, "Missing the required parameter 'end_time' when calling ClustersApi.get_host_stats"
      end
      if @api_client.config.client_side_validation && !opts[:'sampling_interval'].nil? && opts[:'sampling_interval'] < 1
        fail ArgumentError, 'invalid value for "opts[:"sampling_interval"]" when calling ClustersApi.get_host_stats, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/stats/clusters/{clusterExtId}/hosts/{extId}'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$startTime'] = start_time
      query_params[:'$endTime'] = end_time
      query_params[:'$samplingInterval'] = opts[:'sampling_interval'] if !opts[:'sampling_interval'].nil?
      query_params[:'$statType'] = opts[:'stat_type'] if !opts[:'stat_type'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetHostStats200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.get_host_stats",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#get_host_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the rackable unit details
    # Fetches the rackable unit entity details identified by {extId}  of the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] Rackable unit UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetRackableUnitById200Response]
    def get_rackable_unit_by_id(cluster_ext_id, ext_id, opts = {})
      data, _status_code, _headers = get_rackable_unit_by_id_with_http_info(cluster_ext_id, ext_id, opts)
      data
    end

    # Get the rackable unit details
    # Fetches the rackable unit entity details identified by {extId}  of the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] Rackable unit UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRackableUnitById200Response, Integer, Hash)>] GetRackableUnitById200Response data, response status code and response headers
    def get_rackable_unit_by_id_with_http_info(cluster_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.get_rackable_unit_by_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.get_rackable_unit_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.get_rackable_unit_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.get_rackable_unit_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.get_rackable_unit_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/rackable-units/{extId}'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRackableUnitById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.get_rackable_unit_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#get_rackable_unit_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get RSYSLOG server configuration
    # Fetches the RSYSLOG server configuration identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] RSYSLOG server UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetRsyslogServerById200Response]
    def get_rsyslog_server_by_id(cluster_ext_id, ext_id, opts = {})
      data, _status_code, _headers = get_rsyslog_server_by_id_with_http_info(cluster_ext_id, ext_id, opts)
      data
    end

    # Get RSYSLOG server configuration
    # Fetches the RSYSLOG server configuration identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] RSYSLOG server UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRsyslogServerById200Response, Integer, Hash)>] GetRsyslogServerById200Response data, response status code and response headers
    def get_rsyslog_server_by_id_with_http_info(cluster_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.get_rsyslog_server_by_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.get_rsyslog_server_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.get_rsyslog_server_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.get_rsyslog_server_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.get_rsyslog_server_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/rsyslog-servers/{extId}'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRsyslogServerById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.get_rsyslog_server_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#get_rsyslog_server_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SNMP config details of a cluster
    # Fetches SNMP config details of the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetSnmpConfigByClusterId200Response]
    def get_snmp_config_by_cluster_id(cluster_ext_id, opts = {})
      data, _status_code, _headers = get_snmp_config_by_cluster_id_with_http_info(cluster_ext_id, opts)
      data
    end

    # Get SNMP config details of a cluster
    # Fetches SNMP config details of the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSnmpConfigByClusterId200Response, Integer, Hash)>] GetSnmpConfigByClusterId200Response data, response status code and response headers
    def get_snmp_config_by_cluster_id_with_http_info(cluster_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.get_snmp_config_by_cluster_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.get_snmp_config_by_cluster_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.get_snmp_config_by_cluster_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/snmp'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSnmpConfigByClusterId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.get_snmp_config_by_cluster_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#get_snmp_config_by_cluster_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SNMP trap configuration details
    #  Fetches SNMP trap configuration details identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] SNMP trap UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetSnmpTrapById200Response]
    def get_snmp_trap_by_id(cluster_ext_id, ext_id, opts = {})
      data, _status_code, _headers = get_snmp_trap_by_id_with_http_info(cluster_ext_id, ext_id, opts)
      data
    end

    # Get SNMP trap configuration details
    #  Fetches SNMP trap configuration details identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] SNMP trap UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSnmpTrapById200Response, Integer, Hash)>] GetSnmpTrapById200Response data, response status code and response headers
    def get_snmp_trap_by_id_with_http_info(cluster_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.get_snmp_trap_by_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.get_snmp_trap_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.get_snmp_trap_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.get_snmp_trap_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.get_snmp_trap_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/snmp/traps/{extId}'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSnmpTrapById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.get_snmp_trap_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#get_snmp_trap_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SNMP user information
    # Fetches SNMP user configuration details identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] SNMP user UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetSnmpUserById200Response]
    def get_snmp_user_by_id(cluster_ext_id, ext_id, opts = {})
      data, _status_code, _headers = get_snmp_user_by_id_with_http_info(cluster_ext_id, ext_id, opts)
      data
    end

    # Get SNMP user information
    # Fetches SNMP user configuration details identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] SNMP user UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSnmpUserById200Response, Integer, Hash)>] GetSnmpUserById200Response data, response status code and response headers
    def get_snmp_user_by_id_with_http_info(cluster_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.get_snmp_user_by_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.get_snmp_user_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.get_snmp_user_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.get_snmp_user_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.get_snmp_user_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/snmp/users/{extId}'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSnmpUserById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.get_snmp_user_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#get_snmp_user_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get virtual NIC
    # Get the virtual NIC entity of the host identified by {hostExtId} belonging to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param host_ext_id [String] Host UUID.
    # @param ext_id [String] Virtual NIC UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetVirtualNicById200Response]
    def get_virtual_nic_by_id(cluster_ext_id, host_ext_id, ext_id, opts = {})
      data, _status_code, _headers = get_virtual_nic_by_id_with_http_info(cluster_ext_id, host_ext_id, ext_id, opts)
      data
    end

    # Get virtual NIC
    # Get the virtual NIC entity of the host identified by {hostExtId} belonging to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param host_ext_id [String] Host UUID.
    # @param ext_id [String] Virtual NIC UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetVirtualNicById200Response, Integer, Hash)>] GetVirtualNicById200Response data, response status code and response headers
    def get_virtual_nic_by_id_with_http_info(cluster_ext_id, host_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.get_virtual_nic_by_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.get_virtual_nic_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.get_virtual_nic_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'host_ext_id' is set
      if @api_client.config.client_side_validation && host_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_ext_id' when calling ClustersApi.get_virtual_nic_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && host_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'host_ext_id' when calling ClustersApi.get_virtual_nic_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.get_virtual_nic_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.get_virtual_nic_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/hosts/{hostExtId}/virtual-nics/{extId}'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'hostExtId' + '}', CGI.escape(host_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVirtualNicById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.get_virtual_nic_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#get_virtual_nic_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of clusters
    # Lists all cluster entities registered to Prism Central.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - backupEligibilityScore - clusterProfileExtId - config/buildInfo/version - config/clusterFunction - config/encryptionInTransitStatus - config/encryptionOption - config/encryptionScope - config/hypervisorTypes - config/isAvailable - extId - name - network/keyManagementServerType - upgradeStatus 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - backupEligibilityScore - config/buildInfo/version - config/isAvailable - extId - inefficientVmCount - name - network/keyManagementServerType - nodes/numberOfNodes - upgradeStatus - vmCount 
    # @option opts [String] :apply A URL query parameter that allows clients to specify a sequence of transformations to the entity set, such as groupby, filter, aggregate etc. As of now only support for groupby exists.For example &#39;$apply&#x3D;groupby((templateName))&#39; would get all templates grouped by templateName. The groupby can be applied on the following fields: - config/buildInfo/version - nodes/numberOfNodes 
    # @option opts [String] :expand A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. Each expanded item is evaluated relative to the entity containing the property being expanded. Other query options can be applied to an expanded property by appending a semicolon-separated list of query options, enclosed in parentheses, to the property name. Permissible system query options are $filter, $select and $orderby. The following expansion keys are supported. - clusterProfile - storageSummary 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - backupEligibilityScore - inefficientVmCount - name - upgradeStatus - vmCount 
    # @return [ListClusters200Response]
    def list_clusters(opts = {})
      data, _status_code, _headers = list_clusters_with_http_info(opts)
      data
    end

    # Get the list of clusters
    # Lists all cluster entities registered to Prism Central.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - backupEligibilityScore - clusterProfileExtId - config/buildInfo/version - config/clusterFunction - config/encryptionInTransitStatus - config/encryptionOption - config/encryptionScope - config/hypervisorTypes - config/isAvailable - extId - name - network/keyManagementServerType - upgradeStatus 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - backupEligibilityScore - config/buildInfo/version - config/isAvailable - extId - inefficientVmCount - name - network/keyManagementServerType - nodes/numberOfNodes - upgradeStatus - vmCount 
    # @option opts [String] :apply A URL query parameter that allows clients to specify a sequence of transformations to the entity set, such as groupby, filter, aggregate etc. As of now only support for groupby exists.For example &#39;$apply&#x3D;groupby((templateName))&#39; would get all templates grouped by templateName. The groupby can be applied on the following fields: - config/buildInfo/version - nodes/numberOfNodes 
    # @option opts [String] :expand A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. Each expanded item is evaluated relative to the entity containing the property being expanded. Other query options can be applied to an expanded property by appending a semicolon-separated list of query options, enclosed in parentheses, to the property name. Permissible system query options are $filter, $select and $orderby. The following expansion keys are supported. - clusterProfile - storageSummary 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - backupEligibilityScore - inefficientVmCount - name - upgradeStatus - vmCount 
    # @return [Array<(ListClusters200Response, Integer, Hash)>] ListClusters200Response data, response status code and response headers
    def list_clusters_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.list_clusters ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ClustersApi.list_clusters, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ClustersApi.list_clusters, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ClustersApi.list_clusters, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$expand'] = opts[:'expand'] if !opts[:'expand'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListClusters200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.list_clusters",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#list_clusters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of host NICs
    # Lists all host NICs for the host identified by {hostExtId} belonging to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param host_ext_id [String] Host UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - discoveryProtocol - extId - interfaceStatus - isDhcpEnabled - linkSpeedInKbps - macAddress - mtuInBytes - name - nodeUuid - rxRingSizeInBytes - switchDeviceId - switchMacAddress - switchPortId - switchVlanId - txRingSizeInBytes 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - extId - name 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - discoveryProtocol - hostDescription - interfaceStatus - isDhcpEnabled - linkSpeedInKbps - macAddress - mtuInBytes - name - nodeUuid - rxRingSizeInBytes - switchDeviceId - switchMacAddress - switchManagementIp - switchPortId - switchVlanId - txRingSizeInBytes 
    # @return [ListHostNicsByHostId200Response]
    def list_host_nics_by_host_id(cluster_ext_id, host_ext_id, opts = {})
      data, _status_code, _headers = list_host_nics_by_host_id_with_http_info(cluster_ext_id, host_ext_id, opts)
      data
    end

    # Get the list of host NICs
    # Lists all host NICs for the host identified by {hostExtId} belonging to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param host_ext_id [String] Host UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - discoveryProtocol - extId - interfaceStatus - isDhcpEnabled - linkSpeedInKbps - macAddress - mtuInBytes - name - nodeUuid - rxRingSizeInBytes - switchDeviceId - switchMacAddress - switchPortId - switchVlanId - txRingSizeInBytes 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - extId - name 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - discoveryProtocol - hostDescription - interfaceStatus - isDhcpEnabled - linkSpeedInKbps - macAddress - mtuInBytes - name - nodeUuid - rxRingSizeInBytes - switchDeviceId - switchMacAddress - switchManagementIp - switchPortId - switchVlanId - txRingSizeInBytes 
    # @return [Array<(ListHostNicsByHostId200Response, Integer, Hash)>] ListHostNicsByHostId200Response data, response status code and response headers
    def list_host_nics_by_host_id_with_http_info(cluster_ext_id, host_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.list_host_nics_by_host_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.list_host_nics_by_host_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.list_host_nics_by_host_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'host_ext_id' is set
      if @api_client.config.client_side_validation && host_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_ext_id' when calling ClustersApi.list_host_nics_by_host_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && host_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'host_ext_id' when calling ClustersApi.list_host_nics_by_host_id, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ClustersApi.list_host_nics_by_host_id, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ClustersApi.list_host_nics_by_host_id, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ClustersApi.list_host_nics_by_host_id, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/hosts/{hostExtId}/host-nics'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'hostExtId' + '}', CGI.escape(host_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListHostNicsByHostId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.list_host_nics_by_host_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#list_host_nics_by_host_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of all host entities
    # Lists all host entities across clusters registered to Prism Central.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - bootTimeUsecs - cluster/name - cluster/uuid - cpuCapacityHz - cpuFrequencyHz - cpuModel - defaultVhdContainerUuid - defaultVhdLocation - defaultVmContainerUuid - defaultVmLocation - extId - gpuDriverVersion - gpuList - hostName - hypervisor/type - memorySizeBytes - numberOfCpuCores - numberOfCpuSockets - numberOfCpuThreads 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - cluster/name - extId - hostName - hostType - hypervisor/type - memorySizeBytes 
    # @option opts [String] :apply A URL query parameter that allows clients to specify a sequence of transformations to the entity set, such as groupby, filter, aggregate etc. As of now only support for groupby exists.For example &#39;$apply&#x3D;groupby((templateName))&#39; would get all templates grouped by templateName. The groupby can be applied on the following fields: - cluster/name - hypervisor/type 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - blockModel - blockSerial - bootTimeUsecs - cluster - cpuCapacityHz - cpuFrequencyHz - cpuModel - defaultVhdContainerUuid - defaultVhdLocation - defaultVmContainerUuid - defaultVmLocation - failoverClusterFqdn - failoverClusterNodeStatus - gpuDriverVersion - gpuList - hostName - hostType - isRebootPending - maintenanceState - memorySizeBytes - nodeStatus - numberOfCpuCores - numberOfCpuSockets - numberOfCpuThreads 
    # @return [ListHosts200Response]
    def list_hosts(opts = {})
      data, _status_code, _headers = list_hosts_with_http_info(opts)
      data
    end

    # Get the list of all host entities
    # Lists all host entities across clusters registered to Prism Central.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - bootTimeUsecs - cluster/name - cluster/uuid - cpuCapacityHz - cpuFrequencyHz - cpuModel - defaultVhdContainerUuid - defaultVhdLocation - defaultVmContainerUuid - defaultVmLocation - extId - gpuDriverVersion - gpuList - hostName - hypervisor/type - memorySizeBytes - numberOfCpuCores - numberOfCpuSockets - numberOfCpuThreads 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - cluster/name - extId - hostName - hostType - hypervisor/type - memorySizeBytes 
    # @option opts [String] :apply A URL query parameter that allows clients to specify a sequence of transformations to the entity set, such as groupby, filter, aggregate etc. As of now only support for groupby exists.For example &#39;$apply&#x3D;groupby((templateName))&#39; would get all templates grouped by templateName. The groupby can be applied on the following fields: - cluster/name - hypervisor/type 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - blockModel - blockSerial - bootTimeUsecs - cluster - cpuCapacityHz - cpuFrequencyHz - cpuModel - defaultVhdContainerUuid - defaultVhdLocation - defaultVmContainerUuid - defaultVmLocation - failoverClusterFqdn - failoverClusterNodeStatus - gpuDriverVersion - gpuList - hostName - hostType - isRebootPending - maintenanceState - memorySizeBytes - nodeStatus - numberOfCpuCores - numberOfCpuSockets - numberOfCpuThreads 
    # @return [Array<(ListHosts200Response, Integer, Hash)>] ListHosts200Response data, response status code and response headers
    def list_hosts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.list_hosts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ClustersApi.list_hosts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ClustersApi.list_hosts, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ClustersApi.list_hosts, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/hosts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListHosts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.list_hosts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#list_hosts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of hosts associated with a cluster
    # Lists all the hosts associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - bootTimeUsecs - cluster/name - cluster/uuid - cpuCapacityHz - cpuFrequencyHz - cpuModel - defaultVhdContainerUuid - defaultVhdLocation - defaultVmContainerUuid - defaultVmLocation - extId - gpuDriverVersion - gpuList - hostName - hypervisor/type - memorySizeBytes - numberOfCpuCores - numberOfCpuSockets - numberOfCpuThreads 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - cluster/name - extId - hostName - hostType - hypervisor/type - memorySizeBytes 
    # @option opts [String] :apply A URL query parameter that allows clients to specify a sequence of transformations to the entity set, such as groupby, filter, aggregate etc. As of now only support for groupby exists.For example &#39;$apply&#x3D;groupby((templateName))&#39; would get all templates grouped by templateName. The groupby can be applied on the following fields: - cluster/name - hypervisor/type 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - blockModel - blockSerial - bootTimeUsecs - cluster - cpuCapacityHz - cpuFrequencyHz - cpuModel - defaultVhdContainerUuid - defaultVhdLocation - defaultVmContainerUuid - defaultVmLocation - failoverClusterFqdn - failoverClusterNodeStatus - gpuDriverVersion - gpuList - hostName - hostType - isRebootPending - maintenanceState - memorySizeBytes - nodeStatus - numberOfCpuCores - numberOfCpuSockets - numberOfCpuThreads 
    # @return [ListHostsByClusterId200Response]
    def list_hosts_by_cluster_id(cluster_ext_id, opts = {})
      data, _status_code, _headers = list_hosts_by_cluster_id_with_http_info(cluster_ext_id, opts)
      data
    end

    # Get the list of hosts associated with a cluster
    # Lists all the hosts associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - bootTimeUsecs - cluster/name - cluster/uuid - cpuCapacityHz - cpuFrequencyHz - cpuModel - defaultVhdContainerUuid - defaultVhdLocation - defaultVmContainerUuid - defaultVmLocation - extId - gpuDriverVersion - gpuList - hostName - hypervisor/type - memorySizeBytes - numberOfCpuCores - numberOfCpuSockets - numberOfCpuThreads 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - cluster/name - extId - hostName - hostType - hypervisor/type - memorySizeBytes 
    # @option opts [String] :apply A URL query parameter that allows clients to specify a sequence of transformations to the entity set, such as groupby, filter, aggregate etc. As of now only support for groupby exists.For example &#39;$apply&#x3D;groupby((templateName))&#39; would get all templates grouped by templateName. The groupby can be applied on the following fields: - cluster/name - hypervisor/type 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - blockModel - blockSerial - bootTimeUsecs - cluster - cpuCapacityHz - cpuFrequencyHz - cpuModel - defaultVhdContainerUuid - defaultVhdLocation - defaultVmContainerUuid - defaultVmLocation - failoverClusterFqdn - failoverClusterNodeStatus - gpuDriverVersion - gpuList - hostName - hostType - isRebootPending - maintenanceState - memorySizeBytes - nodeStatus - numberOfCpuCores - numberOfCpuSockets - numberOfCpuThreads 
    # @return [Array<(ListHostsByClusterId200Response, Integer, Hash)>] ListHostsByClusterId200Response data, response status code and response headers
    def list_hosts_by_cluster_id_with_http_info(cluster_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.list_hosts_by_cluster_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.list_hosts_by_cluster_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.list_hosts_by_cluster_id, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ClustersApi.list_hosts_by_cluster_id, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ClustersApi.list_hosts_by_cluster_id, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ClustersApi.list_hosts_by_cluster_id, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/hosts'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$apply'] = opts[:'apply'] if !opts[:'apply'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListHostsByClusterId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.list_hosts_by_cluster_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#list_hosts_by_cluster_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Physical GPU profiles.
    # List Physical GPU profiles.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - physicalGpuConfig/deviceId - physicalGpuConfig/deviceName - physicalGpuConfig/frameBufferSizeBytes - physicalGpuConfig/isInUse - physicalGpuConfig/type - physicalGpuConfig/vendorName 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - physicalGpuConfig/deviceId - physicalGpuConfig/frameBufferSizeBytes 
    # @return [ListPhysicalGpuProfiles200Response]
    def list_physical_gpu_profiles(cluster_ext_id, opts = {})
      data, _status_code, _headers = list_physical_gpu_profiles_with_http_info(cluster_ext_id, opts)
      data
    end

    # List Physical GPU profiles.
    # List Physical GPU profiles.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - physicalGpuConfig/deviceId - physicalGpuConfig/deviceName - physicalGpuConfig/frameBufferSizeBytes - physicalGpuConfig/isInUse - physicalGpuConfig/type - physicalGpuConfig/vendorName 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - physicalGpuConfig/deviceId - physicalGpuConfig/frameBufferSizeBytes 
    # @return [Array<(ListPhysicalGpuProfiles200Response, Integer, Hash)>] ListPhysicalGpuProfiles200Response data, response status code and response headers
    def list_physical_gpu_profiles_with_http_info(cluster_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.list_physical_gpu_profiles ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.list_physical_gpu_profiles"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.list_physical_gpu_profiles, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ClustersApi.list_physical_gpu_profiles, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ClustersApi.list_physical_gpu_profiles, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ClustersApi.list_physical_gpu_profiles, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/physical-gpu-profiles'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListPhysicalGpuProfiles200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.list_physical_gpu_profiles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#list_physical_gpu_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of rackable units
    # Lists the rackable units of the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param [Hash] opts the optional parameters
    # @return [ListRackableUnitsByClusterId200Response]
    def list_rackable_units_by_cluster_id(cluster_ext_id, opts = {})
      data, _status_code, _headers = list_rackable_units_by_cluster_id_with_http_info(cluster_ext_id, opts)
      data
    end

    # Get the list of rackable units
    # Lists the rackable units of the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListRackableUnitsByClusterId200Response, Integer, Hash)>] ListRackableUnitsByClusterId200Response data, response status code and response headers
    def list_rackable_units_by_cluster_id_with_http_info(cluster_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.list_rackable_units_by_cluster_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.list_rackable_units_by_cluster_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.list_rackable_units_by_cluster_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/rackable-units'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListRackableUnitsByClusterId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.list_rackable_units_by_cluster_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#list_rackable_units_by_cluster_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of RSYSLOG server configurations
    # Lists the RSYSLOG server configurations associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param [Hash] opts the optional parameters
    # @return [ListRsyslogServersByClusterId200Response]
    def list_rsyslog_servers_by_cluster_id(cluster_ext_id, opts = {})
      data, _status_code, _headers = list_rsyslog_servers_by_cluster_id_with_http_info(cluster_ext_id, opts)
      data
    end

    # Get the list of RSYSLOG server configurations
    # Lists the RSYSLOG server configurations associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListRsyslogServersByClusterId200Response, Integer, Hash)>] ListRsyslogServersByClusterId200Response data, response status code and response headers
    def list_rsyslog_servers_by_cluster_id_with_http_info(cluster_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.list_rsyslog_servers_by_cluster_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.list_rsyslog_servers_by_cluster_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.list_rsyslog_servers_by_cluster_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/rsyslog-servers'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListRsyslogServersByClusterId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.list_rsyslog_servers_by_cluster_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#list_rsyslog_servers_by_cluster_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Virtual GPU profiles.
    # List Virtual GPU profiles.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - virtualGpuConfig/deviceId - virtualGpuConfig/deviceName - virtualGpuConfig/frameBufferSizeBytes - virtualGpuConfig/isInUse - virtualGpuConfig/maxInstancesPerVm - virtualGpuConfig/type - virtualGpuConfig/vendorName 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - virtualGpuConfig/deviceId - virtualGpuConfig/frameBufferSizeBytes 
    # @return [ListVirtualGpuProfiles200Response]
    def list_virtual_gpu_profiles(cluster_ext_id, opts = {})
      data, _status_code, _headers = list_virtual_gpu_profiles_with_http_info(cluster_ext_id, opts)
      data
    end

    # List Virtual GPU profiles.
    # List Virtual GPU profiles.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - virtualGpuConfig/deviceId - virtualGpuConfig/deviceName - virtualGpuConfig/frameBufferSizeBytes - virtualGpuConfig/isInUse - virtualGpuConfig/maxInstancesPerVm - virtualGpuConfig/type - virtualGpuConfig/vendorName 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - virtualGpuConfig/deviceId - virtualGpuConfig/frameBufferSizeBytes 
    # @return [Array<(ListVirtualGpuProfiles200Response, Integer, Hash)>] ListVirtualGpuProfiles200Response data, response status code and response headers
    def list_virtual_gpu_profiles_with_http_info(cluster_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.list_virtual_gpu_profiles ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.list_virtual_gpu_profiles"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.list_virtual_gpu_profiles, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ClustersApi.list_virtual_gpu_profiles, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ClustersApi.list_virtual_gpu_profiles, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ClustersApi.list_virtual_gpu_profiles, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/virtual-gpu-profiles'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListVirtualGpuProfiles200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.list_virtual_gpu_profiles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#list_virtual_gpu_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of virtual NICs
    # Lists all virtual NICs for the host identified by {extId} belonging to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param host_ext_id [String] Host UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - extId - interfaceStatus - isDhcpEnabled - linkSpeedInKbps - macAddress - mtuInBytes - name - nodeUuid - vlanId 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - extId - name 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - hostDescription - interfaceStatus - isDhcpEnabled - linkSpeedInKbps - macAddress - mtuInBytes - name - nodeUuid - vlanId 
    # @return [ListVirtualNicsByHostId200Response]
    def list_virtual_nics_by_host_id(cluster_ext_id, host_ext_id, opts = {})
      data, _status_code, _headers = list_virtual_nics_by_host_id_with_http_info(cluster_ext_id, host_ext_id, opts)
      data
    end

    # Get the list of virtual NICs
    # Lists all virtual NICs for the host identified by {extId} belonging to the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param host_ext_id [String] Host UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - extId - interfaceStatus - isDhcpEnabled - linkSpeedInKbps - macAddress - mtuInBytes - name - nodeUuid - vlanId 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - extId - name 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - hostDescription - interfaceStatus - isDhcpEnabled - linkSpeedInKbps - macAddress - mtuInBytes - name - nodeUuid - vlanId 
    # @return [Array<(ListVirtualNicsByHostId200Response, Integer, Hash)>] ListVirtualNicsByHostId200Response data, response status code and response headers
    def list_virtual_nics_by_host_id_with_http_info(cluster_ext_id, host_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.list_virtual_nics_by_host_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.list_virtual_nics_by_host_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.list_virtual_nics_by_host_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'host_ext_id' is set
      if @api_client.config.client_side_validation && host_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'host_ext_id' when calling ClustersApi.list_virtual_nics_by_host_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && host_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'host_ext_id' when calling ClustersApi.list_virtual_nics_by_host_id, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ClustersApi.list_virtual_nics_by_host_id, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ClustersApi.list_virtual_nics_by_host_id, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ClustersApi.list_virtual_nics_by_host_id, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/hosts/{hostExtId}/virtual-nics'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'hostExtId' + '}', CGI.escape(host_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListVirtualNicsByHostId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.list_virtual_nics_by_host_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#list_virtual_nics_by_host_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove nodes from the cluster
    # Removes nodes from cluster identified by {extId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_node_removal_params [ClustermgmtV40ConfigNodeRemovalParams] Parameters to remove nodes from cluster.
    # @param [Hash] opts the optional parameters
    # @return [RemoveNode202Response]
    def remove_node(cluster_ext_id, ntnx_request_id, clustermgmt_v40_config_node_removal_params, opts = {})
      data, _status_code, _headers = remove_node_with_http_info(cluster_ext_id, ntnx_request_id, clustermgmt_v40_config_node_removal_params, opts)
      data
    end

    # Remove nodes from the cluster
    # Removes nodes from cluster identified by {extId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_node_removal_params [ClustermgmtV40ConfigNodeRemovalParams] Parameters to remove nodes from cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemoveNode202Response, Integer, Hash)>] RemoveNode202Response data, response status code and response headers
    def remove_node_with_http_info(cluster_ext_id, ntnx_request_id, clustermgmt_v40_config_node_removal_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.remove_node ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.remove_node"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.remove_node, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling ClustersApi.remove_node"
      end
      # verify the required parameter 'clustermgmt_v40_config_node_removal_params' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_node_removal_params.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_node_removal_params' when calling ClustersApi.remove_node"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/$actions/remove-node'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_node_removal_params)

      # return_type
      return_type = opts[:debug_return_type] || 'RemoveNode202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.remove_node",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#remove_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove SNMP transport ports and protocol details
    # Removes transport ports and protocol detail from the SNMP configuration associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_snmp_transport [ClustermgmtV40ConfigSnmpTransport] SNMP transports to remove.
    # @param [Hash] opts the optional parameters
    # @return [RemoveSnmpTransport202Response]
    def remove_snmp_transport(cluster_ext_id, clustermgmt_v40_config_snmp_transport, opts = {})
      data, _status_code, _headers = remove_snmp_transport_with_http_info(cluster_ext_id, clustermgmt_v40_config_snmp_transport, opts)
      data
    end

    # Remove SNMP transport ports and protocol details
    # Removes transport ports and protocol detail from the SNMP configuration associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_snmp_transport [ClustermgmtV40ConfigSnmpTransport] SNMP transports to remove.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RemoveSnmpTransport202Response, Integer, Hash)>] RemoveSnmpTransport202Response data, response status code and response headers
    def remove_snmp_transport_with_http_info(cluster_ext_id, clustermgmt_v40_config_snmp_transport, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.remove_snmp_transport ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.remove_snmp_transport"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.remove_snmp_transport, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'clustermgmt_v40_config_snmp_transport' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_snmp_transport.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_snmp_transport' when calling ClustersApi.remove_snmp_transport"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/snmp/$actions/remove-transports'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_snmp_transport)

      # return_type
      return_type = opts[:debug_return_type] || 'RemoveSnmpTransport202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.remove_snmp_transport",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#remove_snmp_transport\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update cluster
    # Update cluster operation.
    # @param ext_id [String] Cluster UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param clustermgmt_v40_config_cluster [ClustermgmtV40ConfigCluster] Cluster resource to update.
    # @param [Hash] opts the optional parameters
    # @return [UpdateClusterById202Response]
    def update_cluster_by_id(ext_id, if_match, clustermgmt_v40_config_cluster, opts = {})
      data, _status_code, _headers = update_cluster_by_id_with_http_info(ext_id, if_match, clustermgmt_v40_config_cluster, opts)
      data
    end

    # Update cluster
    # Update cluster operation.
    # @param ext_id [String] Cluster UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param clustermgmt_v40_config_cluster [ClustermgmtV40ConfigCluster] Cluster resource to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateClusterById202Response, Integer, Hash)>] UpdateClusterById202Response data, response status code and response headers
    def update_cluster_by_id_with_http_info(ext_id, if_match, clustermgmt_v40_config_cluster, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.update_cluster_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.update_cluster_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.update_cluster_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling ClustersApi.update_cluster_by_id"
      end
      # verify the required parameter 'clustermgmt_v40_config_cluster' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_cluster.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_cluster' when calling ClustersApi.update_cluster_by_id"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_cluster)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateClusterById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.update_cluster_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#update_cluster_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update RSYSLOG server configuration
    # Update RSYSLOG server configuration except RSYSLOG server name as it is a primary key of the entity.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] RSYSLOG server UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param clustermgmt_v40_config_rsyslog_server [ClustermgmtV40ConfigRsyslogServer] RSYSLOG server to update.
    # @param [Hash] opts the optional parameters
    # @return [UpdateRsyslogServerById202Response]
    def update_rsyslog_server_by_id(cluster_ext_id, ext_id, if_match, clustermgmt_v40_config_rsyslog_server, opts = {})
      data, _status_code, _headers = update_rsyslog_server_by_id_with_http_info(cluster_ext_id, ext_id, if_match, clustermgmt_v40_config_rsyslog_server, opts)
      data
    end

    # Update RSYSLOG server configuration
    # Update RSYSLOG server configuration except RSYSLOG server name as it is a primary key of the entity.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] RSYSLOG server UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param clustermgmt_v40_config_rsyslog_server [ClustermgmtV40ConfigRsyslogServer] RSYSLOG server to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateRsyslogServerById202Response, Integer, Hash)>] UpdateRsyslogServerById202Response data, response status code and response headers
    def update_rsyslog_server_by_id_with_http_info(cluster_ext_id, ext_id, if_match, clustermgmt_v40_config_rsyslog_server, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.update_rsyslog_server_by_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.update_rsyslog_server_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.update_rsyslog_server_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.update_rsyslog_server_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.update_rsyslog_server_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling ClustersApi.update_rsyslog_server_by_id"
      end
      # verify the required parameter 'clustermgmt_v40_config_rsyslog_server' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_rsyslog_server.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_rsyslog_server' when calling ClustersApi.update_rsyslog_server_by_id"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/rsyslog-servers/{extId}'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_rsyslog_server)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateRsyslogServerById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.update_rsyslog_server_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#update_rsyslog_server_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update SNMP status
    # Updates the status of SNMP configuration associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_snmp_status_param [ClustermgmtV40ConfigSnmpStatusParam] SNMP status.
    # @param [Hash] opts the optional parameters
    # @return [UpdateSnmpStatus202Response]
    def update_snmp_status(cluster_ext_id, clustermgmt_v40_config_snmp_status_param, opts = {})
      data, _status_code, _headers = update_snmp_status_with_http_info(cluster_ext_id, clustermgmt_v40_config_snmp_status_param, opts)
      data
    end

    # Update SNMP status
    # Updates the status of SNMP configuration associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_snmp_status_param [ClustermgmtV40ConfigSnmpStatusParam] SNMP status.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateSnmpStatus202Response, Integer, Hash)>] UpdateSnmpStatus202Response data, response status code and response headers
    def update_snmp_status_with_http_info(cluster_ext_id, clustermgmt_v40_config_snmp_status_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.update_snmp_status ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.update_snmp_status"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.update_snmp_status, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'clustermgmt_v40_config_snmp_status_param' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_snmp_status_param.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_snmp_status_param' when calling ClustersApi.update_snmp_status"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/snmp/$actions/update-status'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_snmp_status_param)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateSnmpStatus202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.update_snmp_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#update_snmp_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update SNMP trap
    # Update SNMP trap configuration identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] SNMP trap UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param clustermgmt_v40_config_snmp_trap [ClustermgmtV40ConfigSnmpTrap] SNMP trap to update.
    # @param [Hash] opts the optional parameters
    # @return [UpdateSnmpTrapById202Response]
    def update_snmp_trap_by_id(cluster_ext_id, ext_id, if_match, clustermgmt_v40_config_snmp_trap, opts = {})
      data, _status_code, _headers = update_snmp_trap_by_id_with_http_info(cluster_ext_id, ext_id, if_match, clustermgmt_v40_config_snmp_trap, opts)
      data
    end

    # Update SNMP trap
    # Update SNMP trap configuration identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] SNMP trap UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param clustermgmt_v40_config_snmp_trap [ClustermgmtV40ConfigSnmpTrap] SNMP trap to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateSnmpTrapById202Response, Integer, Hash)>] UpdateSnmpTrapById202Response data, response status code and response headers
    def update_snmp_trap_by_id_with_http_info(cluster_ext_id, ext_id, if_match, clustermgmt_v40_config_snmp_trap, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.update_snmp_trap_by_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.update_snmp_trap_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.update_snmp_trap_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.update_snmp_trap_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.update_snmp_trap_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling ClustersApi.update_snmp_trap_by_id"
      end
      # verify the required parameter 'clustermgmt_v40_config_snmp_trap' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_snmp_trap.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_snmp_trap' when calling ClustersApi.update_snmp_trap_by_id"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/snmp/traps/{extId}'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_snmp_trap)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateSnmpTrapById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.update_snmp_trap_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#update_snmp_trap_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update SNMP user
    # Updates SNMP user configuration identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] SNMP user UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param clustermgmt_v40_config_snmp_user [ClustermgmtV40ConfigSnmpUser] SNMP user to update.
    # @param [Hash] opts the optional parameters
    # @return [UpdateSnmpUserById202Response]
    def update_snmp_user_by_id(cluster_ext_id, ext_id, if_match, clustermgmt_v40_config_snmp_user, opts = {})
      data, _status_code, _headers = update_snmp_user_by_id_with_http_info(cluster_ext_id, ext_id, if_match, clustermgmt_v40_config_snmp_user, opts)
      data
    end

    # Update SNMP user
    # Updates SNMP user configuration identified by {extId} associated with the cluster identified by {clusterExtId}.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param ext_id [String] SNMP user UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param clustermgmt_v40_config_snmp_user [ClustermgmtV40ConfigSnmpUser] SNMP user to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateSnmpUserById202Response, Integer, Hash)>] UpdateSnmpUserById202Response data, response status code and response headers
    def update_snmp_user_by_id_with_http_info(cluster_ext_id, ext_id, if_match, clustermgmt_v40_config_snmp_user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.update_snmp_user_by_id ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.update_snmp_user_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.update_snmp_user_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClustersApi.update_snmp_user_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClustersApi.update_snmp_user_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling ClustersApi.update_snmp_user_by_id"
      end
      # verify the required parameter 'clustermgmt_v40_config_snmp_user' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_snmp_user.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_snmp_user' when calling ClustersApi.update_snmp_user_by_id"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/snmp/users/{extId}'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_snmp_user)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateSnmpUserById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.update_snmp_user_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#update_snmp_user_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validates hypervisor bundle and node uplinks
    # Validates hypervisor bundle and node uplinks of the node. This API is not supported for XEN hypervisor type.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_validate_node_param [ClustermgmtV40ConfigValidateNodeParam] Request body for node validation. It can be OneOf between hypervisor bundle and node uplinks.
    # @param [Hash] opts the optional parameters
    # @return [ValidateNode202Response]
    def validate_node(cluster_ext_id, clustermgmt_v40_config_validate_node_param, opts = {})
      data, _status_code, _headers = validate_node_with_http_info(cluster_ext_id, clustermgmt_v40_config_validate_node_param, opts)
      data
    end

    # Validates hypervisor bundle and node uplinks
    # Validates hypervisor bundle and node uplinks of the node. This API is not supported for XEN hypervisor type.
    # @param cluster_ext_id [String] Cluster UUID.
    # @param clustermgmt_v40_config_validate_node_param [ClustermgmtV40ConfigValidateNodeParam] Request body for node validation. It can be OneOf between hypervisor bundle and node uplinks.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidateNode202Response, Integer, Hash)>] ValidateNode202Response data, response status code and response headers
    def validate_node_with_http_info(cluster_ext_id, clustermgmt_v40_config_validate_node_param, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClustersApi.validate_node ...'
      end
      # verify the required parameter 'cluster_ext_id' is set
      if @api_client.config.client_side_validation && cluster_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_ext_id' when calling ClustersApi.validate_node"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && cluster_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'cluster_ext_id' when calling ClustersApi.validate_node, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'clustermgmt_v40_config_validate_node_param' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_validate_node_param.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_validate_node_param' when calling ClustersApi.validate_node"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/clusters/{clusterExtId}/$actions/validate-node'.sub('{' + 'clusterExtId' + '}', CGI.escape(cluster_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_validate_node_param)

      # return_type
      return_type = opts[:debug_return_type] || 'ValidateNode202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClustersApi.validate_node",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClustersApi#validate_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
