=begin
#Nutanix Cluster Management APIs

#Manage Hosts, Clusters and other Infrastructure.

The version of the OpenAPI document: 4.0.2

Generated by: https://openapi-generator.tech
Generator version: 7.16.0

=end

require 'cgi'

module NutanixClustermgmt
  class ClusterProfilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Apply cluster profile
    # Apply profile to all the attached clusters
    # @param ext_id [String] Cluster Profile UUID
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_cluster_reference_list_spec [ClustermgmtV40ConfigClusterReferenceListSpec] Payload for applying profile, which will accept a list of cluster UUIDs
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dryrun A URL query parameter that allows long running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true. 
    # @return [ApplyClusterProfile202Response]
    def apply_cluster_profile(ext_id, ntnx_request_id, clustermgmt_v40_config_cluster_reference_list_spec, opts = {})
      data, _status_code, _headers = apply_cluster_profile_with_http_info(ext_id, ntnx_request_id, clustermgmt_v40_config_cluster_reference_list_spec, opts)
      data
    end

    # Apply cluster profile
    # Apply profile to all the attached clusters
    # @param ext_id [String] Cluster Profile UUID
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_cluster_reference_list_spec [ClustermgmtV40ConfigClusterReferenceListSpec] Payload for applying profile, which will accept a list of cluster UUIDs
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dryrun A URL query parameter that allows long running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true. 
    # @return [Array<(ApplyClusterProfile202Response, Integer, Hash)>] ApplyClusterProfile202Response data, response status code and response headers
    def apply_cluster_profile_with_http_info(ext_id, ntnx_request_id, clustermgmt_v40_config_cluster_reference_list_spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterProfilesApi.apply_cluster_profile ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClusterProfilesApi.apply_cluster_profile"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClusterProfilesApi.apply_cluster_profile, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling ClusterProfilesApi.apply_cluster_profile"
      end
      # verify the required parameter 'clustermgmt_v40_config_cluster_reference_list_spec' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_cluster_reference_list_spec.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_cluster_reference_list_spec' when calling ClusterProfilesApi.apply_cluster_profile"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/cluster-profiles/{extId}/$actions/apply'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$dryrun'] = opts[:'dryrun'] if !opts[:'dryrun'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_cluster_reference_list_spec)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplyClusterProfile202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClusterProfilesApi.apply_cluster_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterProfilesApi#apply_cluster_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a cluster profile
    # Create cluster profile with the required settings
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_cluster_profile [ClustermgmtV40ConfigClusterProfile] The required parameters to create a cluster profile
    # @param [Hash] opts the optional parameters
    # @return [CreateClusterProfile202Response]
    def create_cluster_profile(ntnx_request_id, clustermgmt_v40_config_cluster_profile, opts = {})
      data, _status_code, _headers = create_cluster_profile_with_http_info(ntnx_request_id, clustermgmt_v40_config_cluster_profile, opts)
      data
    end

    # Create a cluster profile
    # Create cluster profile with the required settings
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_cluster_profile [ClustermgmtV40ConfigClusterProfile] The required parameters to create a cluster profile
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateClusterProfile202Response, Integer, Hash)>] CreateClusterProfile202Response data, response status code and response headers
    def create_cluster_profile_with_http_info(ntnx_request_id, clustermgmt_v40_config_cluster_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterProfilesApi.create_cluster_profile ...'
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling ClusterProfilesApi.create_cluster_profile"
      end
      # verify the required parameter 'clustermgmt_v40_config_cluster_profile' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_cluster_profile.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_cluster_profile' when calling ClusterProfilesApi.create_cluster_profile"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/cluster-profiles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_cluster_profile)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateClusterProfile202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClusterProfilesApi.create_cluster_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterProfilesApi#create_cluster_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete cluster profile
    # Delete cluster profile. Profile consist of different cluster settings like NTP, DNS etc.
    # @param ext_id [String] Cluster Profile UUID
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [DeleteClusterProfileById202Response]
    def delete_cluster_profile_by_id(ext_id, ntnx_request_id, opts = {})
      data, _status_code, _headers = delete_cluster_profile_by_id_with_http_info(ext_id, ntnx_request_id, opts)
      data
    end

    # Delete cluster profile
    # Delete cluster profile. Profile consist of different cluster settings like NTP, DNS etc.
    # @param ext_id [String] Cluster Profile UUID
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteClusterProfileById202Response, Integer, Hash)>] DeleteClusterProfileById202Response data, response status code and response headers
    def delete_cluster_profile_by_id_with_http_info(ext_id, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterProfilesApi.delete_cluster_profile_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClusterProfilesApi.delete_cluster_profile_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClusterProfilesApi.delete_cluster_profile_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling ClusterProfilesApi.delete_cluster_profile_by_id"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/cluster-profiles/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteClusterProfileById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClusterProfilesApi.delete_cluster_profile_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterProfilesApi#delete_cluster_profile_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disassociate cluster from a cluster profile
    # Disassociate cluster from a profile
    # @param ext_id [String] Cluster Profile UUID
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_cluster_reference_list_spec [ClustermgmtV40ConfigClusterReferenceListSpec] Payload for disassociating clusters, which will accept a list of cluster UUIDs
    # @param [Hash] opts the optional parameters
    # @return [DisassociateClusterFromClusterProfile202Response]
    def disassociate_cluster_from_cluster_profile(ext_id, ntnx_request_id, clustermgmt_v40_config_cluster_reference_list_spec, opts = {})
      data, _status_code, _headers = disassociate_cluster_from_cluster_profile_with_http_info(ext_id, ntnx_request_id, clustermgmt_v40_config_cluster_reference_list_spec, opts)
      data
    end

    # Disassociate cluster from a cluster profile
    # Disassociate cluster from a profile
    # @param ext_id [String] Cluster Profile UUID
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_cluster_reference_list_spec [ClustermgmtV40ConfigClusterReferenceListSpec] Payload for disassociating clusters, which will accept a list of cluster UUIDs
    # @param [Hash] opts the optional parameters
    # @return [Array<(DisassociateClusterFromClusterProfile202Response, Integer, Hash)>] DisassociateClusterFromClusterProfile202Response data, response status code and response headers
    def disassociate_cluster_from_cluster_profile_with_http_info(ext_id, ntnx_request_id, clustermgmt_v40_config_cluster_reference_list_spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterProfilesApi.disassociate_cluster_from_cluster_profile ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClusterProfilesApi.disassociate_cluster_from_cluster_profile"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClusterProfilesApi.disassociate_cluster_from_cluster_profile, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling ClusterProfilesApi.disassociate_cluster_from_cluster_profile"
      end
      # verify the required parameter 'clustermgmt_v40_config_cluster_reference_list_spec' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_cluster_reference_list_spec.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_cluster_reference_list_spec' when calling ClusterProfilesApi.disassociate_cluster_from_cluster_profile"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/cluster-profiles/{extId}/$actions/disassociate-cluster'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_cluster_reference_list_spec)

      # return_type
      return_type = opts[:debug_return_type] || 'DisassociateClusterFromClusterProfile202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClusterProfilesApi.disassociate_cluster_from_cluster_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterProfilesApi#disassociate_cluster_from_cluster_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get cluster profile
    # Get cluster profile. Profile consist of different cluster settings like NTP, DNS etc.
    # @param ext_id [String] Cluster Profile UUID
    # @param [Hash] opts the optional parameters
    # @return [GetClusterProfileById200Response]
    def get_cluster_profile_by_id(ext_id, opts = {})
      data, _status_code, _headers = get_cluster_profile_by_id_with_http_info(ext_id, opts)
      data
    end

    # Get cluster profile
    # Get cluster profile. Profile consist of different cluster settings like NTP, DNS etc.
    # @param ext_id [String] Cluster Profile UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetClusterProfileById200Response, Integer, Hash)>] GetClusterProfileById200Response data, response status code and response headers
    def get_cluster_profile_by_id_with_http_info(ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterProfilesApi.get_cluster_profile_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClusterProfilesApi.get_cluster_profile_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClusterProfilesApi.get_cluster_profile_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/cluster-profiles/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetClusterProfileById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClusterProfilesApi.get_cluster_profile_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterProfilesApi#get_cluster_profile_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List cluster profiles
    # Fetches a list of cluster profile entities. A profile consists of different cluster settings like Network Time Protocol(NTP), Domain Name System(DNS), and so on.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - clusterCount - createTime - createdBy - driftedClusterCount - lastUpdateTime - lastUpdatedBy - name 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - clusterCount - createTime - createdBy - driftedClusterCount - lastUpdateTime - lastUpdatedBy - name 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - allowedOverrides - clusterCount - clusters - createTime - createdBy - description - driftedClusterCount - extId - lastUpdateTime - lastUpdatedBy - links - name - nameServerIpList - nfsSubnetWhitelist - ntpServerIpList - pulseStatus - rsyslogServerList - smtpServer - snmpConfig - tenantId 
    # @return [ListClusterProfiles200Response]
    def list_cluster_profiles(opts = {})
      data, _status_code, _headers = list_cluster_profiles_with_http_info(opts)
      data
    end

    # List cluster profiles
    # Fetches a list of cluster profile entities. A profile consists of different cluster settings like Network Time Protocol(NTP), Domain Name System(DNS), and so on.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - clusterCount - createTime - createdBy - driftedClusterCount - lastUpdateTime - lastUpdatedBy - name 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - clusterCount - createTime - createdBy - driftedClusterCount - lastUpdateTime - lastUpdatedBy - name 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - allowedOverrides - clusterCount - clusters - createTime - createdBy - description - driftedClusterCount - extId - lastUpdateTime - lastUpdatedBy - links - name - nameServerIpList - nfsSubnetWhitelist - ntpServerIpList - pulseStatus - rsyslogServerList - smtpServer - snmpConfig - tenantId 
    # @return [Array<(ListClusterProfiles200Response, Integer, Hash)>] ListClusterProfiles200Response data, response status code and response headers
    def list_cluster_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterProfilesApi.list_cluster_profiles ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ClusterProfilesApi.list_cluster_profiles, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ClusterProfilesApi.list_cluster_profiles, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ClusterProfilesApi.list_cluster_profiles, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/clustermgmt/v4.0/config/cluster-profiles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListClusterProfiles200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClusterProfilesApi.list_cluster_profiles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterProfilesApi#list_cluster_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update cluster profile
    # Update cluster profile. Profile consist of different cluster settings like NTP, DNS etc.
    # @param ext_id [String] Cluster Profile UUID
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_cluster_profile [ClustermgmtV40ConfigClusterProfile] The required parameters to update a profile
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dryrun A URL query parameter that allows long running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true. 
    # @return [UpdateClusterProfileById202Response]
    def update_cluster_profile_by_id(ext_id, if_match, ntnx_request_id, clustermgmt_v40_config_cluster_profile, opts = {})
      data, _status_code, _headers = update_cluster_profile_by_id_with_http_info(ext_id, if_match, ntnx_request_id, clustermgmt_v40_config_cluster_profile, opts)
      data
    end

    # Update cluster profile
    # Update cluster profile. Profile consist of different cluster settings like NTP, DNS etc.
    # @param ext_id [String] Cluster Profile UUID
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param clustermgmt_v40_config_cluster_profile [ClustermgmtV40ConfigClusterProfile] The required parameters to update a profile
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dryrun A URL query parameter that allows long running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true. 
    # @return [Array<(UpdateClusterProfileById202Response, Integer, Hash)>] UpdateClusterProfileById202Response data, response status code and response headers
    def update_cluster_profile_by_id_with_http_info(ext_id, if_match, ntnx_request_id, clustermgmt_v40_config_cluster_profile, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterProfilesApi.update_cluster_profile_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ClusterProfilesApi.update_cluster_profile_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ClusterProfilesApi.update_cluster_profile_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling ClusterProfilesApi.update_cluster_profile_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling ClusterProfilesApi.update_cluster_profile_by_id"
      end
      # verify the required parameter 'clustermgmt_v40_config_cluster_profile' is set
      if @api_client.config.client_side_validation && clustermgmt_v40_config_cluster_profile.nil?
        fail ArgumentError, "Missing the required parameter 'clustermgmt_v40_config_cluster_profile' when calling ClusterProfilesApi.update_cluster_profile_by_id"
      end
      # resource path
      local_var_path = '/clustermgmt/v4.0/config/cluster-profiles/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$dryrun'] = opts[:'dryrun'] if !opts[:'dryrun'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(clustermgmt_v40_config_cluster_profile)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateClusterProfileById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ClusterProfilesApi.update_cluster_profile_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterProfilesApi#update_cluster_profile_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
